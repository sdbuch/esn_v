
esn7e_offlinestream_demo.elf:     file format elf32-littlenios2
esn7e_offlinestream_demo.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000c854 memsz 0x0000c854 flags r-x
    LOAD off    0x0000d874 vaddr 0x0004c874 paddr 0x0004e2cc align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x0000fd24 vaddr 0x0004fd24 paddr 0x0004fd24 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c390  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000032c  0004c548  0004c548  0000d548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0004c874  0004e2cc  0000d874  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0004fd24  0004fd24  0000fd24  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f2cc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d60  00000000  00000000  0000f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022105  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008c64  00000000  00000000  00032155  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00009f06  00000000  00000000  0003adb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001944  00000000  00000000  00044cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002ea2  00000000  00000000  00046604  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000106bc  00000000  00000000  000494a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  00059b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  00059bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005d802  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  0005d805  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005d80f  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005d810  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005d811  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005d815  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005d819  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0005d81d  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0005d826  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0005d82f  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000011  00000000  00000000  0005d838  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000032  00000000  00000000  0005d849  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005346f  00000000  00000000  0005d87b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
0004c548 l    d  .rodata	00000000 .rodata
0004c874 l    d  .rwdata	00000000 .rwdata
0004fd24 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../esn7e_offlinestream_demo_bsp//obj/HAL/src/crt0.o
00040200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000405c0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00040758 l     F .text	00000034 __sprint_r
0004c59a l     O .rodata	00000010 blanks.3515
0004c5aa l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0004271c l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00044158 l     F .text	00000008 __fp_lock
00044160 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0004c874 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0004c5e0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004c728 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0004852c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000497f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00049910 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004993c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00049a38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00049b28 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00049c14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00049dec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004e2bc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0004a06c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004a1a8 l     F .text	00000038 alt_dev_reg
0004d230 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004a974 l     F .text	00000204 altera_avalon_jtag_uart_irq
0004ab78 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004b48c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004b92c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004ba64 l     F .text	00000050 alt_get_errno
0004bab4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00046ab0 g     F .text	00000074 _mprec_log10
00046ba0 g     F .text	00000084 __any_on
0004789c g     F .text	00000064 _isatty_r
0004c610 g     O .rodata	00000028 __mprec_tinytens
00049d34 g     F .text	00000078 alt_main
000497b4 g     F .text	00000044 __ashldi3
00040000 g       *ABS*	00000000 __alt_mem_nios2_instr_data_ram
0004fd80 g     O .bss	00000100 alt_irq
00047900 g     F .text	0000006c _lseek_r
0004a4e0 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0004e2cc g       *ABS*	00000000 __flash_rwdata_start
00048dcc g     F .text	0000005c __eqdf2
00050010 g       *ABS*	00000000 __alt_heap_start
0004071c g     F .text	0000003c printf
000473c4 g     F .text	0000005c __sseek
000441e8 g     F .text	0000010c __sinit
00044e80 g     F .text	0000009c _setlocale_r
00044174 g     F .text	00000064 __sfmoreglue
00049dcc g     F .text	00000020 __malloc_unlock
00045a78 g     F .text	00000128 memmove
0004a260 g     F .text	00000098 altera_avalon_fifo_init
000441d8 g     F .text	00000010 _cleanup
0004a590 g     F .text	00000058 altera_avalon_fifo_write_fifo
00045c7c g     F .text	000000a8 _Balloc
00048e84 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
0004a728 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
00047834 g     F .text	00000068 _fstat_r
0004fd3c g     O .bss	00000004 errno
0004fd44 g     O .bss	00000004 alt_argv
00056290 g       *ABS*	00000000 _gp
0004a03c g     F .text	00000030 usleep
0004a42c g     F .text	0000005c altera_avalon_fifo_clear_event
0004d0b0 g     O .rwdata	00000180 alt_fd_list
0004be90 g     F .text	00000090 alt_find_dev
00045980 g     F .text	000000f8 memcpy
00044168 g     F .text	0000000c _cleanup_r
00048fa8 g     F .text	000000d4 __floatsidf
0004b9ec g     F .text	00000078 alt_io_redirect
00048f4c g     F .text	0000005c __ltdf2
0004c548 g       *ABS*	00000000 __DTOR_END__
00046a0c g     F .text	000000a4 __ratio
0004ad78 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000406f0 g     F .text	0000002c _printf_r
000406e0 g     F .text	00000008 __udivsi3
00049a88 g     F .text	000000a0 isatty
0004c660 g     O .rodata	000000c8 __mprec_tens
00044f1c g     F .text	0000000c __locale_charset
0004c0e8 g     F .text	0000008c alt_icache_flush
0004fd38 g     O .bss	00000004 __malloc_top_pad
0004e298 g     O .rwdata	00000004 __mb_cur_max
00044f28 g     F .text	0000000c _localeconv_r
0004607c g     F .text	0000003c __i2b
0004483c g     F .text	000004e4 __sfvwrite_r
00047284 g     F .text	00000064 _sbrk_r
0004796c g     F .text	0000006c _read_r
0004cc74 g     O .rwdata	0000000c __lc_ctype
0004e2b4 g     O .rwdata	00000004 alt_max_fd
0004959c g     F .text	00000104 __unpack_d
000476e4 g     F .text	0000013c _fclose_r
00044128 g     F .text	00000030 fflush
0004fd34 g     O .bss	00000004 __malloc_max_sbrked_mem
00048880 g     F .text	00000054 __adddf3
00046780 g     F .text	00000148 __b2d
00047fa0 g     F .text	0000058c __umoddi3
00049c64 g     F .text	000000d0 lseek
0004e290 g     O .rwdata	00000004 _global_impure_ptr
00046c24 g     F .text	000005fc _realloc_r
00050010 g       *ABS*	00000000 __bss_end
0004b83c g     F .text	000000f0 alt_iic_isr_register
0004bd6c g     F .text	00000104 alt_tick
000479d8 g     F .text	000005c8 __udivdi3
0004c638 g     O .rodata	00000028 __mprec_bigtens
00045e60 g     F .text	00000104 __s2b
00049150 g     F .text	0000011c __floatunsidf
00046520 g     F .text	00000058 __mcmp
00044400 g     F .text	00000018 __fp_lock_all
0004b7f0 g     F .text	0000004c alt_ic_irq_enabled
0004bcd4 g     F .text	00000098 alt_alarm_stop
0004fd4c g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000cc alt_irq_handler
0004d088 g     O .rwdata	00000028 alt_dev_null
0004b448 g     F .text	00000044 alt_dcache_flush_all
00045f64 g     F .text	00000068 __hi0bits
0004907c g     F .text	000000d4 __fixdfsi
0004a488 g     F .text	00000058 altera_avalon_fifo_write_ienable
0004e2cc g       *ABS*	00000000 __ram_rwdata_end
0004a39c g     F .text	0000002c altera_avalon_fifo_read_almostempty
0004e2ac g     O .rwdata	00000008 alt_dev_list
0004a0bc g     F .text	000000ec write
0004c874 g       *ABS*	00000000 __ram_rodata_end
0004998c g     F .text	000000ac fstat
00049770 g     F .text	00000044 __lshrdi3
00046298 g     F .text	0000012c __pow5mult
0004fd2c g     O .bss	00000004 __nlocale_changed
000406e8 g     F .text	00000008 __umodsi3
00050010 g       *ABS*	00000000 end
0004a8b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0004a3c8 g     F .text	0000003c altera_avalon_fifo_read_event
0004c548 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
000492cc g     F .text	000000ac __clzsi2
0004af90 g     F .text	00000224 altera_avalon_jtag_uart_write
000443f0 g     F .text	00000004 __sfp_lock_acquire
0004a654 g     F .text	0000004c altera_avalon_fifo_read_fifo
00045888 g     F .text	000000f8 memchr
0004078c g     F .text	00001df8 ___vfprintf_internal_r
0004456c g     F .text	000002d0 _free_r
0004c36c g     F .text	000001a0 __call_exitprocs
0004fd28 g     O .bss	00000004 __mlocale_changed
0004e29c g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000004c _start
0004fd50 g     O .bss	00000004 _alt_tick_rate
000463c4 g     F .text	0000015c __lshift
0004fd54 g     O .bss	00000004 _alt_nticks
00049e3c g     F .text	000000f0 read
0004a214 g     F .text	0000004c alt_sys_init
0004c23c g     F .text	00000130 __register_exitproc
000460b8 g     F .text	000001e0 __multiply
0004ac1c g     F .text	00000068 altera_avalon_jtag_uart_close
0004c874 g       *ABS*	00000000 __ram_rwdata_start
0004c548 g       *ABS*	00000000 __ram_rodata_start
0004fd58 g     O .bss	00000028 __malloc_current_mallinfo
000468c8 g     F .text	00000144 __d2b
0004a750 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004c034 g     F .text	000000b4 alt_get_fd
0004b2f4 g     F .text	00000154 alt_busy_sleep
000496a0 g     F .text	000000d0 __fpcmp_parts_d
00047680 g     F .text	00000064 _close_r
0004c1c0 g     F .text	0000007c memcmp
0004a810 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00050010 g       *ABS*	00000000 __alt_stack_base
0004a860 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000425a8 g     F .text	00000174 __swsetup_r
0004a2f8 g     F .text	0000003c altera_avalon_fifo_read_status
00048c18 g     F .text	000001b4 __divdf3
000442f4 g     F .text	000000fc __sfp
00046b24 g     F .text	0000007c __copybits
0004cc80 g     O .rwdata	00000408 __malloc_av_
000443fc g     F .text	00000004 __sinit_lock_release
00048934 g     F .text	000002e4 __muldf3
000472e8 g     F .text	00000054 __sread
0004a6fc g     F .text	0000002c altera_avalon_fifo_read_other_info
0004bf20 g     F .text	00000114 alt_find_file
0004b4dc g     F .text	000000a0 alt_dev_llist_insert
00049dac g     F .text	00000020 __malloc_lock
00049f8c g     F .text	000000b0 sbrk
00043f40 g     F .text	000001e8 _fflush_r
000475c4 g     F .text	000000bc _calloc_r
0004fd24 g       *ABS*	00000000 __bss_start
00045ba0 g     F .text	000000dc memset
00040204 g     F .text	000003bc main
0004fd48 g     O .bss	00000004 alt_envp
0004fd30 g     O .bss	00000004 __malloc_max_total_mem
0004a7b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004a404 g     F .text	00000028 altera_avalon_fifo_read_level
00047420 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
00047820 g     F .text	00000014 fclose
0004fe80 g     O .bss	00000190 _atexit0
00042924 g     F .text	0000161c _dtoa_r
00045104 g     F .text	00000784 _malloc_r
0004e2b8 g     O .rwdata	00000004 alt_errno
00044d20 g     F .text	000000a8 _fwalk
00040634 g     F .text	00000050 __divsi3
0004c734 g     O .rodata	00000014 __thenan_df
00044430 g     F .text	0000013c _malloc_trim_r
0004c548 g       *ABS*	00000000 __CTOR_END__
00047428 g     F .text	000000a4 strcmp
0004c548 g       *ABS*	00000000 __flash_rodata_start
0004c548 g       *ABS*	00000000 __DTOR_LIST__
00048e28 g     F .text	0000005c __nedf2
0004a1e0 g     F .text	00000034 alt_irq_init
00049f2c g     F .text	00000060 alt_release_fd
0004c748 g     O .rodata	00000100 __clz_tab
0004fd24 g     O .bss	00000004 _PathLocale
0004c174 g     F .text	00000014 atexit
00047558 g     F .text	0000006c _write_r
00044f34 g     F .text	0000001c setlocale
0004e294 g     O .rwdata	00000004 _impure_ptr
0004fd40 g     O .bss	00000004 alt_argc
0004b5d8 g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00046720 g     F .text	00000060 __ulp
00047220 g     F .text	00000038 __isinfd
00044418 g     F .text	00000018 __fp_unlock_all
0004e2a4 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044f50 g     F .text	0000000c localeconv
0004a6a0 g     F .text	0000005c altera_avalon_fifo_write_other_info
0004b664 g     F .text	00000050 alt_ic_isr_register
0004e2cc g       *ABS*	00000000 _edata
00050010 g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
0004ac84 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004b750 g     F .text	000000a0 alt_ic_irq_disable
0004733c g     F .text	00000088 __swrite
0004e2a0 g     O .rwdata	00000004 __malloc_trim_threshold
0004be70 g     F .text	00000020 altera_nios2_qsys_irq_init
0004c188 g     F .text	00000038 exit
00044dc8 g     F .text	000000b8 _fwalk_reent
00046578 g     F .text	000001a8 __mdiff
00040684 g     F .text	0000005c __modsi3
0004a334 g     F .text	0000003c altera_avalon_fifo_read_ienable
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000443f4 g     F .text	00000004 __sfp_lock_release
0004c50c g     F .text	0000003c _exit
00047258 g     F .text	0000002c __isnand
0004b1b4 g     F .text	00000140 alt_alarm_start
0004926c g     F .text	00000060 __muldi3
0004a370 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00044f5c g     F .text	000001a8 __smakebuf_r
000474cc g     F .text	0000008c strlen
0004bb80 g     F .text	00000154 open
0004a5e8 g     F .text	0000006c altera_avalon_read_fifo
00048ee8 g     F .text	00000064 __gedf2
0004b634 g     F .text	00000030 alt_icache_flush_all
0004e2c0 g     O .rwdata	00000004 alt_priority_mask
0004b6b4 g     F .text	0000009c alt_ic_irq_enable
00042584 g     F .text	00000024 __vfprintf_internal
000488d4 g     F .text	00000060 __subdf3
00045fcc g     F .text	000000b0 __lo0bits
0004a538 g     F .text	00000058 altera_avalon_fifo_write_almostempty
0004e2c4 g     O .rwdata	00000008 alt_alarm_list
0004b57c g     F .text	0000005c _do_ctors
00049848 g     F .text	000000c8 close
00049b94 g     F .text	00000080 alt_load
00049378 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
000443f8 g     F .text	00000004 __sinit_lock_acquire
00045d4c g     F .text	00000114 __multadd
00045d24 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406e14 	ori	at,at,440
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_nios2_instr_data_ram-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18ff6004 	addi	r3,r3,-640
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	213f6004 	addi	r4,r4,-640
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   401c4:	00bffd16 	blt	zero,r2,401bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c8:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401cc:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   401d0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401d4:	d698a414 	ori	gp,gp,25232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d8:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401dc:	10bf4914 	ori	r2,r2,64804

    movhi r3, %hi(__bss_end)
   401e0:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401e4:	18c00414 	ori	r3,r3,16

    beq r2, r3, 1f
   401e8:	10c00326 	beq	r2,r3,401f8 <_start+0x40>

0:
    stw zero, (r2)
   401ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f4:	10fffd36 	bltu	r2,r3,401ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f8:	0049b940 	call	49b94 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401fc:	0049d340 	call	49d34 <alt_main>

00040200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40200:	003fff06 	br	40200 <alt_after_alt_main>

00040204 <main>:
#define ALMOST_EMPTYFULL_OFFSET 4
#define BUF_SIZE 8192


int main()
{
   40204:	defffd04 	addi	sp,sp,-12
   40208:	dfc00215 	stw	ra,8(sp)
   4020c:	df000115 	stw	fp,4(sp)
   40210:	dc000015 	stw	r16,0(sp)
   40214:	d839883a 	mov	fp,sp
   40218:	023ffff4 	movhi	r8,65535
   4021c:	421ffe04 	addi	r8,r8,32760
   40220:	da37883a 	add	sp,sp,r8
	int i;

	// initialise esn output fifo
	i = altera_avalon_fifo_init(
   40224:	01000234 	movhi	r4,8
   40228:	21040004 	addi	r4,r4,4096
   4022c:	000b883a 	mov	r5,zero
   40230:	01800104 	movi	r6,4
   40234:	01c1ff04 	movi	r7,2044
   40238:	004a2600 	call	4a260 <altera_avalon_fifo_init>
   4023c:	00fffff4 	movhi	r3,65535
   40240:	18dffe04 	addi	r3,r3,32760
   40244:	1f07883a 	add	r3,r3,fp
   40248:	18800015 	stw	r2,0(r3)
			4, // almost empty level
			2048 - 4); // almost full level

	// read data and channel information from the FIFOs

	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,0x00);
   4024c:	0007883a 	mov	r3,zero
   40250:	00800234 	movhi	r2,8
   40254:	10840804 	addi	r2,r2,4128
   40258:	10c00035 	stwio	r3,0(r2)
	i=0;
   4025c:	013ffff4 	movhi	r4,65535
   40260:	211ffe04 	addi	r4,r4,32760
   40264:	2709883a 	add	r4,r4,fp
   40268:	20000015 	stw	zero,0(r4)
	int data[BUF_SIZE];
	for(i= 0; i < BUF_SIZE; i++)
   4026c:	00bffff4 	movhi	r2,65535
   40270:	109ffe04 	addi	r2,r2,32760
   40274:	1705883a 	add	r2,r2,fp
   40278:	10000015 	stw	zero,0(r2)
   4027c:	00003a06 	br	40368 <main+0x164>
	{
		data[i] = altera_avalon_fifo_read_fifo(
   40280:	01000234 	movhi	r4,8
   40284:	21041204 	addi	r4,r4,4168
   40288:	01400234 	movhi	r5,8
   4028c:	29440004 	addi	r5,r5,4096
   40290:	004a6540 	call	4a654 <altera_avalon_fifo_read_fifo>
   40294:	1007883a 	mov	r3,r2
   40298:	013ffff4 	movhi	r4,65535
   4029c:	211ffe04 	addi	r4,r4,32760
   402a0:	2709883a 	add	r4,r4,fp
   402a4:	20800017 	ldw	r2,0(r4)
   402a8:	1085883a 	add	r2,r2,r2
   402ac:	1085883a 	add	r2,r2,r2
   402b0:	013ffff4 	movhi	r4,65535
   402b4:	211ffe04 	addi	r4,r4,32760
   402b8:	2709883a 	add	r4,r4,fp
   402bc:	2085883a 	add	r2,r4,r2
   402c0:	10800204 	addi	r2,r2,8
   402c4:	10c00015 	stw	r3,0(r2)
				ESN_DOUT_FIFO_OUT_BASE,
				ESN_DOUT_FIFO_OUT_CSR_BASE);

		// Slow LED FIFO status update
		if (!((i+1)%1000)) {
   402c8:	00fffff4 	movhi	r3,65535
   402cc:	18dffe04 	addi	r3,r3,32760
   402d0:	1f07883a 	add	r3,r3,fp
   402d4:	18800017 	ldw	r2,0(r3)
   402d8:	10800044 	addi	r2,r2,1
   402dc:	1009883a 	mov	r4,r2
   402e0:	0140fa04 	movi	r5,1000
   402e4:	00406840 	call	40684 <__modsi3>
   402e8:	1000161e 	bne	r2,zero,40344 <main+0x140>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,
   402ec:	01000234 	movhi	r4,8
   402f0:	21040004 	addi	r4,r4,4096
   402f4:	01400fc4 	movi	r5,63
   402f8:	004a2f80 	call	4a2f8 <altera_avalon_fifo_read_status>
   402fc:	1021883a 	mov	r16,r2
   40300:	01000234 	movhi	r4,8
   40304:	21040004 	addi	r4,r4,4096
   40308:	01400404 	movi	r5,16
   4030c:	004a3c80 	call	4a3c8 <altera_avalon_fifo_read_event>
   40310:	1085883a 	add	r2,r2,r2
   40314:	1085883a 	add	r2,r2,r2
   40318:	80a1883a 	add	r16,r16,r2
   4031c:	01000234 	movhi	r4,8
   40320:	21040004 	addi	r4,r4,4096
   40324:	01400804 	movi	r5,32
   40328:	004a3c80 	call	4a3c8 <altera_avalon_fifo_read_event>
   4032c:	100490fa 	slli	r2,r2,3
   40330:	8085883a 	add	r2,r16,r2
   40334:	10c03fcc 	andi	r3,r2,255
   40338:	00800234 	movhi	r2,8
   4033c:	10840804 	addi	r2,r2,4128
   40340:	10c00035 	stwio	r3,0(r2)
	// read data and channel information from the FIFOs

	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,0x00);
	i=0;
	int data[BUF_SIZE];
	for(i= 0; i < BUF_SIZE; i++)
   40344:	013ffff4 	movhi	r4,65535
   40348:	211ffe04 	addi	r4,r4,32760
   4034c:	2709883a 	add	r4,r4,fp
   40350:	20800017 	ldw	r2,0(r4)
   40354:	10800044 	addi	r2,r2,1
   40358:	00fffff4 	movhi	r3,65535
   4035c:	18dffe04 	addi	r3,r3,32760
   40360:	1f07883a 	add	r3,r3,fp
   40364:	18800015 	stw	r2,0(r3)
   40368:	013ffff4 	movhi	r4,65535
   4036c:	211ffe04 	addi	r4,r4,32760
   40370:	2709883a 	add	r4,r4,fp
   40374:	20800017 	ldw	r2,0(r4)
   40378:	10880010 	cmplti	r2,r2,8192
   4037c:	103fc01e 	bne	r2,zero,40280 <main+0x7c>
		}

	}

	// Readback data to host
	for (i = 0; i < BUF_SIZE; i++) {
   40380:	00bffff4 	movhi	r2,65535
   40384:	109ffe04 	addi	r2,r2,32760
   40388:	1705883a 	add	r2,r2,fp
   4038c:	10000015 	stw	zero,0(r2)
   40390:	00007e06 	br	4058c <main+0x388>
		// MSBs
		int printw;
		if ((data[i] & 0x80000000)>>31) {
   40394:	00fffff4 	movhi	r3,65535
   40398:	18dffe04 	addi	r3,r3,32760
   4039c:	1f07883a 	add	r3,r3,fp
   403a0:	18800017 	ldw	r2,0(r3)
   403a4:	1085883a 	add	r2,r2,r2
   403a8:	1085883a 	add	r2,r2,r2
   403ac:	013ffff4 	movhi	r4,65535
   403b0:	211ffe04 	addi	r4,r4,32760
   403b4:	2709883a 	add	r4,r4,fp
   403b8:	2085883a 	add	r2,r4,r2
   403bc:	10800204 	addi	r2,r2,8
   403c0:	10800017 	ldw	r2,0(r2)
   403c4:	1000130e 	bge	r2,zero,40414 <main+0x210>
			printw = ((data[i] & 0xffff0000)>>16) | 0xffff0000;
   403c8:	00fffff4 	movhi	r3,65535
   403cc:	18dffe04 	addi	r3,r3,32760
   403d0:	1f07883a 	add	r3,r3,fp
   403d4:	18800017 	ldw	r2,0(r3)
   403d8:	1085883a 	add	r2,r2,r2
   403dc:	1085883a 	add	r2,r2,r2
   403e0:	013ffff4 	movhi	r4,65535
   403e4:	211ffe04 	addi	r4,r4,32760
   403e8:	2709883a 	add	r4,r4,fp
   403ec:	2085883a 	add	r2,r4,r2
   403f0:	10800204 	addi	r2,r2,8
   403f4:	10800017 	ldw	r2,0(r2)
   403f8:	1004d43a 	srli	r2,r2,16
   403fc:	10bffff4 	orhi	r2,r2,65535
   40400:	00fffff4 	movhi	r3,65535
   40404:	18dfff04 	addi	r3,r3,32764
   40408:	1f07883a 	add	r3,r3,fp
   4040c:	18800015 	stw	r2,0(r3)
   40410:	00001106 	br	40458 <main+0x254>
		}
		else {
			printw = ((data[i] & 0xffff0000)>>16);
   40414:	013ffff4 	movhi	r4,65535
   40418:	211ffe04 	addi	r4,r4,32760
   4041c:	2709883a 	add	r4,r4,fp
   40420:	20800017 	ldw	r2,0(r4)
   40424:	1085883a 	add	r2,r2,r2
   40428:	1085883a 	add	r2,r2,r2
   4042c:	00fffff4 	movhi	r3,65535
   40430:	18dffe04 	addi	r3,r3,32760
   40434:	1f07883a 	add	r3,r3,fp
   40438:	1885883a 	add	r2,r3,r2
   4043c:	10800204 	addi	r2,r2,8
   40440:	10800017 	ldw	r2,0(r2)
   40444:	1004d43a 	srli	r2,r2,16
   40448:	013ffff4 	movhi	r4,65535
   4044c:	211fff04 	addi	r4,r4,32764
   40450:	2709883a 	add	r4,r4,fp
   40454:	20800015 	stw	r2,0(r4)
		}
		printf("0:%d\n", printw);
   40458:	01000174 	movhi	r4,5
   4045c:	21315204 	addi	r4,r4,-15032
   40460:	00bffff4 	movhi	r2,65535
   40464:	109fff04 	addi	r2,r2,32764
   40468:	1705883a 	add	r2,r2,fp
   4046c:	11400017 	ldw	r5,0(r2)
   40470:	004071c0 	call	4071c <printf>
		usleep(250);
   40474:	01003e84 	movi	r4,250
   40478:	004a03c0 	call	4a03c <usleep>

		// LSBs
		if ((data[i] & 0x00008000)>>15) {
   4047c:	00fffff4 	movhi	r3,65535
   40480:	18dffe04 	addi	r3,r3,32760
   40484:	1f07883a 	add	r3,r3,fp
   40488:	18800017 	ldw	r2,0(r3)
   4048c:	1085883a 	add	r2,r2,r2
   40490:	1085883a 	add	r2,r2,r2
   40494:	013ffff4 	movhi	r4,65535
   40498:	211ffe04 	addi	r4,r4,32760
   4049c:	2709883a 	add	r4,r4,fp
   404a0:	2085883a 	add	r2,r4,r2
   404a4:	10800204 	addi	r2,r2,8
   404a8:	10800017 	ldw	r2,0(r2)
   404ac:	10a0000c 	andi	r2,r2,32768
   404b0:	1005d3fa 	srai	r2,r2,15
   404b4:	10001226 	beq	r2,zero,40500 <main+0x2fc>
			printw = ((data[i] & 0x0000ffff)) | 0xffff0000;
   404b8:	00fffff4 	movhi	r3,65535
   404bc:	18dffe04 	addi	r3,r3,32760
   404c0:	1f07883a 	add	r3,r3,fp
   404c4:	18800017 	ldw	r2,0(r3)
   404c8:	1085883a 	add	r2,r2,r2
   404cc:	1085883a 	add	r2,r2,r2
   404d0:	013ffff4 	movhi	r4,65535
   404d4:	211ffe04 	addi	r4,r4,32760
   404d8:	2709883a 	add	r4,r4,fp
   404dc:	2085883a 	add	r2,r4,r2
   404e0:	10800204 	addi	r2,r2,8
   404e4:	10800017 	ldw	r2,0(r2)
   404e8:	10bffff4 	orhi	r2,r2,65535
   404ec:	00fffff4 	movhi	r3,65535
   404f0:	18dfff04 	addi	r3,r3,32764
   404f4:	1f07883a 	add	r3,r3,fp
   404f8:	18800015 	stw	r2,0(r3)
   404fc:	00001106 	br	40544 <main+0x340>
		}
		else {
			printw = ((data[i] & 0x0000ffff));
   40500:	013ffff4 	movhi	r4,65535
   40504:	211ffe04 	addi	r4,r4,32760
   40508:	2709883a 	add	r4,r4,fp
   4050c:	20800017 	ldw	r2,0(r4)
   40510:	1085883a 	add	r2,r2,r2
   40514:	1085883a 	add	r2,r2,r2
   40518:	00fffff4 	movhi	r3,65535
   4051c:	18dffe04 	addi	r3,r3,32760
   40520:	1f07883a 	add	r3,r3,fp
   40524:	1885883a 	add	r2,r3,r2
   40528:	10800204 	addi	r2,r2,8
   4052c:	10800017 	ldw	r2,0(r2)
   40530:	10bfffcc 	andi	r2,r2,65535
   40534:	013ffff4 	movhi	r4,65535
   40538:	211fff04 	addi	r4,r4,32764
   4053c:	2709883a 	add	r4,r4,fp
   40540:	20800015 	stw	r2,0(r4)
		}
		printf("1:%d\n", printw);
   40544:	01000174 	movhi	r4,5
   40548:	21315404 	addi	r4,r4,-15024
   4054c:	00bffff4 	movhi	r2,65535
   40550:	109fff04 	addi	r2,r2,32764
   40554:	1705883a 	add	r2,r2,fp
   40558:	11400017 	ldw	r5,0(r2)
   4055c:	004071c0 	call	4071c <printf>
		usleep(250);
   40560:	01003e84 	movi	r4,250
   40564:	004a03c0 	call	4a03c <usleep>
		}

	}

	// Readback data to host
	for (i = 0; i < BUF_SIZE; i++) {
   40568:	00fffff4 	movhi	r3,65535
   4056c:	18dffe04 	addi	r3,r3,32760
   40570:	1f07883a 	add	r3,r3,fp
   40574:	18800017 	ldw	r2,0(r3)
   40578:	10800044 	addi	r2,r2,1
   4057c:	013ffff4 	movhi	r4,65535
   40580:	211ffe04 	addi	r4,r4,32760
   40584:	2709883a 	add	r4,r4,fp
   40588:	20800015 	stw	r2,0(r4)
   4058c:	00fffff4 	movhi	r3,65535
   40590:	18dffe04 	addi	r3,r3,32760
   40594:	1f07883a 	add	r3,r3,fp
   40598:	18800017 	ldw	r2,0(r3)
   4059c:	10880010 	cmplti	r2,r2,8192
   405a0:	103f7c1e 	bne	r2,zero,40394 <main+0x190>
		printf("1:%d\n", printw);
		usleep(250);

	}

	return 0;
   405a4:	0005883a 	mov	r2,zero
}
   405a8:	e037883a 	mov	sp,fp
   405ac:	dfc00217 	ldw	ra,8(sp)
   405b0:	df000117 	ldw	fp,4(sp)
   405b4:	dc000017 	ldw	r16,0(sp)
   405b8:	dec00304 	addi	sp,sp,12
   405bc:	f800283a 	ret

000405c0 <udivmodsi4>:
   405c0:	2005883a 	mov	r2,r4
   405c4:	2900182e 	bgeu	r5,r4,40628 <udivmodsi4+0x68>
   405c8:	28001716 	blt	r5,zero,40628 <udivmodsi4+0x68>
   405cc:	01000804 	movi	r4,32
   405d0:	00c00044 	movi	r3,1
   405d4:	00000206 	br	405e0 <udivmodsi4+0x20>
   405d8:	20001126 	beq	r4,zero,40620 <udivmodsi4+0x60>
   405dc:	28000516 	blt	r5,zero,405f4 <udivmodsi4+0x34>
   405e0:	294b883a 	add	r5,r5,r5
   405e4:	213fffc4 	addi	r4,r4,-1
   405e8:	18c7883a 	add	r3,r3,r3
   405ec:	28bffa36 	bltu	r5,r2,405d8 <udivmodsi4+0x18>
   405f0:	18000b26 	beq	r3,zero,40620 <udivmodsi4+0x60>
   405f4:	0009883a 	mov	r4,zero
   405f8:	11400236 	bltu	r2,r5,40604 <udivmodsi4+0x44>
   405fc:	1145c83a 	sub	r2,r2,r5
   40600:	20c8b03a 	or	r4,r4,r3
   40604:	1806d07a 	srli	r3,r3,1
   40608:	280ad07a 	srli	r5,r5,1
   4060c:	183ffa1e 	bne	r3,zero,405f8 <udivmodsi4+0x38>
   40610:	3000021e 	bne	r6,zero,4061c <udivmodsi4+0x5c>
   40614:	2005883a 	mov	r2,r4
   40618:	f800283a 	ret
   4061c:	f800283a 	ret
   40620:	0009883a 	mov	r4,zero
   40624:	003ffa06 	br	40610 <udivmodsi4+0x50>
   40628:	00c00044 	movi	r3,1
   4062c:	0009883a 	mov	r4,zero
   40630:	003ff106 	br	405f8 <udivmodsi4+0x38>

00040634 <__divsi3>:
   40634:	defffe04 	addi	sp,sp,-8
   40638:	dfc00115 	stw	ra,4(sp)
   4063c:	dc000015 	stw	r16,0(sp)
   40640:	20000a16 	blt	r4,zero,4066c <__divsi3+0x38>
   40644:	0021883a 	mov	r16,zero
   40648:	28000b16 	blt	r5,zero,40678 <__divsi3+0x44>
   4064c:	000d883a 	mov	r6,zero
   40650:	00405c00 	call	405c0 <udivmodsi4>
   40654:	80000126 	beq	r16,zero,4065c <__divsi3+0x28>
   40658:	0085c83a 	sub	r2,zero,r2
   4065c:	dfc00117 	ldw	ra,4(sp)
   40660:	dc000017 	ldw	r16,0(sp)
   40664:	dec00204 	addi	sp,sp,8
   40668:	f800283a 	ret
   4066c:	0109c83a 	sub	r4,zero,r4
   40670:	04000044 	movi	r16,1
   40674:	283ff50e 	bge	r5,zero,4064c <__divsi3+0x18>
   40678:	014bc83a 	sub	r5,zero,r5
   4067c:	8400005c 	xori	r16,r16,1
   40680:	003ff206 	br	4064c <__divsi3+0x18>

00040684 <__modsi3>:
   40684:	deffff04 	addi	sp,sp,-4
   40688:	dfc00015 	stw	ra,0(sp)
   4068c:	20000516 	blt	r4,zero,406a4 <__modsi3+0x20>
   40690:	28000c16 	blt	r5,zero,406c4 <__modsi3+0x40>
   40694:	01800044 	movi	r6,1
   40698:	dfc00017 	ldw	ra,0(sp)
   4069c:	dec00104 	addi	sp,sp,4
   406a0:	00405c01 	jmpi	405c0 <udivmodsi4>
   406a4:	0109c83a 	sub	r4,zero,r4
   406a8:	28000b16 	blt	r5,zero,406d8 <__modsi3+0x54>
   406ac:	01800044 	movi	r6,1
   406b0:	00405c00 	call	405c0 <udivmodsi4>
   406b4:	0085c83a 	sub	r2,zero,r2
   406b8:	dfc00017 	ldw	ra,0(sp)
   406bc:	dec00104 	addi	sp,sp,4
   406c0:	f800283a 	ret
   406c4:	014bc83a 	sub	r5,zero,r5
   406c8:	01800044 	movi	r6,1
   406cc:	dfc00017 	ldw	ra,0(sp)
   406d0:	dec00104 	addi	sp,sp,4
   406d4:	00405c01 	jmpi	405c0 <udivmodsi4>
   406d8:	014bc83a 	sub	r5,zero,r5
   406dc:	003ff306 	br	406ac <__modsi3+0x28>

000406e0 <__udivsi3>:
   406e0:	000d883a 	mov	r6,zero
   406e4:	00405c01 	jmpi	405c0 <udivmodsi4>

000406e8 <__umodsi3>:
   406e8:	01800044 	movi	r6,1
   406ec:	00405c01 	jmpi	405c0 <udivmodsi4>

000406f0 <_printf_r>:
   406f0:	defffd04 	addi	sp,sp,-12
   406f4:	dfc00015 	stw	ra,0(sp)
   406f8:	d9800115 	stw	r6,4(sp)
   406fc:	d9c00215 	stw	r7,8(sp)
   40700:	280d883a 	mov	r6,r5
   40704:	21400217 	ldw	r5,8(r4)
   40708:	d9c00104 	addi	r7,sp,4
   4070c:	004078c0 	call	4078c <___vfprintf_internal_r>
   40710:	dfc00017 	ldw	ra,0(sp)
   40714:	dec00304 	addi	sp,sp,12
   40718:	f800283a 	ret

0004071c <printf>:
   4071c:	defffc04 	addi	sp,sp,-16
   40720:	dfc00015 	stw	ra,0(sp)
   40724:	d9400115 	stw	r5,4(sp)
   40728:	d9800215 	stw	r6,8(sp)
   4072c:	d9c00315 	stw	r7,12(sp)
   40730:	00800174 	movhi	r2,5
   40734:	10b8a504 	addi	r2,r2,-7532
   40738:	10800017 	ldw	r2,0(r2)
   4073c:	200b883a 	mov	r5,r4
   40740:	d9800104 	addi	r6,sp,4
   40744:	11000217 	ldw	r4,8(r2)
   40748:	00425840 	call	42584 <__vfprintf_internal>
   4074c:	dfc00017 	ldw	ra,0(sp)
   40750:	dec00404 	addi	sp,sp,16
   40754:	f800283a 	ret

00040758 <__sprint_r>:
   40758:	30800217 	ldw	r2,8(r6)
   4075c:	defffe04 	addi	sp,sp,-8
   40760:	dc000015 	stw	r16,0(sp)
   40764:	dfc00115 	stw	ra,4(sp)
   40768:	3021883a 	mov	r16,r6
   4076c:	10000226 	beq	r2,zero,40778 <__sprint_r+0x20>
   40770:	004483c0 	call	4483c <__sfvwrite_r>
   40774:	80000215 	stw	zero,8(r16)
   40778:	80000115 	stw	zero,4(r16)
   4077c:	dfc00117 	ldw	ra,4(sp)
   40780:	dc000017 	ldw	r16,0(sp)
   40784:	dec00204 	addi	sp,sp,8
   40788:	f800283a 	ret

0004078c <___vfprintf_internal_r>:
   4078c:	defeb904 	addi	sp,sp,-1308
   40790:	dc013d15 	stw	r16,1268(sp)
   40794:	d9013015 	stw	r4,1216(sp)
   40798:	dfc14615 	stw	ra,1304(sp)
   4079c:	df014515 	stw	fp,1300(sp)
   407a0:	ddc14415 	stw	r23,1296(sp)
   407a4:	dd814315 	stw	r22,1292(sp)
   407a8:	dd414215 	stw	r21,1288(sp)
   407ac:	dd014115 	stw	r20,1284(sp)
   407b0:	dcc14015 	stw	r19,1280(sp)
   407b4:	dc813f15 	stw	r18,1276(sp)
   407b8:	dc413e15 	stw	r17,1272(sp)
   407bc:	d9412915 	stw	r5,1188(sp)
   407c0:	3021883a 	mov	r16,r6
   407c4:	d9c12d15 	stw	r7,1204(sp)
   407c8:	0044f280 	call	44f28 <_localeconv_r>
   407cc:	10800017 	ldw	r2,0(r2)
   407d0:	d9013017 	ldw	r4,1216(sp)
   407d4:	d8013315 	stw	zero,1228(sp)
   407d8:	d8813715 	stw	r2,1244(sp)
   407dc:	d8013415 	stw	zero,1232(sp)
   407e0:	20000226 	beq	r4,zero,407ec <___vfprintf_internal_r+0x60>
   407e4:	20800e17 	ldw	r2,56(r4)
   407e8:	10019826 	beq	r2,zero,40e4c <___vfprintf_internal_r+0x6c0>
   407ec:	da012917 	ldw	r8,1188(sp)
   407f0:	4080030b 	ldhu	r2,12(r8)
   407f4:	10c0020c 	andi	r3,r2,8
   407f8:	18ffffcc 	andi	r3,r3,65535
   407fc:	18e0001c 	xori	r3,r3,32768
   40800:	18e00004 	addi	r3,r3,-32768
   40804:	18013a26 	beq	r3,zero,40cf0 <___vfprintf_internal_r+0x564>
   40808:	40c00417 	ldw	r3,16(r8)
   4080c:	18013826 	beq	r3,zero,40cf0 <___vfprintf_internal_r+0x564>
   40810:	1100068c 	andi	r4,r2,26
   40814:	00c00284 	movi	r3,10
   40818:	20c13e26 	beq	r4,r3,40d14 <___vfprintf_internal_r+0x588>
   4081c:	da010dc4 	addi	r8,sp,1079
   40820:	d8800404 	addi	r2,sp,16
   40824:	da012615 	stw	r8,1176(sp)
   40828:	d8811b15 	stw	r2,1132(sp)
   4082c:	1013883a 	mov	r9,r2
   40830:	d8812617 	ldw	r2,1176(sp)
   40834:	da010e04 	addi	r8,sp,1080
   40838:	dc413017 	ldw	r17,1216(sp)
   4083c:	da012715 	stw	r8,1180(sp)
   40840:	4091c83a 	sub	r8,r8,r2
   40844:	d8011d15 	stw	zero,1140(sp)
   40848:	d8011c15 	stw	zero,1136(sp)
   4084c:	802b883a 	mov	r21,r16
   40850:	d8013215 	stw	zero,1224(sp)
   40854:	d8013615 	stw	zero,1240(sp)
   40858:	d8013515 	stw	zero,1236(sp)
   4085c:	d8012c15 	stw	zero,1200(sp)
   40860:	da013915 	stw	r8,1252(sp)
   40864:	a8800007 	ldb	r2,0(r21)
   40868:	1002ec26 	beq	r2,zero,4141c <___vfprintf_internal_r+0xc90>
   4086c:	00c00944 	movi	r3,37
   40870:	a825883a 	mov	r18,r21
   40874:	10c0021e 	bne	r2,r3,40880 <___vfprintf_internal_r+0xf4>
   40878:	00001406 	br	408cc <___vfprintf_internal_r+0x140>
   4087c:	10c00326 	beq	r2,r3,4088c <___vfprintf_internal_r+0x100>
   40880:	94800044 	addi	r18,r18,1
   40884:	90800007 	ldb	r2,0(r18)
   40888:	103ffc1e 	bne	r2,zero,4087c <___vfprintf_internal_r+0xf0>
   4088c:	9561c83a 	sub	r16,r18,r21
   40890:	80000e26 	beq	r16,zero,408cc <___vfprintf_internal_r+0x140>
   40894:	da011d17 	ldw	r8,1140(sp)
   40898:	d8c11c17 	ldw	r3,1136(sp)
   4089c:	4d400015 	stw	r21,0(r9)
   408a0:	4c000115 	stw	r16,4(r9)
   408a4:	4411883a 	add	r8,r8,r16
   408a8:	18c00044 	addi	r3,r3,1
   408ac:	da011d15 	stw	r8,1140(sp)
   408b0:	d8c11c15 	stw	r3,1136(sp)
   408b4:	008001c4 	movi	r2,7
   408b8:	10c15d16 	blt	r2,r3,40e30 <___vfprintf_internal_r+0x6a4>
   408bc:	4a400204 	addi	r9,r9,8
   408c0:	d8812c17 	ldw	r2,1200(sp)
   408c4:	1405883a 	add	r2,r2,r16
   408c8:	d8812c15 	stw	r2,1200(sp)
   408cc:	90800007 	ldb	r2,0(r18)
   408d0:	10013b26 	beq	r2,zero,40dc0 <___vfprintf_internal_r+0x634>
   408d4:	95400044 	addi	r21,r18,1
   408d8:	94800047 	ldb	r18,1(r18)
   408dc:	d8012585 	stb	zero,1174(sp)
   408e0:	073fffc4 	movi	fp,-1
   408e4:	d8012e15 	stw	zero,1208(sp)
   408e8:	0021883a 	mov	r16,zero
   408ec:	00c01604 	movi	r3,88
   408f0:	01400244 	movi	r5,9
   408f4:	02800a84 	movi	r10,42
   408f8:	01c01b04 	movi	r7,108
   408fc:	01800ac4 	movi	r6,43
   40900:	02c00804 	movi	r11,32
   40904:	ad400044 	addi	r21,r21,1
   40908:	90bff804 	addi	r2,r18,-32
   4090c:	1880092e 	bgeu	r3,r2,40934 <___vfprintf_internal_r+0x1a8>
   40910:	90012b26 	beq	r18,zero,40dc0 <___vfprintf_internal_r+0x634>
   40914:	00c00044 	movi	r3,1
   40918:	d8c12815 	stw	r3,1184(sp)
   4091c:	dc810405 	stb	r18,1040(sp)
   40920:	d8012585 	stb	zero,1174(sp)
   40924:	d8c12b15 	stw	r3,1196(sp)
   40928:	dcc10404 	addi	r19,sp,1040
   4092c:	d8013115 	stw	zero,1220(sp)
   40930:	00008806 	br	40b54 <___vfprintf_internal_r+0x3c8>
   40934:	1085883a 	add	r2,r2,r2
   40938:	1085883a 	add	r2,r2,r2
   4093c:	01000134 	movhi	r4,4
   40940:	21025404 	addi	r4,r4,2384
   40944:	1105883a 	add	r2,r2,r4
   40948:	10800017 	ldw	r2,0(r2)
   4094c:	1000683a 	jmp	r2
   40950:	00040f04 	movi	zero,4156
   40954:	00040910 	cmplti	zero,zero,4132
   40958:	00040910 	cmplti	zero,zero,4132
   4095c:	00040f18 	cmpnei	zero,zero,4156
   40960:	00040910 	cmplti	zero,zero,4132
   40964:	00040910 	cmplti	zero,zero,4132
   40968:	00040910 	cmplti	zero,zero,4132
   4096c:	00040910 	cmplti	zero,zero,4132
   40970:	00040910 	cmplti	zero,zero,4132
   40974:	00040910 	cmplti	zero,zero,4132
   40978:	00041000 	call	4100 <__alt_mem_nios2_instr_data_ram-0x3bf00>
   4097c:	00040ebc 	xorhi	zero,zero,4154
   40980:	00040910 	cmplti	zero,zero,4132
   40984:	00040ce4 	muli	zero,zero,4147
   40988:	00040ec8 	cmpgei	zero,zero,4155
   4098c:	00040910 	cmplti	zero,zero,4132
   40990:	00040f24 	muli	zero,zero,4156
   40994:	00041024 	muli	zero,zero,4160
   40998:	00041024 	muli	zero,zero,4160
   4099c:	00041024 	muli	zero,zero,4160
   409a0:	00041024 	muli	zero,zero,4160
   409a4:	00041024 	muli	zero,zero,4160
   409a8:	00041024 	muli	zero,zero,4160
   409ac:	00041024 	muli	zero,zero,4160
   409b0:	00041024 	muli	zero,zero,4160
   409b4:	00041024 	muli	zero,zero,4160
   409b8:	00040910 	cmplti	zero,zero,4132
   409bc:	00040910 	cmplti	zero,zero,4132
   409c0:	00040910 	cmplti	zero,zero,4132
   409c4:	00040910 	cmplti	zero,zero,4132
   409c8:	00040910 	cmplti	zero,zero,4132
   409cc:	00040910 	cmplti	zero,zero,4132
   409d0:	00040910 	cmplti	zero,zero,4132
   409d4:	00040910 	cmplti	zero,zero,4132
   409d8:	00040910 	cmplti	zero,zero,4132
   409dc:	00040910 	cmplti	zero,zero,4132
   409e0:	00040c80 	call	40c8 <__alt_mem_nios2_instr_data_ram-0x3bf38>
   409e4:	0004104c 	andi	zero,zero,4161
   409e8:	00040910 	cmplti	zero,zero,4132
   409ec:	0004104c 	andi	zero,zero,4161
   409f0:	00040910 	cmplti	zero,zero,4132
   409f4:	00040910 	cmplti	zero,zero,4132
   409f8:	00040910 	cmplti	zero,zero,4132
   409fc:	00040910 	cmplti	zero,zero,4132
   40a00:	000411bc 	xorhi	zero,zero,4166
   40a04:	00040910 	cmplti	zero,zero,4132
   40a08:	00040910 	cmplti	zero,zero,4132
   40a0c:	00040c48 	cmpgei	zero,zero,4145
   40a10:	00040910 	cmplti	zero,zero,4132
   40a14:	00040910 	cmplti	zero,zero,4132
   40a18:	00040910 	cmplti	zero,zero,4132
   40a1c:	00040910 	cmplti	zero,zero,4132
   40a20:	00040910 	cmplti	zero,zero,4132
   40a24:	00040ab4 	movhi	zero,4138
   40a28:	00040910 	cmplti	zero,zero,4132
   40a2c:	00040910 	cmplti	zero,zero,4132
   40a30:	00040f30 	cmpltui	zero,zero,4156
   40a34:	00040910 	cmplti	zero,zero,4132
   40a38:	00040910 	cmplti	zero,zero,4132
   40a3c:	00040910 	cmplti	zero,zero,4132
   40a40:	00040910 	cmplti	zero,zero,4132
   40a44:	00040910 	cmplti	zero,zero,4132
   40a48:	00040910 	cmplti	zero,zero,4132
   40a4c:	00040910 	cmplti	zero,zero,4132
   40a50:	00040910 	cmplti	zero,zero,4132
   40a54:	00040910 	cmplti	zero,zero,4132
   40a58:	00040910 	cmplti	zero,zero,4132
   40a5c:	00040fa4 	muli	zero,zero,4158
   40a60:	00040c84 	movi	zero,4146
   40a64:	0004104c 	andi	zero,zero,4161
   40a68:	0004104c 	andi	zero,zero,4161
   40a6c:	0004104c 	andi	zero,zero,4161
   40a70:	00040f84 	movi	zero,4158
   40a74:	00040c84 	movi	zero,4146
   40a78:	00040910 	cmplti	zero,zero,4132
   40a7c:	00040910 	cmplti	zero,zero,4132
   40a80:	00040f90 	cmplti	zero,zero,4158
   40a84:	00040910 	cmplti	zero,zero,4132
   40a88:	00040fd4 	movui	zero,4159
   40a8c:	00040c4c 	andi	zero,zero,4145
   40a90:	000410d4 	movui	zero,4163
   40a94:	00041120 	cmpeqi	zero,zero,4164
   40a98:	00040910 	cmplti	zero,zero,4132
   40a9c:	0004112c 	andhi	zero,zero,4164
   40aa0:	00040910 	cmplti	zero,zero,4132
   40aa4:	00040ab8 	rdprs	zero,zero,4138
   40aa8:	00040910 	cmplti	zero,zero,4132
   40aac:	00040910 	cmplti	zero,zero,4132
   40ab0:	00041188 	cmpgei	zero,zero,4166
   40ab4:	84000414 	ori	r16,r16,16
   40ab8:	8080080c 	andi	r2,r16,32
   40abc:	1000f51e 	bne	r2,zero,40e94 <___vfprintf_internal_r+0x708>
   40ac0:	8080040c 	andi	r2,r16,16
   40ac4:	10042c26 	beq	r2,zero,41b78 <___vfprintf_internal_r+0x13ec>
   40ac8:	da012d17 	ldw	r8,1204(sp)
   40acc:	002d883a 	mov	r22,zero
   40ad0:	00c00044 	movi	r3,1
   40ad4:	45c00017 	ldw	r23,0(r8)
   40ad8:	42000104 	addi	r8,r8,4
   40adc:	da012d15 	stw	r8,1204(sp)
   40ae0:	b805883a 	mov	r2,r23
   40ae4:	d8012585 	stb	zero,1174(sp)
   40ae8:	e0000216 	blt	fp,zero,40af4 <___vfprintf_internal_r+0x368>
   40aec:	013fdfc4 	movi	r4,-129
   40af0:	8120703a 	and	r16,r16,r4
   40af4:	1002671e 	bne	r2,zero,41494 <___vfprintf_internal_r+0xd08>
   40af8:	e002661e 	bne	fp,zero,41494 <___vfprintf_internal_r+0xd08>
   40afc:	18c03fcc 	andi	r3,r3,255
   40b00:	1803561e 	bne	r3,zero,4185c <___vfprintf_internal_r+0x10d0>
   40b04:	8080004c 	andi	r2,r16,1
   40b08:	10035426 	beq	r2,zero,4185c <___vfprintf_internal_r+0x10d0>
   40b0c:	da013917 	ldw	r8,1252(sp)
   40b10:	00800c04 	movi	r2,48
   40b14:	d8810dc5 	stb	r2,1079(sp)
   40b18:	da012b15 	stw	r8,1196(sp)
   40b1c:	dcc10dc4 	addi	r19,sp,1079
   40b20:	d8812b17 	ldw	r2,1196(sp)
   40b24:	d8812815 	stw	r2,1184(sp)
   40b28:	1700010e 	bge	r2,fp,40b30 <___vfprintf_internal_r+0x3a4>
   40b2c:	df012815 	stw	fp,1184(sp)
   40b30:	d8812583 	ldbu	r2,1174(sp)
   40b34:	df013115 	stw	fp,1220(sp)
   40b38:	10803fcc 	andi	r2,r2,255
   40b3c:	1080201c 	xori	r2,r2,128
   40b40:	10bfe004 	addi	r2,r2,-128
   40b44:	10000326 	beq	r2,zero,40b54 <___vfprintf_internal_r+0x3c8>
   40b48:	da012817 	ldw	r8,1184(sp)
   40b4c:	42000044 	addi	r8,r8,1
   40b50:	da012815 	stw	r8,1184(sp)
   40b54:	80c0008c 	andi	r3,r16,2
   40b58:	d8c12a15 	stw	r3,1192(sp)
   40b5c:	18000326 	beq	r3,zero,40b6c <___vfprintf_internal_r+0x3e0>
   40b60:	da012817 	ldw	r8,1184(sp)
   40b64:	42000084 	addi	r8,r8,2
   40b68:	da012815 	stw	r8,1184(sp)
   40b6c:	80c0210c 	andi	r3,r16,132
   40b70:	d8c12f15 	stw	r3,1212(sp)
   40b74:	1801941e 	bne	r3,zero,411c8 <___vfprintf_internal_r+0xa3c>
   40b78:	da012e17 	ldw	r8,1208(sp)
   40b7c:	d8c12817 	ldw	r3,1184(sp)
   40b80:	40edc83a 	sub	r22,r8,r3
   40b84:	0581900e 	bge	zero,r22,411c8 <___vfprintf_internal_r+0xa3c>
   40b88:	02800404 	movi	r10,16
   40b8c:	da011d17 	ldw	r8,1140(sp)
   40b90:	d8c11c17 	ldw	r3,1136(sp)
   40b94:	05c00174 	movhi	r23,5
   40b98:	bdf16684 	addi	r23,r23,-14950
   40b9c:	5580200e 	bge	r10,r22,40c20 <___vfprintf_internal_r+0x494>
   40ba0:	dc813815 	stw	r18,1248(sp)
   40ba4:	5039883a 	mov	fp,r10
   40ba8:	b825883a 	mov	r18,r23
   40bac:	050001c4 	movi	r20,7
   40bb0:	b02f883a 	mov	r23,r22
   40bb4:	802d883a 	mov	r22,r16
   40bb8:	dc012917 	ldw	r16,1188(sp)
   40bbc:	00000306 	br	40bcc <___vfprintf_internal_r+0x440>
   40bc0:	bdfffc04 	addi	r23,r23,-16
   40bc4:	4a400204 	addi	r9,r9,8
   40bc8:	e5c0110e 	bge	fp,r23,40c10 <___vfprintf_internal_r+0x484>
   40bcc:	4c800015 	stw	r18,0(r9)
   40bd0:	4f000115 	stw	fp,4(r9)
   40bd4:	42000404 	addi	r8,r8,16
   40bd8:	18c00044 	addi	r3,r3,1
   40bdc:	da011d15 	stw	r8,1140(sp)
   40be0:	d8c11c15 	stw	r3,1136(sp)
   40be4:	a0fff60e 	bge	r20,r3,40bc0 <___vfprintf_internal_r+0x434>
   40be8:	8809883a 	mov	r4,r17
   40bec:	800b883a 	mov	r5,r16
   40bf0:	d9811b04 	addi	r6,sp,1132
   40bf4:	00407580 	call	40758 <__sprint_r>
   40bf8:	1000771e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   40bfc:	bdfffc04 	addi	r23,r23,-16
   40c00:	da011d17 	ldw	r8,1140(sp)
   40c04:	d8c11c17 	ldw	r3,1136(sp)
   40c08:	da400404 	addi	r9,sp,16
   40c0c:	e5ffef16 	blt	fp,r23,40bcc <___vfprintf_internal_r+0x440>
   40c10:	b021883a 	mov	r16,r22
   40c14:	b82d883a 	mov	r22,r23
   40c18:	902f883a 	mov	r23,r18
   40c1c:	dc813817 	ldw	r18,1248(sp)
   40c20:	4dc00015 	stw	r23,0(r9)
   40c24:	4d800115 	stw	r22,4(r9)
   40c28:	4591883a 	add	r8,r8,r22
   40c2c:	18c00044 	addi	r3,r3,1
   40c30:	da011d15 	stw	r8,1140(sp)
   40c34:	d8c11c15 	stw	r3,1136(sp)
   40c38:	008001c4 	movi	r2,7
   40c3c:	10c36d16 	blt	r2,r3,419f4 <___vfprintf_internal_r+0x1268>
   40c40:	4a400204 	addi	r9,r9,8
   40c44:	00016206 	br	411d0 <___vfprintf_internal_r+0xa44>
   40c48:	84000414 	ori	r16,r16,16
   40c4c:	8080080c 	andi	r2,r16,32
   40c50:	1000801e 	bne	r2,zero,40e54 <___vfprintf_internal_r+0x6c8>
   40c54:	8080040c 	andi	r2,r16,16
   40c58:	1003da26 	beq	r2,zero,41bc4 <___vfprintf_internal_r+0x1438>
   40c5c:	d8c12d17 	ldw	r3,1204(sp)
   40c60:	002d883a 	mov	r22,zero
   40c64:	1dc00017 	ldw	r23,0(r3)
   40c68:	18c00104 	addi	r3,r3,4
   40c6c:	d8c12d15 	stw	r3,1204(sp)
   40c70:	b805883a 	mov	r2,r23
   40c74:	0007883a 	mov	r3,zero
   40c78:	d8012585 	stb	zero,1174(sp)
   40c7c:	003f9a06 	br	40ae8 <___vfprintf_internal_r+0x35c>
   40c80:	84000414 	ori	r16,r16,16
   40c84:	8080080c 	andi	r2,r16,32
   40c88:	10007b1e 	bne	r2,zero,40e78 <___vfprintf_internal_r+0x6ec>
   40c8c:	8080040c 	andi	r2,r16,16
   40c90:	1003ed26 	beq	r2,zero,41c48 <___vfprintf_internal_r+0x14bc>
   40c94:	d9012d17 	ldw	r4,1204(sp)
   40c98:	25c00017 	ldw	r23,0(r4)
   40c9c:	21000104 	addi	r4,r4,4
   40ca0:	d9012d15 	stw	r4,1204(sp)
   40ca4:	b82dd7fa 	srai	r22,r23,31
   40ca8:	b005883a 	mov	r2,r22
   40cac:	1003230e 	bge	r2,zero,4193c <___vfprintf_internal_r+0x11b0>
   40cb0:	05efc83a 	sub	r23,zero,r23
   40cb4:	b804c03a 	cmpne	r2,r23,zero
   40cb8:	05adc83a 	sub	r22,zero,r22
   40cbc:	b0adc83a 	sub	r22,r22,r2
   40cc0:	00800b44 	movi	r2,45
   40cc4:	d8812585 	stb	r2,1174(sp)
   40cc8:	00c00044 	movi	r3,1
   40ccc:	bd84b03a 	or	r2,r23,r22
   40cd0:	003f8506 	br	40ae8 <___vfprintf_internal_r+0x35c>
   40cd4:	da012e17 	ldw	r8,1208(sp)
   40cd8:	d8812d15 	stw	r2,1204(sp)
   40cdc:	0211c83a 	sub	r8,zero,r8
   40ce0:	da012e15 	stw	r8,1208(sp)
   40ce4:	84000114 	ori	r16,r16,4
   40ce8:	ac800007 	ldb	r18,0(r21)
   40cec:	003f0506 	br	40904 <___vfprintf_internal_r+0x178>
   40cf0:	d9013017 	ldw	r4,1216(sp)
   40cf4:	d9412917 	ldw	r5,1188(sp)
   40cf8:	00425a80 	call	425a8 <__swsetup_r>
   40cfc:	10003d1e 	bne	r2,zero,40df4 <___vfprintf_internal_r+0x668>
   40d00:	d8c12917 	ldw	r3,1188(sp)
   40d04:	1880030b 	ldhu	r2,12(r3)
   40d08:	00c00284 	movi	r3,10
   40d0c:	1100068c 	andi	r4,r2,26
   40d10:	20fec21e 	bne	r4,r3,4081c <___vfprintf_internal_r+0x90>
   40d14:	d9012917 	ldw	r4,1188(sp)
   40d18:	20c0038b 	ldhu	r3,14(r4)
   40d1c:	193fffcc 	andi	r4,r3,65535
   40d20:	2120001c 	xori	r4,r4,32768
   40d24:	21200004 	addi	r4,r4,-32768
   40d28:	203ebc16 	blt	r4,zero,4081c <___vfprintf_internal_r+0x90>
   40d2c:	da012917 	ldw	r8,1188(sp)
   40d30:	d9013017 	ldw	r4,1216(sp)
   40d34:	d9c12d17 	ldw	r7,1204(sp)
   40d38:	42800717 	ldw	r10,28(r8)
   40d3c:	42400917 	ldw	r9,36(r8)
   40d40:	10bfff4c 	andi	r2,r2,65533
   40d44:	02010004 	movi	r8,1024
   40d48:	d881070d 	sth	r2,1052(sp)
   40d4c:	d9410404 	addi	r5,sp,1040
   40d50:	d8800404 	addi	r2,sp,16
   40d54:	800d883a 	mov	r6,r16
   40d58:	d8c1078d 	sth	r3,1054(sp)
   40d5c:	da810b15 	stw	r10,1068(sp)
   40d60:	da410d15 	stw	r9,1076(sp)
   40d64:	d8810415 	stw	r2,1040(sp)
   40d68:	d8810815 	stw	r2,1056(sp)
   40d6c:	da010615 	stw	r8,1048(sp)
   40d70:	da010915 	stw	r8,1060(sp)
   40d74:	d8010a15 	stw	zero,1064(sp)
   40d78:	004078c0 	call	4078c <___vfprintf_internal_r>
   40d7c:	d8812c15 	stw	r2,1200(sp)
   40d80:	10000416 	blt	r2,zero,40d94 <___vfprintf_internal_r+0x608>
   40d84:	d9013017 	ldw	r4,1216(sp)
   40d88:	d9410404 	addi	r5,sp,1040
   40d8c:	0043f400 	call	43f40 <_fflush_r>
   40d90:	1005d81e 	bne	r2,zero,424f4 <___vfprintf_internal_r+0x1d68>
   40d94:	d881070b 	ldhu	r2,1052(sp)
   40d98:	1080100c 	andi	r2,r2,64
   40d9c:	10bfffcc 	andi	r2,r2,65535
   40da0:	10a0001c 	xori	r2,r2,32768
   40da4:	10a00004 	addi	r2,r2,-32768
   40da8:	10001426 	beq	r2,zero,40dfc <___vfprintf_internal_r+0x670>
   40dac:	d8c12917 	ldw	r3,1188(sp)
   40db0:	1880030b 	ldhu	r2,12(r3)
   40db4:	10801014 	ori	r2,r2,64
   40db8:	1880030d 	sth	r2,12(r3)
   40dbc:	00000f06 	br	40dfc <___vfprintf_internal_r+0x670>
   40dc0:	d8811d17 	ldw	r2,1140(sp)
   40dc4:	10000426 	beq	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   40dc8:	d9013017 	ldw	r4,1216(sp)
   40dcc:	d9412917 	ldw	r5,1188(sp)
   40dd0:	d9811b04 	addi	r6,sp,1132
   40dd4:	00407580 	call	40758 <__sprint_r>
   40dd8:	d8c12917 	ldw	r3,1188(sp)
   40ddc:	1880030b 	ldhu	r2,12(r3)
   40de0:	1080100c 	andi	r2,r2,64
   40de4:	10bfffcc 	andi	r2,r2,65535
   40de8:	10a0001c 	xori	r2,r2,32768
   40dec:	10a00004 	addi	r2,r2,-32768
   40df0:	10000226 	beq	r2,zero,40dfc <___vfprintf_internal_r+0x670>
   40df4:	00bfffc4 	movi	r2,-1
   40df8:	d8812c15 	stw	r2,1200(sp)
   40dfc:	d8812c17 	ldw	r2,1200(sp)
   40e00:	dfc14617 	ldw	ra,1304(sp)
   40e04:	df014517 	ldw	fp,1300(sp)
   40e08:	ddc14417 	ldw	r23,1296(sp)
   40e0c:	dd814317 	ldw	r22,1292(sp)
   40e10:	dd414217 	ldw	r21,1288(sp)
   40e14:	dd014117 	ldw	r20,1284(sp)
   40e18:	dcc14017 	ldw	r19,1280(sp)
   40e1c:	dc813f17 	ldw	r18,1276(sp)
   40e20:	dc413e17 	ldw	r17,1272(sp)
   40e24:	dc013d17 	ldw	r16,1268(sp)
   40e28:	dec14704 	addi	sp,sp,1308
   40e2c:	f800283a 	ret
   40e30:	d9412917 	ldw	r5,1188(sp)
   40e34:	8809883a 	mov	r4,r17
   40e38:	d9811b04 	addi	r6,sp,1132
   40e3c:	00407580 	call	40758 <__sprint_r>
   40e40:	103fe51e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   40e44:	da400404 	addi	r9,sp,16
   40e48:	003e9d06 	br	408c0 <___vfprintf_internal_r+0x134>
   40e4c:	00441e80 	call	441e8 <__sinit>
   40e50:	003e6606 	br	407ec <___vfprintf_internal_r+0x60>
   40e54:	d8812d17 	ldw	r2,1204(sp)
   40e58:	0007883a 	mov	r3,zero
   40e5c:	15c00017 	ldw	r23,0(r2)
   40e60:	15800117 	ldw	r22,4(r2)
   40e64:	10800204 	addi	r2,r2,8
   40e68:	d8812d15 	stw	r2,1204(sp)
   40e6c:	d8012585 	stb	zero,1174(sp)
   40e70:	bd84b03a 	or	r2,r23,r22
   40e74:	003f1c06 	br	40ae8 <___vfprintf_internal_r+0x35c>
   40e78:	d8c12d17 	ldw	r3,1204(sp)
   40e7c:	18800117 	ldw	r2,4(r3)
   40e80:	1dc00017 	ldw	r23,0(r3)
   40e84:	18c00204 	addi	r3,r3,8
   40e88:	d8c12d15 	stw	r3,1204(sp)
   40e8c:	102d883a 	mov	r22,r2
   40e90:	003f8606 	br	40cac <___vfprintf_internal_r+0x520>
   40e94:	d8c12d17 	ldw	r3,1204(sp)
   40e98:	d9012d17 	ldw	r4,1204(sp)
   40e9c:	1dc00017 	ldw	r23,0(r3)
   40ea0:	1d800117 	ldw	r22,4(r3)
   40ea4:	21000204 	addi	r4,r4,8
   40ea8:	00c00044 	movi	r3,1
   40eac:	d9012d15 	stw	r4,1204(sp)
   40eb0:	bd84b03a 	or	r2,r23,r22
   40eb4:	d8012585 	stb	zero,1174(sp)
   40eb8:	003f0b06 	br	40ae8 <___vfprintf_internal_r+0x35c>
   40ebc:	d9812585 	stb	r6,1174(sp)
   40ec0:	ac800007 	ldb	r18,0(r21)
   40ec4:	003e8f06 	br	40904 <___vfprintf_internal_r+0x178>
   40ec8:	ac800007 	ldb	r18,0(r21)
   40ecc:	a9000044 	addi	r4,r21,1
   40ed0:	92857d26 	beq	r18,r10,424c8 <___vfprintf_internal_r+0x1d3c>
   40ed4:	90bff404 	addi	r2,r18,-48
   40ed8:	0039883a 	mov	fp,zero
   40edc:	28800736 	bltu	r5,r2,40efc <___vfprintf_internal_r+0x770>
   40ee0:	24800007 	ldb	r18,0(r4)
   40ee4:	e70002a4 	muli	fp,fp,10
   40ee8:	21000044 	addi	r4,r4,1
   40eec:	1739883a 	add	fp,r2,fp
   40ef0:	90bff404 	addi	r2,r18,-48
   40ef4:	28bffa2e 	bgeu	r5,r2,40ee0 <___vfprintf_internal_r+0x754>
   40ef8:	e0044216 	blt	fp,zero,42004 <___vfprintf_internal_r+0x1878>
   40efc:	202b883a 	mov	r21,r4
   40f00:	003e8106 	br	40908 <___vfprintf_internal_r+0x17c>
   40f04:	d8812587 	ldb	r2,1174(sp)
   40f08:	1003581e 	bne	r2,zero,41c6c <___vfprintf_internal_r+0x14e0>
   40f0c:	dac12585 	stb	r11,1174(sp)
   40f10:	ac800007 	ldb	r18,0(r21)
   40f14:	003e7b06 	br	40904 <___vfprintf_internal_r+0x178>
   40f18:	84000054 	ori	r16,r16,1
   40f1c:	ac800007 	ldb	r18,0(r21)
   40f20:	003e7806 	br	40904 <___vfprintf_internal_r+0x178>
   40f24:	84002014 	ori	r16,r16,128
   40f28:	ac800007 	ldb	r18,0(r21)
   40f2c:	003e7506 	br	40904 <___vfprintf_internal_r+0x178>
   40f30:	02000174 	movhi	r8,5
   40f34:	42315a04 	addi	r8,r8,-15000
   40f38:	da013615 	stw	r8,1240(sp)
   40f3c:	8080080c 	andi	r2,r16,32
   40f40:	10009626 	beq	r2,zero,4119c <___vfprintf_internal_r+0xa10>
   40f44:	d8812d17 	ldw	r2,1204(sp)
   40f48:	15c00017 	ldw	r23,0(r2)
   40f4c:	15800117 	ldw	r22,4(r2)
   40f50:	10800204 	addi	r2,r2,8
   40f54:	d8812d15 	stw	r2,1204(sp)
   40f58:	8080004c 	andi	r2,r16,1
   40f5c:	1002ae26 	beq	r2,zero,41a18 <___vfprintf_internal_r+0x128c>
   40f60:	bd84b03a 	or	r2,r23,r22
   40f64:	10032a26 	beq	r2,zero,41c10 <___vfprintf_internal_r+0x1484>
   40f68:	00c00c04 	movi	r3,48
   40f6c:	d8c12505 	stb	r3,1172(sp)
   40f70:	dc812545 	stb	r18,1173(sp)
   40f74:	84000094 	ori	r16,r16,2
   40f78:	00c00084 	movi	r3,2
   40f7c:	d8012585 	stb	zero,1174(sp)
   40f80:	003ed906 	br	40ae8 <___vfprintf_internal_r+0x35c>
   40f84:	84001014 	ori	r16,r16,64
   40f88:	ac800007 	ldb	r18,0(r21)
   40f8c:	003e5d06 	br	40904 <___vfprintf_internal_r+0x178>
   40f90:	ac800007 	ldb	r18,0(r21)
   40f94:	a805883a 	mov	r2,r21
   40f98:	91c43226 	beq	r18,r7,42064 <___vfprintf_internal_r+0x18d8>
   40f9c:	84000414 	ori	r16,r16,16
   40fa0:	003e5806 	br	40904 <___vfprintf_internal_r+0x178>
   40fa4:	d8c12d17 	ldw	r3,1204(sp)
   40fa8:	02000044 	movi	r8,1
   40fac:	da012815 	stw	r8,1184(sp)
   40fb0:	18800017 	ldw	r2,0(r3)
   40fb4:	18c00104 	addi	r3,r3,4
   40fb8:	d8012585 	stb	zero,1174(sp)
   40fbc:	d8810405 	stb	r2,1040(sp)
   40fc0:	d8c12d15 	stw	r3,1204(sp)
   40fc4:	da012b15 	stw	r8,1196(sp)
   40fc8:	dcc10404 	addi	r19,sp,1040
   40fcc:	d8013115 	stw	zero,1220(sp)
   40fd0:	003ee006 	br	40b54 <___vfprintf_internal_r+0x3c8>
   40fd4:	8080080c 	andi	r2,r16,32
   40fd8:	10031026 	beq	r2,zero,41c1c <___vfprintf_internal_r+0x1490>
   40fdc:	d9012d17 	ldw	r4,1204(sp)
   40fe0:	da012c17 	ldw	r8,1200(sp)
   40fe4:	20800017 	ldw	r2,0(r4)
   40fe8:	4007d7fa 	srai	r3,r8,31
   40fec:	21000104 	addi	r4,r4,4
   40ff0:	d9012d15 	stw	r4,1204(sp)
   40ff4:	12000015 	stw	r8,0(r2)
   40ff8:	10c00115 	stw	r3,4(r2)
   40ffc:	003e1906 	br	40864 <___vfprintf_internal_r+0xd8>
   41000:	da012d17 	ldw	r8,1204(sp)
   41004:	d9012d17 	ldw	r4,1204(sp)
   41008:	42000017 	ldw	r8,0(r8)
   4100c:	20800104 	addi	r2,r4,4
   41010:	da012e15 	stw	r8,1208(sp)
   41014:	403f2f16 	blt	r8,zero,40cd4 <___vfprintf_internal_r+0x548>
   41018:	d8812d15 	stw	r2,1204(sp)
   4101c:	ac800007 	ldb	r18,0(r21)
   41020:	003e3806 	br	40904 <___vfprintf_internal_r+0x178>
   41024:	0009883a 	mov	r4,zero
   41028:	90bff404 	addi	r2,r18,-48
   4102c:	ac800007 	ldb	r18,0(r21)
   41030:	210002a4 	muli	r4,r4,10
   41034:	ad400044 	addi	r21,r21,1
   41038:	2089883a 	add	r4,r4,r2
   4103c:	90bff404 	addi	r2,r18,-48
   41040:	28bffa2e 	bgeu	r5,r2,4102c <___vfprintf_internal_r+0x8a0>
   41044:	d9012e15 	stw	r4,1208(sp)
   41048:	003e2f06 	br	40908 <___vfprintf_internal_r+0x17c>
   4104c:	8080020c 	andi	r2,r16,8
   41050:	1002d426 	beq	r2,zero,41ba4 <___vfprintf_internal_r+0x1418>
   41054:	d8c12d17 	ldw	r3,1204(sp)
   41058:	1d800017 	ldw	r22,0(r3)
   4105c:	1d000117 	ldw	r20,4(r3)
   41060:	18c00204 	addi	r3,r3,8
   41064:	d8c12d15 	stw	r3,1204(sp)
   41068:	dd813315 	stw	r22,1228(sp)
   4106c:	dd013415 	stw	r20,1232(sp)
   41070:	b009883a 	mov	r4,r22
   41074:	a00b883a 	mov	r5,r20
   41078:	da413c15 	stw	r9,1264(sp)
   4107c:	00472200 	call	47220 <__isinfd>
   41080:	da413c17 	ldw	r9,1264(sp)
   41084:	b009883a 	mov	r4,r22
   41088:	a00b883a 	mov	r5,r20
   4108c:	10035726 	beq	r2,zero,41dec <___vfprintf_internal_r+0x1660>
   41090:	000d883a 	mov	r6,zero
   41094:	000f883a 	mov	r7,zero
   41098:	0048f4c0 	call	48f4c <__ltdf2>
   4109c:	da413c17 	ldw	r9,1264(sp)
   410a0:	10041b16 	blt	r2,zero,42110 <___vfprintf_internal_r+0x1984>
   410a4:	d8812583 	ldbu	r2,1174(sp)
   410a8:	00c011c4 	movi	r3,71
   410ac:	1c830b16 	blt	r3,r18,41cdc <___vfprintf_internal_r+0x1550>
   410b0:	04c00174 	movhi	r19,5
   410b4:	9cf15604 	addi	r19,r19,-15016
   410b8:	020000c4 	movi	r8,3
   410bc:	00ffdfc4 	movi	r3,-129
   410c0:	da012815 	stw	r8,1184(sp)
   410c4:	80e0703a 	and	r16,r16,r3
   410c8:	da012b15 	stw	r8,1196(sp)
   410cc:	d8013115 	stw	zero,1220(sp)
   410d0:	003e9906 	br	40b38 <___vfprintf_internal_r+0x3ac>
   410d4:	d8812d17 	ldw	r2,1204(sp)
   410d8:	d8c12d17 	ldw	r3,1204(sp)
   410dc:	02000174 	movhi	r8,5
   410e0:	42315f04 	addi	r8,r8,-14980
   410e4:	15c00017 	ldw	r23,0(r2)
   410e8:	00800c04 	movi	r2,48
   410ec:	18c00104 	addi	r3,r3,4
   410f0:	d8812505 	stb	r2,1172(sp)
   410f4:	00801e04 	movi	r2,120
   410f8:	d8812545 	stb	r2,1173(sp)
   410fc:	d8c12d15 	stw	r3,1204(sp)
   41100:	002d883a 	mov	r22,zero
   41104:	84000094 	ori	r16,r16,2
   41108:	da013615 	stw	r8,1240(sp)
   4110c:	00c00084 	movi	r3,2
   41110:	04801e04 	movi	r18,120
   41114:	b805883a 	mov	r2,r23
   41118:	d8012585 	stb	zero,1174(sp)
   4111c:	003e7206 	br	40ae8 <___vfprintf_internal_r+0x35c>
   41120:	84000814 	ori	r16,r16,32
   41124:	ac800007 	ldb	r18,0(r21)
   41128:	003df606 	br	40904 <___vfprintf_internal_r+0x178>
   4112c:	d8812d17 	ldw	r2,1204(sp)
   41130:	d8012585 	stb	zero,1174(sp)
   41134:	14c00017 	ldw	r19,0(r2)
   41138:	15c00104 	addi	r23,r2,4
   4113c:	98040126 	beq	r19,zero,42144 <___vfprintf_internal_r+0x19b8>
   41140:	9809883a 	mov	r4,r19
   41144:	e003dd16 	blt	fp,zero,420bc <___vfprintf_internal_r+0x1930>
   41148:	000b883a 	mov	r5,zero
   4114c:	e00d883a 	mov	r6,fp
   41150:	da413c15 	stw	r9,1264(sp)
   41154:	00458880 	call	45888 <memchr>
   41158:	da413c17 	ldw	r9,1264(sp)
   4115c:	10042e26 	beq	r2,zero,42218 <___vfprintf_internal_r+0x1a8c>
   41160:	14c5c83a 	sub	r2,r2,r19
   41164:	d8812b15 	stw	r2,1196(sp)
   41168:	e083790e 	bge	fp,r2,41f50 <___vfprintf_internal_r+0x17c4>
   4116c:	df012815 	stw	fp,1184(sp)
   41170:	e0049516 	blt	fp,zero,423c8 <___vfprintf_internal_r+0x1c3c>
   41174:	d8812583 	ldbu	r2,1174(sp)
   41178:	df012b15 	stw	fp,1196(sp)
   4117c:	ddc12d15 	stw	r23,1204(sp)
   41180:	d8013115 	stw	zero,1220(sp)
   41184:	003e6c06 	br	40b38 <___vfprintf_internal_r+0x3ac>
   41188:	02000174 	movhi	r8,5
   4118c:	42315f04 	addi	r8,r8,-14980
   41190:	da013615 	stw	r8,1240(sp)
   41194:	8080080c 	andi	r2,r16,32
   41198:	103f6a1e 	bne	r2,zero,40f44 <___vfprintf_internal_r+0x7b8>
   4119c:	8080040c 	andi	r2,r16,16
   411a0:	10029326 	beq	r2,zero,41bf0 <___vfprintf_internal_r+0x1464>
   411a4:	d8c12d17 	ldw	r3,1204(sp)
   411a8:	002d883a 	mov	r22,zero
   411ac:	1dc00017 	ldw	r23,0(r3)
   411b0:	18c00104 	addi	r3,r3,4
   411b4:	d8c12d15 	stw	r3,1204(sp)
   411b8:	003f6706 	br	40f58 <___vfprintf_internal_r+0x7cc>
   411bc:	84000214 	ori	r16,r16,8
   411c0:	ac800007 	ldb	r18,0(r21)
   411c4:	003dcf06 	br	40904 <___vfprintf_internal_r+0x178>
   411c8:	da011d17 	ldw	r8,1140(sp)
   411cc:	d8c11c17 	ldw	r3,1136(sp)
   411d0:	d8812587 	ldb	r2,1174(sp)
   411d4:	10000b26 	beq	r2,zero,41204 <___vfprintf_internal_r+0xa78>
   411d8:	d8812584 	addi	r2,sp,1174
   411dc:	48800015 	stw	r2,0(r9)
   411e0:	00800044 	movi	r2,1
   411e4:	48800115 	stw	r2,4(r9)
   411e8:	4091883a 	add	r8,r8,r2
   411ec:	1887883a 	add	r3,r3,r2
   411f0:	da011d15 	stw	r8,1140(sp)
   411f4:	d8c11c15 	stw	r3,1136(sp)
   411f8:	008001c4 	movi	r2,7
   411fc:	10c18516 	blt	r2,r3,41814 <___vfprintf_internal_r+0x1088>
   41200:	4a400204 	addi	r9,r9,8
   41204:	d9012a17 	ldw	r4,1192(sp)
   41208:	20000b26 	beq	r4,zero,41238 <___vfprintf_internal_r+0xaac>
   4120c:	d8812504 	addi	r2,sp,1172
   41210:	48800015 	stw	r2,0(r9)
   41214:	00800084 	movi	r2,2
   41218:	48800115 	stw	r2,4(r9)
   4121c:	4091883a 	add	r8,r8,r2
   41220:	18c00044 	addi	r3,r3,1
   41224:	da011d15 	stw	r8,1140(sp)
   41228:	d8c11c15 	stw	r3,1136(sp)
   4122c:	008001c4 	movi	r2,7
   41230:	10c18116 	blt	r2,r3,41838 <___vfprintf_internal_r+0x10ac>
   41234:	4a400204 	addi	r9,r9,8
   41238:	d9012f17 	ldw	r4,1212(sp)
   4123c:	00802004 	movi	r2,128
   41240:	2080fc26 	beq	r4,r2,41634 <___vfprintf_internal_r+0xea8>
   41244:	d8813117 	ldw	r2,1220(sp)
   41248:	d9012b17 	ldw	r4,1196(sp)
   4124c:	112fc83a 	sub	r23,r2,r4
   41250:	05c02a0e 	bge	zero,r23,412fc <___vfprintf_internal_r+0xb70>
   41254:	07000404 	movi	fp,16
   41258:	05000174 	movhi	r20,5
   4125c:	a5316a84 	addi	r20,r20,-14934
   41260:	e5c01d0e 	bge	fp,r23,412d8 <___vfprintf_internal_r+0xb4c>
   41264:	dc812a15 	stw	r18,1192(sp)
   41268:	058001c4 	movi	r22,7
   4126c:	a025883a 	mov	r18,r20
   41270:	8029883a 	mov	r20,r16
   41274:	dc012917 	ldw	r16,1188(sp)
   41278:	00000306 	br	41288 <___vfprintf_internal_r+0xafc>
   4127c:	bdfffc04 	addi	r23,r23,-16
   41280:	4a400204 	addi	r9,r9,8
   41284:	e5c0110e 	bge	fp,r23,412cc <___vfprintf_internal_r+0xb40>
   41288:	4c800015 	stw	r18,0(r9)
   4128c:	4f000115 	stw	fp,4(r9)
   41290:	42000404 	addi	r8,r8,16
   41294:	18c00044 	addi	r3,r3,1
   41298:	da011d15 	stw	r8,1140(sp)
   4129c:	d8c11c15 	stw	r3,1136(sp)
   412a0:	b0fff60e 	bge	r22,r3,4127c <___vfprintf_internal_r+0xaf0>
   412a4:	8809883a 	mov	r4,r17
   412a8:	800b883a 	mov	r5,r16
   412ac:	d9811b04 	addi	r6,sp,1132
   412b0:	00407580 	call	40758 <__sprint_r>
   412b4:	103ec81e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   412b8:	bdfffc04 	addi	r23,r23,-16
   412bc:	da011d17 	ldw	r8,1140(sp)
   412c0:	d8c11c17 	ldw	r3,1136(sp)
   412c4:	da400404 	addi	r9,sp,16
   412c8:	e5ffef16 	blt	fp,r23,41288 <___vfprintf_internal_r+0xafc>
   412cc:	a021883a 	mov	r16,r20
   412d0:	9029883a 	mov	r20,r18
   412d4:	dc812a17 	ldw	r18,1192(sp)
   412d8:	4d000015 	stw	r20,0(r9)
   412dc:	4dc00115 	stw	r23,4(r9)
   412e0:	45d1883a 	add	r8,r8,r23
   412e4:	18c00044 	addi	r3,r3,1
   412e8:	da011d15 	stw	r8,1140(sp)
   412ec:	d8c11c15 	stw	r3,1136(sp)
   412f0:	008001c4 	movi	r2,7
   412f4:	10c13e16 	blt	r2,r3,417f0 <___vfprintf_internal_r+0x1064>
   412f8:	4a400204 	addi	r9,r9,8
   412fc:	8080400c 	andi	r2,r16,256
   41300:	1000831e 	bne	r2,zero,41510 <___vfprintf_internal_r+0xd84>
   41304:	d8812b17 	ldw	r2,1196(sp)
   41308:	4cc00015 	stw	r19,0(r9)
   4130c:	48800115 	stw	r2,4(r9)
   41310:	4091883a 	add	r8,r8,r2
   41314:	18c00044 	addi	r3,r3,1
   41318:	da011d15 	stw	r8,1140(sp)
   4131c:	d8c11c15 	stw	r3,1136(sp)
   41320:	008001c4 	movi	r2,7
   41324:	10c05316 	blt	r2,r3,41474 <___vfprintf_internal_r+0xce8>
   41328:	4a400204 	addi	r9,r9,8
   4132c:	8400010c 	andi	r16,r16,4
   41330:	80002e26 	beq	r16,zero,413ec <___vfprintf_internal_r+0xc60>
   41334:	d8812e17 	ldw	r2,1208(sp)
   41338:	d8c12817 	ldw	r3,1184(sp)
   4133c:	10e1c83a 	sub	r16,r2,r3
   41340:	04002a0e 	bge	zero,r16,413ec <___vfprintf_internal_r+0xc60>
   41344:	04800404 	movi	r18,16
   41348:	d8c11c17 	ldw	r3,1136(sp)
   4134c:	05c00174 	movhi	r23,5
   41350:	bdf16684 	addi	r23,r23,-14950
   41354:	9400170e 	bge	r18,r16,413b4 <___vfprintf_internal_r+0xc28>
   41358:	04c001c4 	movi	r19,7
   4135c:	dd012917 	ldw	r20,1188(sp)
   41360:	00000306 	br	41370 <___vfprintf_internal_r+0xbe4>
   41364:	843ffc04 	addi	r16,r16,-16
   41368:	4a400204 	addi	r9,r9,8
   4136c:	9400110e 	bge	r18,r16,413b4 <___vfprintf_internal_r+0xc28>
   41370:	4dc00015 	stw	r23,0(r9)
   41374:	4c800115 	stw	r18,4(r9)
   41378:	42000404 	addi	r8,r8,16
   4137c:	18c00044 	addi	r3,r3,1
   41380:	da011d15 	stw	r8,1140(sp)
   41384:	d8c11c15 	stw	r3,1136(sp)
   41388:	98fff60e 	bge	r19,r3,41364 <___vfprintf_internal_r+0xbd8>
   4138c:	8809883a 	mov	r4,r17
   41390:	a00b883a 	mov	r5,r20
   41394:	d9811b04 	addi	r6,sp,1132
   41398:	00407580 	call	40758 <__sprint_r>
   4139c:	103e8e1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   413a0:	843ffc04 	addi	r16,r16,-16
   413a4:	da011d17 	ldw	r8,1140(sp)
   413a8:	d8c11c17 	ldw	r3,1136(sp)
   413ac:	da400404 	addi	r9,sp,16
   413b0:	943fef16 	blt	r18,r16,41370 <___vfprintf_internal_r+0xbe4>
   413b4:	4dc00015 	stw	r23,0(r9)
   413b8:	4c000115 	stw	r16,4(r9)
   413bc:	8211883a 	add	r8,r16,r8
   413c0:	18c00044 	addi	r3,r3,1
   413c4:	da011d15 	stw	r8,1140(sp)
   413c8:	d8c11c15 	stw	r3,1136(sp)
   413cc:	008001c4 	movi	r2,7
   413d0:	10c0060e 	bge	r2,r3,413ec <___vfprintf_internal_r+0xc60>
   413d4:	d9412917 	ldw	r5,1188(sp)
   413d8:	8809883a 	mov	r4,r17
   413dc:	d9811b04 	addi	r6,sp,1132
   413e0:	00407580 	call	40758 <__sprint_r>
   413e4:	103e7c1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   413e8:	da011d17 	ldw	r8,1140(sp)
   413ec:	dd012817 	ldw	r20,1184(sp)
   413f0:	d9012e17 	ldw	r4,1208(sp)
   413f4:	a100010e 	bge	r20,r4,413fc <___vfprintf_internal_r+0xc70>
   413f8:	2029883a 	mov	r20,r4
   413fc:	d8812c17 	ldw	r2,1200(sp)
   41400:	1505883a 	add	r2,r2,r20
   41404:	d8812c15 	stw	r2,1200(sp)
   41408:	4000b91e 	bne	r8,zero,416f0 <___vfprintf_internal_r+0xf64>
   4140c:	d8011c15 	stw	zero,1136(sp)
   41410:	a8800007 	ldb	r2,0(r21)
   41414:	da400404 	addi	r9,sp,16
   41418:	103d141e 	bne	r2,zero,4086c <___vfprintf_internal_r+0xe0>
   4141c:	a825883a 	mov	r18,r21
   41420:	003d2a06 	br	408cc <___vfprintf_internal_r+0x140>
   41424:	d9412917 	ldw	r5,1188(sp)
   41428:	8809883a 	mov	r4,r17
   4142c:	d9811b04 	addi	r6,sp,1132
   41430:	00407580 	call	40758 <__sprint_r>
   41434:	103e681e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41438:	da011d17 	ldw	r8,1140(sp)
   4143c:	da400404 	addi	r9,sp,16
   41440:	8080004c 	andi	r2,r16,1
   41444:	103fb926 	beq	r2,zero,4132c <___vfprintf_internal_r+0xba0>
   41448:	d8c11c17 	ldw	r3,1136(sp)
   4144c:	d9013717 	ldw	r4,1244(sp)
   41450:	00800044 	movi	r2,1
   41454:	48800115 	stw	r2,4(r9)
   41458:	49000015 	stw	r4,0(r9)
   4145c:	4091883a 	add	r8,r8,r2
   41460:	1887883a 	add	r3,r3,r2
   41464:	da011d15 	stw	r8,1140(sp)
   41468:	d8c11c15 	stw	r3,1136(sp)
   4146c:	008001c4 	movi	r2,7
   41470:	10ffad0e 	bge	r2,r3,41328 <___vfprintf_internal_r+0xb9c>
   41474:	d9412917 	ldw	r5,1188(sp)
   41478:	8809883a 	mov	r4,r17
   4147c:	d9811b04 	addi	r6,sp,1132
   41480:	00407580 	call	40758 <__sprint_r>
   41484:	103e541e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41488:	da400404 	addi	r9,sp,16
   4148c:	da011d17 	ldw	r8,1140(sp)
   41490:	003fa606 	br	4132c <___vfprintf_internal_r+0xba0>
   41494:	18803fcc 	andi	r2,r3,255
   41498:	00c00044 	movi	r3,1
   4149c:	10c10126 	beq	r2,r3,418a4 <___vfprintf_internal_r+0x1118>
   414a0:	00c00084 	movi	r3,2
   414a4:	10c0f026 	beq	r2,r3,41868 <___vfprintf_internal_r+0x10dc>
   414a8:	d8c10dc4 	addi	r3,sp,1079
   414ac:	b808d0fa 	srli	r4,r23,3
   414b0:	b00a977a 	slli	r5,r22,29
   414b4:	b02cd0fa 	srli	r22,r22,3
   414b8:	bdc001cc 	andi	r23,r23,7
   414bc:	b8800c04 	addi	r2,r23,48
   414c0:	292eb03a 	or	r23,r5,r4
   414c4:	18800005 	stb	r2,0(r3)
   414c8:	bd88b03a 	or	r4,r23,r22
   414cc:	1827883a 	mov	r19,r3
   414d0:	18ffffc4 	addi	r3,r3,-1
   414d4:	203ff51e 	bne	r4,zero,414ac <___vfprintf_internal_r+0xd20>
   414d8:	8100004c 	andi	r4,r16,1
   414dc:	980b883a 	mov	r5,r19
   414e0:	20000726 	beq	r4,zero,41500 <___vfprintf_internal_r+0xd74>
   414e4:	10803fcc 	andi	r2,r2,255
   414e8:	1080201c 	xori	r2,r2,128
   414ec:	10bfe004 	addi	r2,r2,-128
   414f0:	01000c04 	movi	r4,48
   414f4:	11000226 	beq	r2,r4,41500 <___vfprintf_internal_r+0xd74>
   414f8:	1827883a 	mov	r19,r3
   414fc:	293fffc5 	stb	r4,-1(r5)
   41500:	d8812717 	ldw	r2,1180(sp)
   41504:	14c5c83a 	sub	r2,r2,r19
   41508:	d8812b15 	stw	r2,1196(sp)
   4150c:	003d8406 	br	40b20 <___vfprintf_internal_r+0x394>
   41510:	00801944 	movi	r2,101
   41514:	14807c0e 	bge	r2,r18,41708 <___vfprintf_internal_r+0xf7c>
   41518:	d9013317 	ldw	r4,1228(sp)
   4151c:	d9413417 	ldw	r5,1232(sp)
   41520:	000d883a 	mov	r6,zero
   41524:	000f883a 	mov	r7,zero
   41528:	d8c13b15 	stw	r3,1260(sp)
   4152c:	da013a15 	stw	r8,1256(sp)
   41530:	da413c15 	stw	r9,1264(sp)
   41534:	0048dcc0 	call	48dcc <__eqdf2>
   41538:	d8c13b17 	ldw	r3,1260(sp)
   4153c:	da013a17 	ldw	r8,1256(sp)
   41540:	da413c17 	ldw	r9,1264(sp)
   41544:	1001001e 	bne	r2,zero,41948 <___vfprintf_internal_r+0x11bc>
   41548:	00800174 	movhi	r2,5
   4154c:	10b16604 	addi	r2,r2,-14952
   41550:	48800015 	stw	r2,0(r9)
   41554:	00800044 	movi	r2,1
   41558:	48800115 	stw	r2,4(r9)
   4155c:	4091883a 	add	r8,r8,r2
   41560:	1887883a 	add	r3,r3,r2
   41564:	da011d15 	stw	r8,1140(sp)
   41568:	d8c11c15 	stw	r3,1136(sp)
   4156c:	008001c4 	movi	r2,7
   41570:	10c1dd16 	blt	r2,r3,41ce8 <___vfprintf_internal_r+0x155c>
   41574:	4a400204 	addi	r9,r9,8
   41578:	d8812417 	ldw	r2,1168(sp)
   4157c:	d8c13217 	ldw	r3,1224(sp)
   41580:	10c00216 	blt	r2,r3,4158c <___vfprintf_internal_r+0xe00>
   41584:	8080004c 	andi	r2,r16,1
   41588:	103f6826 	beq	r2,zero,4132c <___vfprintf_internal_r+0xba0>
   4158c:	d8c11c17 	ldw	r3,1136(sp)
   41590:	d9013717 	ldw	r4,1244(sp)
   41594:	00800044 	movi	r2,1
   41598:	48800115 	stw	r2,4(r9)
   4159c:	49000015 	stw	r4,0(r9)
   415a0:	4091883a 	add	r8,r8,r2
   415a4:	1887883a 	add	r3,r3,r2
   415a8:	da011d15 	stw	r8,1140(sp)
   415ac:	d8c11c15 	stw	r3,1136(sp)
   415b0:	008001c4 	movi	r2,7
   415b4:	10c2af16 	blt	r2,r3,42074 <___vfprintf_internal_r+0x18e8>
   415b8:	4a400204 	addi	r9,r9,8
   415bc:	d8813217 	ldw	r2,1224(sp)
   415c0:	14bfffc4 	addi	r18,r2,-1
   415c4:	04bf590e 	bge	zero,r18,4132c <___vfprintf_internal_r+0xba0>
   415c8:	04c00404 	movi	r19,16
   415cc:	d8c11c17 	ldw	r3,1136(sp)
   415d0:	05000174 	movhi	r20,5
   415d4:	a5316a84 	addi	r20,r20,-14934
   415d8:	9c81630e 	bge	r19,r18,41b68 <___vfprintf_internal_r+0x13dc>
   415dc:	058001c4 	movi	r22,7
   415e0:	ddc12917 	ldw	r23,1188(sp)
   415e4:	00000306 	br	415f4 <___vfprintf_internal_r+0xe68>
   415e8:	4a400204 	addi	r9,r9,8
   415ec:	94bffc04 	addi	r18,r18,-16
   415f0:	9c815d0e 	bge	r19,r18,41b68 <___vfprintf_internal_r+0x13dc>
   415f4:	4d000015 	stw	r20,0(r9)
   415f8:	4cc00115 	stw	r19,4(r9)
   415fc:	42000404 	addi	r8,r8,16
   41600:	18c00044 	addi	r3,r3,1
   41604:	da011d15 	stw	r8,1140(sp)
   41608:	d8c11c15 	stw	r3,1136(sp)
   4160c:	b0fff60e 	bge	r22,r3,415e8 <___vfprintf_internal_r+0xe5c>
   41610:	8809883a 	mov	r4,r17
   41614:	b80b883a 	mov	r5,r23
   41618:	d9811b04 	addi	r6,sp,1132
   4161c:	00407580 	call	40758 <__sprint_r>
   41620:	103ded1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41624:	da011d17 	ldw	r8,1140(sp)
   41628:	d8c11c17 	ldw	r3,1136(sp)
   4162c:	da400404 	addi	r9,sp,16
   41630:	003fee06 	br	415ec <___vfprintf_internal_r+0xe60>
   41634:	d8812e17 	ldw	r2,1208(sp)
   41638:	d9012817 	ldw	r4,1184(sp)
   4163c:	112fc83a 	sub	r23,r2,r4
   41640:	05ff000e 	bge	zero,r23,41244 <___vfprintf_internal_r+0xab8>
   41644:	07000404 	movi	fp,16
   41648:	05000174 	movhi	r20,5
   4164c:	a5316a84 	addi	r20,r20,-14934
   41650:	e5c01d0e 	bge	fp,r23,416c8 <___vfprintf_internal_r+0xf3c>
   41654:	dc812a15 	stw	r18,1192(sp)
   41658:	058001c4 	movi	r22,7
   4165c:	a025883a 	mov	r18,r20
   41660:	8029883a 	mov	r20,r16
   41664:	dc012917 	ldw	r16,1188(sp)
   41668:	00000306 	br	41678 <___vfprintf_internal_r+0xeec>
   4166c:	bdfffc04 	addi	r23,r23,-16
   41670:	4a400204 	addi	r9,r9,8
   41674:	e5c0110e 	bge	fp,r23,416bc <___vfprintf_internal_r+0xf30>
   41678:	4c800015 	stw	r18,0(r9)
   4167c:	4f000115 	stw	fp,4(r9)
   41680:	42000404 	addi	r8,r8,16
   41684:	18c00044 	addi	r3,r3,1
   41688:	da011d15 	stw	r8,1140(sp)
   4168c:	d8c11c15 	stw	r3,1136(sp)
   41690:	b0fff60e 	bge	r22,r3,4166c <___vfprintf_internal_r+0xee0>
   41694:	8809883a 	mov	r4,r17
   41698:	800b883a 	mov	r5,r16
   4169c:	d9811b04 	addi	r6,sp,1132
   416a0:	00407580 	call	40758 <__sprint_r>
   416a4:	103dcc1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   416a8:	bdfffc04 	addi	r23,r23,-16
   416ac:	da011d17 	ldw	r8,1140(sp)
   416b0:	d8c11c17 	ldw	r3,1136(sp)
   416b4:	da400404 	addi	r9,sp,16
   416b8:	e5ffef16 	blt	fp,r23,41678 <___vfprintf_internal_r+0xeec>
   416bc:	a021883a 	mov	r16,r20
   416c0:	9029883a 	mov	r20,r18
   416c4:	dc812a17 	ldw	r18,1192(sp)
   416c8:	4d000015 	stw	r20,0(r9)
   416cc:	4dc00115 	stw	r23,4(r9)
   416d0:	45d1883a 	add	r8,r8,r23
   416d4:	18c00044 	addi	r3,r3,1
   416d8:	da011d15 	stw	r8,1140(sp)
   416dc:	d8c11c15 	stw	r3,1136(sp)
   416e0:	008001c4 	movi	r2,7
   416e4:	10c11716 	blt	r2,r3,41b44 <___vfprintf_internal_r+0x13b8>
   416e8:	4a400204 	addi	r9,r9,8
   416ec:	003ed506 	br	41244 <___vfprintf_internal_r+0xab8>
   416f0:	d9412917 	ldw	r5,1188(sp)
   416f4:	8809883a 	mov	r4,r17
   416f8:	d9811b04 	addi	r6,sp,1132
   416fc:	00407580 	call	40758 <__sprint_r>
   41700:	103f4226 	beq	r2,zero,4140c <___vfprintf_internal_r+0xc80>
   41704:	003db406 	br	40dd8 <___vfprintf_internal_r+0x64c>
   41708:	d9013217 	ldw	r4,1224(sp)
   4170c:	00800044 	movi	r2,1
   41710:	4cc00015 	stw	r19,0(r9)
   41714:	1100e10e 	bge	r2,r4,41a9c <___vfprintf_internal_r+0x1310>
   41718:	00800044 	movi	r2,1
   4171c:	48800115 	stw	r2,4(r9)
   41720:	4091883a 	add	r8,r8,r2
   41724:	1887883a 	add	r3,r3,r2
   41728:	da011d15 	stw	r8,1140(sp)
   4172c:	d8c11c15 	stw	r3,1136(sp)
   41730:	008001c4 	movi	r2,7
   41734:	10c0ed16 	blt	r2,r3,41aec <___vfprintf_internal_r+0x1360>
   41738:	4a400204 	addi	r9,r9,8
   4173c:	d8813717 	ldw	r2,1244(sp)
   41740:	48800015 	stw	r2,0(r9)
   41744:	00800044 	movi	r2,1
   41748:	48800115 	stw	r2,4(r9)
   4174c:	4091883a 	add	r8,r8,r2
   41750:	1887883a 	add	r3,r3,r2
   41754:	da011d15 	stw	r8,1140(sp)
   41758:	d8c11c15 	stw	r3,1136(sp)
   4175c:	008001c4 	movi	r2,7
   41760:	10c0eb16 	blt	r2,r3,41b10 <___vfprintf_internal_r+0x1384>
   41764:	4c800204 	addi	r18,r9,8
   41768:	d9013317 	ldw	r4,1228(sp)
   4176c:	d9413417 	ldw	r5,1232(sp)
   41770:	000d883a 	mov	r6,zero
   41774:	000f883a 	mov	r7,zero
   41778:	d8c13b15 	stw	r3,1260(sp)
   4177c:	da013a15 	stw	r8,1256(sp)
   41780:	0048e280 	call	48e28 <__nedf2>
   41784:	d8c13b17 	ldw	r3,1260(sp)
   41788:	da013a17 	ldw	r8,1256(sp)
   4178c:	1000a626 	beq	r2,zero,41a28 <___vfprintf_internal_r+0x129c>
   41790:	d9013217 	ldw	r4,1224(sp)
   41794:	9cc00044 	addi	r19,r19,1
   41798:	94c00015 	stw	r19,0(r18)
   4179c:	20bfffc4 	addi	r2,r4,-1
   417a0:	90800115 	stw	r2,4(r18)
   417a4:	4091883a 	add	r8,r8,r2
   417a8:	18c00044 	addi	r3,r3,1
   417ac:	da011d15 	stw	r8,1140(sp)
   417b0:	d8c11c15 	stw	r3,1136(sp)
   417b4:	008001c4 	movi	r2,7
   417b8:	10c0c316 	blt	r2,r3,41ac8 <___vfprintf_internal_r+0x133c>
   417bc:	94800204 	addi	r18,r18,8
   417c0:	d9013517 	ldw	r4,1236(sp)
   417c4:	d8811fc4 	addi	r2,sp,1151
   417c8:	90800015 	stw	r2,0(r18)
   417cc:	91000115 	stw	r4,4(r18)
   417d0:	4111883a 	add	r8,r8,r4
   417d4:	18c00044 	addi	r3,r3,1
   417d8:	da011d15 	stw	r8,1140(sp)
   417dc:	d8c11c15 	stw	r3,1136(sp)
   417e0:	008001c4 	movi	r2,7
   417e4:	10ff2316 	blt	r2,r3,41474 <___vfprintf_internal_r+0xce8>
   417e8:	92400204 	addi	r9,r18,8
   417ec:	003ecf06 	br	4132c <___vfprintf_internal_r+0xba0>
   417f0:	d9412917 	ldw	r5,1188(sp)
   417f4:	8809883a 	mov	r4,r17
   417f8:	d9811b04 	addi	r6,sp,1132
   417fc:	00407580 	call	40758 <__sprint_r>
   41800:	103d751e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41804:	da011d17 	ldw	r8,1140(sp)
   41808:	d8c11c17 	ldw	r3,1136(sp)
   4180c:	da400404 	addi	r9,sp,16
   41810:	003eba06 	br	412fc <___vfprintf_internal_r+0xb70>
   41814:	d9412917 	ldw	r5,1188(sp)
   41818:	8809883a 	mov	r4,r17
   4181c:	d9811b04 	addi	r6,sp,1132
   41820:	00407580 	call	40758 <__sprint_r>
   41824:	103d6c1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41828:	da011d17 	ldw	r8,1140(sp)
   4182c:	d8c11c17 	ldw	r3,1136(sp)
   41830:	da400404 	addi	r9,sp,16
   41834:	003e7306 	br	41204 <___vfprintf_internal_r+0xa78>
   41838:	d9412917 	ldw	r5,1188(sp)
   4183c:	8809883a 	mov	r4,r17
   41840:	d9811b04 	addi	r6,sp,1132
   41844:	00407580 	call	40758 <__sprint_r>
   41848:	103d631e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   4184c:	da011d17 	ldw	r8,1140(sp)
   41850:	d8c11c17 	ldw	r3,1136(sp)
   41854:	da400404 	addi	r9,sp,16
   41858:	003e7706 	br	41238 <___vfprintf_internal_r+0xaac>
   4185c:	d8012b15 	stw	zero,1196(sp)
   41860:	dcc10e04 	addi	r19,sp,1080
   41864:	003cae06 	br	40b20 <___vfprintf_internal_r+0x394>
   41868:	d9413617 	ldw	r5,1240(sp)
   4186c:	d8810dc4 	addi	r2,sp,1079
   41870:	b8c003cc 	andi	r3,r23,15
   41874:	b008973a 	slli	r4,r22,28
   41878:	28c7883a 	add	r3,r5,r3
   4187c:	b82ed13a 	srli	r23,r23,4
   41880:	18c00003 	ldbu	r3,0(r3)
   41884:	b02cd13a 	srli	r22,r22,4
   41888:	25eeb03a 	or	r23,r4,r23
   4188c:	10c00005 	stb	r3,0(r2)
   41890:	bd86b03a 	or	r3,r23,r22
   41894:	1027883a 	mov	r19,r2
   41898:	10bfffc4 	addi	r2,r2,-1
   4189c:	183ff41e 	bne	r3,zero,41870 <___vfprintf_internal_r+0x10e4>
   418a0:	003f1706 	br	41500 <___vfprintf_internal_r+0xd74>
   418a4:	b0025826 	beq	r22,zero,42208 <___vfprintf_internal_r+0x1a7c>
   418a8:	b807883a 	mov	r3,r23
   418ac:	d8810dc4 	addi	r2,sp,1079
   418b0:	882f883a 	mov	r23,r17
   418b4:	04c00244 	movi	r19,9
   418b8:	8023883a 	mov	r17,r16
   418bc:	da412815 	stw	r9,1184(sp)
   418c0:	1821883a 	mov	r16,r3
   418c4:	8009883a 	mov	r4,r16
   418c8:	b00b883a 	mov	r5,r22
   418cc:	01800284 	movi	r6,10
   418d0:	000f883a 	mov	r7,zero
   418d4:	1029883a 	mov	r20,r2
   418d8:	0047fa00 	call	47fa0 <__umoddi3>
   418dc:	10800c04 	addi	r2,r2,48
   418e0:	8009883a 	mov	r4,r16
   418e4:	b00b883a 	mov	r5,r22
   418e8:	a0800005 	stb	r2,0(r20)
   418ec:	01800284 	movi	r6,10
   418f0:	000f883a 	mov	r7,zero
   418f4:	00479d80 	call	479d8 <__udivdi3>
   418f8:	1021883a 	mov	r16,r2
   418fc:	182d883a 	mov	r22,r3
   41900:	a0bfffc4 	addi	r2,r20,-1
   41904:	183fef1e 	bne	r3,zero,418c4 <___vfprintf_internal_r+0x1138>
   41908:	9c3fee36 	bltu	r19,r16,418c4 <___vfprintf_internal_r+0x1138>
   4190c:	da412817 	ldw	r9,1184(sp)
   41910:	8005883a 	mov	r2,r16
   41914:	8821883a 	mov	r16,r17
   41918:	b823883a 	mov	r17,r23
   4191c:	102f883a 	mov	r23,r2
   41920:	d8812717 	ldw	r2,1180(sp)
   41924:	a4ffffc4 	addi	r19,r20,-1
   41928:	bdc00c04 	addi	r23,r23,48
   4192c:	14c5c83a 	sub	r2,r2,r19
   41930:	a5ffffc5 	stb	r23,-1(r20)
   41934:	d8812b15 	stw	r2,1196(sp)
   41938:	003c7906 	br	40b20 <___vfprintf_internal_r+0x394>
   4193c:	00c00044 	movi	r3,1
   41940:	bd84b03a 	or	r2,r23,r22
   41944:	003c6806 	br	40ae8 <___vfprintf_internal_r+0x35c>
   41948:	dc812417 	ldw	r18,1168(sp)
   4194c:	0480ee0e 	bge	zero,r18,41d08 <___vfprintf_internal_r+0x157c>
   41950:	d9013217 	ldw	r4,1224(sp)
   41954:	4cc00015 	stw	r19,0(r9)
   41958:	9100c616 	blt	r18,r4,41c74 <___vfprintf_internal_r+0x14e8>
   4195c:	49000115 	stw	r4,4(r9)
   41960:	4111883a 	add	r8,r8,r4
   41964:	18c00044 	addi	r3,r3,1
   41968:	da011d15 	stw	r8,1140(sp)
   4196c:	d8c11c15 	stw	r3,1136(sp)
   41970:	008001c4 	movi	r2,7
   41974:	10c20916 	blt	r2,r3,4219c <___vfprintf_internal_r+0x1a10>
   41978:	4a400204 	addi	r9,r9,8
   4197c:	d8813217 	ldw	r2,1224(sp)
   41980:	90a5c83a 	sub	r18,r18,r2
   41984:	04beae0e 	bge	zero,r18,41440 <___vfprintf_internal_r+0xcb4>
   41988:	04c00404 	movi	r19,16
   4198c:	d8c11c17 	ldw	r3,1136(sp)
   41990:	05000174 	movhi	r20,5
   41994:	a5316a84 	addi	r20,r20,-14934
   41998:	9c81be0e 	bge	r19,r18,42094 <___vfprintf_internal_r+0x1908>
   4199c:	058001c4 	movi	r22,7
   419a0:	ddc12917 	ldw	r23,1188(sp)
   419a4:	00000306 	br	419b4 <___vfprintf_internal_r+0x1228>
   419a8:	4a400204 	addi	r9,r9,8
   419ac:	94bffc04 	addi	r18,r18,-16
   419b0:	9c81b80e 	bge	r19,r18,42094 <___vfprintf_internal_r+0x1908>
   419b4:	4d000015 	stw	r20,0(r9)
   419b8:	4cc00115 	stw	r19,4(r9)
   419bc:	42000404 	addi	r8,r8,16
   419c0:	18c00044 	addi	r3,r3,1
   419c4:	da011d15 	stw	r8,1140(sp)
   419c8:	d8c11c15 	stw	r3,1136(sp)
   419cc:	b0fff60e 	bge	r22,r3,419a8 <___vfprintf_internal_r+0x121c>
   419d0:	8809883a 	mov	r4,r17
   419d4:	b80b883a 	mov	r5,r23
   419d8:	d9811b04 	addi	r6,sp,1132
   419dc:	00407580 	call	40758 <__sprint_r>
   419e0:	103cfd1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   419e4:	da011d17 	ldw	r8,1140(sp)
   419e8:	d8c11c17 	ldw	r3,1136(sp)
   419ec:	da400404 	addi	r9,sp,16
   419f0:	003fee06 	br	419ac <___vfprintf_internal_r+0x1220>
   419f4:	d9412917 	ldw	r5,1188(sp)
   419f8:	8809883a 	mov	r4,r17
   419fc:	d9811b04 	addi	r6,sp,1132
   41a00:	00407580 	call	40758 <__sprint_r>
   41a04:	103cf41e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41a08:	da011d17 	ldw	r8,1140(sp)
   41a0c:	d8c11c17 	ldw	r3,1136(sp)
   41a10:	da400404 	addi	r9,sp,16
   41a14:	003dee06 	br	411d0 <___vfprintf_internal_r+0xa44>
   41a18:	00c00084 	movi	r3,2
   41a1c:	bd84b03a 	or	r2,r23,r22
   41a20:	d8012585 	stb	zero,1174(sp)
   41a24:	003c3006 	br	40ae8 <___vfprintf_internal_r+0x35c>
   41a28:	d8813217 	ldw	r2,1224(sp)
   41a2c:	14ffffc4 	addi	r19,r2,-1
   41a30:	04ff630e 	bge	zero,r19,417c0 <___vfprintf_internal_r+0x1034>
   41a34:	05800404 	movi	r22,16
   41a38:	05000174 	movhi	r20,5
   41a3c:	a5316a84 	addi	r20,r20,-14934
   41a40:	b4c03c0e 	bge	r22,r19,41b34 <___vfprintf_internal_r+0x13a8>
   41a44:	05c001c4 	movi	r23,7
   41a48:	df012917 	ldw	fp,1188(sp)
   41a4c:	00000306 	br	41a5c <___vfprintf_internal_r+0x12d0>
   41a50:	94800204 	addi	r18,r18,8
   41a54:	9cfffc04 	addi	r19,r19,-16
   41a58:	b4c0360e 	bge	r22,r19,41b34 <___vfprintf_internal_r+0x13a8>
   41a5c:	95000015 	stw	r20,0(r18)
   41a60:	95800115 	stw	r22,4(r18)
   41a64:	42000404 	addi	r8,r8,16
   41a68:	18c00044 	addi	r3,r3,1
   41a6c:	da011d15 	stw	r8,1140(sp)
   41a70:	d8c11c15 	stw	r3,1136(sp)
   41a74:	b8fff60e 	bge	r23,r3,41a50 <___vfprintf_internal_r+0x12c4>
   41a78:	8809883a 	mov	r4,r17
   41a7c:	e00b883a 	mov	r5,fp
   41a80:	d9811b04 	addi	r6,sp,1132
   41a84:	00407580 	call	40758 <__sprint_r>
   41a88:	103cd31e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41a8c:	da011d17 	ldw	r8,1140(sp)
   41a90:	d8c11c17 	ldw	r3,1136(sp)
   41a94:	dc800404 	addi	r18,sp,16
   41a98:	003fee06 	br	41a54 <___vfprintf_internal_r+0x12c8>
   41a9c:	8088703a 	and	r4,r16,r2
   41aa0:	203f1d1e 	bne	r4,zero,41718 <___vfprintf_internal_r+0xf8c>
   41aa4:	48800115 	stw	r2,4(r9)
   41aa8:	42000044 	addi	r8,r8,1
   41aac:	18c00044 	addi	r3,r3,1
   41ab0:	da011d15 	stw	r8,1140(sp)
   41ab4:	d8c11c15 	stw	r3,1136(sp)
   41ab8:	008001c4 	movi	r2,7
   41abc:	10c00216 	blt	r2,r3,41ac8 <___vfprintf_internal_r+0x133c>
   41ac0:	4c800204 	addi	r18,r9,8
   41ac4:	003f3e06 	br	417c0 <___vfprintf_internal_r+0x1034>
   41ac8:	d9412917 	ldw	r5,1188(sp)
   41acc:	8809883a 	mov	r4,r17
   41ad0:	d9811b04 	addi	r6,sp,1132
   41ad4:	00407580 	call	40758 <__sprint_r>
   41ad8:	103cbf1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41adc:	dc800404 	addi	r18,sp,16
   41ae0:	da011d17 	ldw	r8,1140(sp)
   41ae4:	d8c11c17 	ldw	r3,1136(sp)
   41ae8:	003f3506 	br	417c0 <___vfprintf_internal_r+0x1034>
   41aec:	d9412917 	ldw	r5,1188(sp)
   41af0:	8809883a 	mov	r4,r17
   41af4:	d9811b04 	addi	r6,sp,1132
   41af8:	00407580 	call	40758 <__sprint_r>
   41afc:	103cb61e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41b00:	da011d17 	ldw	r8,1140(sp)
   41b04:	d8c11c17 	ldw	r3,1136(sp)
   41b08:	da400404 	addi	r9,sp,16
   41b0c:	003f0b06 	br	4173c <___vfprintf_internal_r+0xfb0>
   41b10:	d9412917 	ldw	r5,1188(sp)
   41b14:	8809883a 	mov	r4,r17
   41b18:	d9811b04 	addi	r6,sp,1132
   41b1c:	00407580 	call	40758 <__sprint_r>
   41b20:	103cad1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41b24:	da011d17 	ldw	r8,1140(sp)
   41b28:	d8c11c17 	ldw	r3,1136(sp)
   41b2c:	dc800404 	addi	r18,sp,16
   41b30:	003f0d06 	br	41768 <___vfprintf_internal_r+0xfdc>
   41b34:	95000015 	stw	r20,0(r18)
   41b38:	94c00115 	stw	r19,4(r18)
   41b3c:	44d1883a 	add	r8,r8,r19
   41b40:	003f1906 	br	417a8 <___vfprintf_internal_r+0x101c>
   41b44:	d9412917 	ldw	r5,1188(sp)
   41b48:	8809883a 	mov	r4,r17
   41b4c:	d9811b04 	addi	r6,sp,1132
   41b50:	00407580 	call	40758 <__sprint_r>
   41b54:	103ca01e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41b58:	da011d17 	ldw	r8,1140(sp)
   41b5c:	d8c11c17 	ldw	r3,1136(sp)
   41b60:	da400404 	addi	r9,sp,16
   41b64:	003db706 	br	41244 <___vfprintf_internal_r+0xab8>
   41b68:	4d000015 	stw	r20,0(r9)
   41b6c:	4c800115 	stw	r18,4(r9)
   41b70:	4491883a 	add	r8,r8,r18
   41b74:	003de706 	br	41314 <___vfprintf_internal_r+0xb88>
   41b78:	8080100c 	andi	r2,r16,64
   41b7c:	10010226 	beq	r2,zero,41f88 <___vfprintf_internal_r+0x17fc>
   41b80:	d8812d17 	ldw	r2,1204(sp)
   41b84:	002d883a 	mov	r22,zero
   41b88:	00c00044 	movi	r3,1
   41b8c:	15c0000b 	ldhu	r23,0(r2)
   41b90:	10800104 	addi	r2,r2,4
   41b94:	d8812d15 	stw	r2,1204(sp)
   41b98:	d8012585 	stb	zero,1174(sp)
   41b9c:	b805883a 	mov	r2,r23
   41ba0:	003bd106 	br	40ae8 <___vfprintf_internal_r+0x35c>
   41ba4:	d9012d17 	ldw	r4,1204(sp)
   41ba8:	25800017 	ldw	r22,0(r4)
   41bac:	25000117 	ldw	r20,4(r4)
   41bb0:	21000204 	addi	r4,r4,8
   41bb4:	d9012d15 	stw	r4,1204(sp)
   41bb8:	dd813315 	stw	r22,1228(sp)
   41bbc:	dd013415 	stw	r20,1232(sp)
   41bc0:	003d2b06 	br	41070 <___vfprintf_internal_r+0x8e4>
   41bc4:	8080100c 	andi	r2,r16,64
   41bc8:	1000fe26 	beq	r2,zero,41fc4 <___vfprintf_internal_r+0x1838>
   41bcc:	d9012d17 	ldw	r4,1204(sp)
   41bd0:	002d883a 	mov	r22,zero
   41bd4:	0007883a 	mov	r3,zero
   41bd8:	25c0000b 	ldhu	r23,0(r4)
   41bdc:	21000104 	addi	r4,r4,4
   41be0:	d9012d15 	stw	r4,1204(sp)
   41be4:	b805883a 	mov	r2,r23
   41be8:	d8012585 	stb	zero,1174(sp)
   41bec:	003bbe06 	br	40ae8 <___vfprintf_internal_r+0x35c>
   41bf0:	8080100c 	andi	r2,r16,64
   41bf4:	1000ed26 	beq	r2,zero,41fac <___vfprintf_internal_r+0x1820>
   41bf8:	d9012d17 	ldw	r4,1204(sp)
   41bfc:	002d883a 	mov	r22,zero
   41c00:	25c0000b 	ldhu	r23,0(r4)
   41c04:	21000104 	addi	r4,r4,4
   41c08:	d9012d15 	stw	r4,1204(sp)
   41c0c:	003cd206 	br	40f58 <___vfprintf_internal_r+0x7cc>
   41c10:	00c00084 	movi	r3,2
   41c14:	d8012585 	stb	zero,1174(sp)
   41c18:	003bb306 	br	40ae8 <___vfprintf_internal_r+0x35c>
   41c1c:	8080040c 	andi	r2,r16,16
   41c20:	1000f11e 	bne	r2,zero,41fe8 <___vfprintf_internal_r+0x185c>
   41c24:	8400100c 	andi	r16,r16,64
   41c28:	80015526 	beq	r16,zero,42180 <___vfprintf_internal_r+0x19f4>
   41c2c:	da012d17 	ldw	r8,1204(sp)
   41c30:	d8c12c17 	ldw	r3,1200(sp)
   41c34:	40800017 	ldw	r2,0(r8)
   41c38:	42000104 	addi	r8,r8,4
   41c3c:	da012d15 	stw	r8,1204(sp)
   41c40:	10c0000d 	sth	r3,0(r2)
   41c44:	003b0706 	br	40864 <___vfprintf_internal_r+0xd8>
   41c48:	8080100c 	andi	r2,r16,64
   41c4c:	1000c726 	beq	r2,zero,41f6c <___vfprintf_internal_r+0x17e0>
   41c50:	da012d17 	ldw	r8,1204(sp)
   41c54:	45c0000f 	ldh	r23,0(r8)
   41c58:	42000104 	addi	r8,r8,4
   41c5c:	da012d15 	stw	r8,1204(sp)
   41c60:	b82dd7fa 	srai	r22,r23,31
   41c64:	b005883a 	mov	r2,r22
   41c68:	003c1006 	br	40cac <___vfprintf_internal_r+0x520>
   41c6c:	ac800007 	ldb	r18,0(r21)
   41c70:	003b2406 	br	40904 <___vfprintf_internal_r+0x178>
   41c74:	4c800115 	stw	r18,4(r9)
   41c78:	9211883a 	add	r8,r18,r8
   41c7c:	18c00044 	addi	r3,r3,1
   41c80:	da011d15 	stw	r8,1140(sp)
   41c84:	d8c11c15 	stw	r3,1136(sp)
   41c88:	008001c4 	movi	r2,7
   41c8c:	10c15416 	blt	r2,r3,421e0 <___vfprintf_internal_r+0x1a54>
   41c90:	4a400204 	addi	r9,r9,8
   41c94:	d8813717 	ldw	r2,1244(sp)
   41c98:	9ca7883a 	add	r19,r19,r18
   41c9c:	48800015 	stw	r2,0(r9)
   41ca0:	00800044 	movi	r2,1
   41ca4:	48800115 	stw	r2,4(r9)
   41ca8:	4091883a 	add	r8,r8,r2
   41cac:	1887883a 	add	r3,r3,r2
   41cb0:	da011d15 	stw	r8,1140(sp)
   41cb4:	d8c11c15 	stw	r3,1136(sp)
   41cb8:	008001c4 	movi	r2,7
   41cbc:	10c14016 	blt	r2,r3,421c0 <___vfprintf_internal_r+0x1a34>
   41cc0:	4a400204 	addi	r9,r9,8
   41cc4:	d9013217 	ldw	r4,1224(sp)
   41cc8:	da011d17 	ldw	r8,1140(sp)
   41ccc:	d8c11c17 	ldw	r3,1136(sp)
   41cd0:	24a5c83a 	sub	r18,r4,r18
   41cd4:	4cc00015 	stw	r19,0(r9)
   41cd8:	003fa406 	br	41b6c <___vfprintf_internal_r+0x13e0>
   41cdc:	04c00174 	movhi	r19,5
   41ce0:	9cf15704 	addi	r19,r19,-15012
   41ce4:	003cf406 	br	410b8 <___vfprintf_internal_r+0x92c>
   41ce8:	d9412917 	ldw	r5,1188(sp)
   41cec:	8809883a 	mov	r4,r17
   41cf0:	d9811b04 	addi	r6,sp,1132
   41cf4:	00407580 	call	40758 <__sprint_r>
   41cf8:	103c371e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41cfc:	da011d17 	ldw	r8,1140(sp)
   41d00:	da400404 	addi	r9,sp,16
   41d04:	003e1c06 	br	41578 <___vfprintf_internal_r+0xdec>
   41d08:	00800174 	movhi	r2,5
   41d0c:	10b16604 	addi	r2,r2,-14952
   41d10:	48800015 	stw	r2,0(r9)
   41d14:	00800044 	movi	r2,1
   41d18:	48800115 	stw	r2,4(r9)
   41d1c:	4091883a 	add	r8,r8,r2
   41d20:	1887883a 	add	r3,r3,r2
   41d24:	da011d15 	stw	r8,1140(sp)
   41d28:	d8c11c15 	stw	r3,1136(sp)
   41d2c:	008001c4 	movi	r2,7
   41d30:	10c0c316 	blt	r2,r3,42040 <___vfprintf_internal_r+0x18b4>
   41d34:	4a400204 	addi	r9,r9,8
   41d38:	9000041e 	bne	r18,zero,41d4c <___vfprintf_internal_r+0x15c0>
   41d3c:	d8c13217 	ldw	r3,1224(sp)
   41d40:	1800021e 	bne	r3,zero,41d4c <___vfprintf_internal_r+0x15c0>
   41d44:	8080004c 	andi	r2,r16,1
   41d48:	103d7826 	beq	r2,zero,4132c <___vfprintf_internal_r+0xba0>
   41d4c:	d8c11c17 	ldw	r3,1136(sp)
   41d50:	d9013717 	ldw	r4,1244(sp)
   41d54:	00800044 	movi	r2,1
   41d58:	48800115 	stw	r2,4(r9)
   41d5c:	49000015 	stw	r4,0(r9)
   41d60:	4091883a 	add	r8,r8,r2
   41d64:	1887883a 	add	r3,r3,r2
   41d68:	da011d15 	stw	r8,1140(sp)
   41d6c:	d8c11c15 	stw	r3,1136(sp)
   41d70:	008001c4 	movi	r2,7
   41d74:	10c12e16 	blt	r2,r3,42230 <___vfprintf_internal_r+0x1aa4>
   41d78:	4a400204 	addi	r9,r9,8
   41d7c:	04a5c83a 	sub	r18,zero,r18
   41d80:	0480de0e 	bge	zero,r18,420fc <___vfprintf_internal_r+0x1970>
   41d84:	05800404 	movi	r22,16
   41d88:	05000174 	movhi	r20,5
   41d8c:	a5316a84 	addi	r20,r20,-14934
   41d90:	b480e20e 	bge	r22,r18,4211c <___vfprintf_internal_r+0x1990>
   41d94:	05c001c4 	movi	r23,7
   41d98:	df012917 	ldw	fp,1188(sp)
   41d9c:	00000306 	br	41dac <___vfprintf_internal_r+0x1620>
   41da0:	4a400204 	addi	r9,r9,8
   41da4:	94bffc04 	addi	r18,r18,-16
   41da8:	b480dc0e 	bge	r22,r18,4211c <___vfprintf_internal_r+0x1990>
   41dac:	4d000015 	stw	r20,0(r9)
   41db0:	4d800115 	stw	r22,4(r9)
   41db4:	42000404 	addi	r8,r8,16
   41db8:	18c00044 	addi	r3,r3,1
   41dbc:	da011d15 	stw	r8,1140(sp)
   41dc0:	d8c11c15 	stw	r3,1136(sp)
   41dc4:	b8fff60e 	bge	r23,r3,41da0 <___vfprintf_internal_r+0x1614>
   41dc8:	8809883a 	mov	r4,r17
   41dcc:	e00b883a 	mov	r5,fp
   41dd0:	d9811b04 	addi	r6,sp,1132
   41dd4:	00407580 	call	40758 <__sprint_r>
   41dd8:	103bff1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   41ddc:	da011d17 	ldw	r8,1140(sp)
   41de0:	d8c11c17 	ldw	r3,1136(sp)
   41de4:	da400404 	addi	r9,sp,16
   41de8:	003fee06 	br	41da4 <___vfprintf_internal_r+0x1618>
   41dec:	da413c15 	stw	r9,1264(sp)
   41df0:	00472580 	call	47258 <__isnand>
   41df4:	da413c17 	ldw	r9,1264(sp)
   41df8:	1000851e 	bne	r2,zero,42010 <___vfprintf_internal_r+0x1884>
   41dfc:	00bfffc4 	movi	r2,-1
   41e00:	e0817626 	beq	fp,r2,423dc <___vfprintf_internal_r+0x1c50>
   41e04:	008019c4 	movi	r2,103
   41e08:	90817126 	beq	r18,r2,423d0 <___vfprintf_internal_r+0x1c44>
   41e0c:	008011c4 	movi	r2,71
   41e10:	90816f26 	beq	r18,r2,423d0 <___vfprintf_internal_r+0x1c44>
   41e14:	82004014 	ori	r8,r16,256
   41e18:	da012a15 	stw	r8,1192(sp)
   41e1c:	a0017116 	blt	r20,zero,423e4 <___vfprintf_internal_r+0x1c58>
   41e20:	d8012f05 	stb	zero,1212(sp)
   41e24:	00801984 	movi	r2,102
   41e28:	90811226 	beq	r18,r2,42274 <___vfprintf_internal_r+0x1ae8>
   41e2c:	00801184 	movi	r2,70
   41e30:	90811026 	beq	r18,r2,42274 <___vfprintf_internal_r+0x1ae8>
   41e34:	00801944 	movi	r2,101
   41e38:	90819b26 	beq	r18,r2,424a8 <___vfprintf_internal_r+0x1d1c>
   41e3c:	00801144 	movi	r2,69
   41e40:	90819926 	beq	r18,r2,424a8 <___vfprintf_internal_r+0x1d1c>
   41e44:	e02f883a 	mov	r23,fp
   41e48:	d8812404 	addi	r2,sp,1168
   41e4c:	d8800115 	stw	r2,4(sp)
   41e50:	d8812304 	addi	r2,sp,1164
   41e54:	d8800215 	stw	r2,8(sp)
   41e58:	d8812204 	addi	r2,sp,1160
   41e5c:	ddc00015 	stw	r23,0(sp)
   41e60:	d8800315 	stw	r2,12(sp)
   41e64:	8809883a 	mov	r4,r17
   41e68:	b00b883a 	mov	r5,r22
   41e6c:	a00d883a 	mov	r6,r20
   41e70:	01c00084 	movi	r7,2
   41e74:	da413c15 	stw	r9,1264(sp)
   41e78:	00429240 	call	42924 <_dtoa_r>
   41e7c:	1027883a 	mov	r19,r2
   41e80:	008019c4 	movi	r2,103
   41e84:	da413c17 	ldw	r9,1264(sp)
   41e88:	90818c1e 	bne	r18,r2,424bc <___vfprintf_internal_r+0x1d30>
   41e8c:	8080004c 	andi	r2,r16,1
   41e90:	10017926 	beq	r2,zero,42478 <___vfprintf_internal_r+0x1cec>
   41e94:	00801184 	movi	r2,70
   41e98:	9dc7883a 	add	r3,r19,r23
   41e9c:	90810626 	beq	r18,r2,422b8 <___vfprintf_internal_r+0x1b2c>
   41ea0:	b009883a 	mov	r4,r22
   41ea4:	a00b883a 	mov	r5,r20
   41ea8:	000d883a 	mov	r6,zero
   41eac:	000f883a 	mov	r7,zero
   41eb0:	d8c13b15 	stw	r3,1260(sp)
   41eb4:	da413c15 	stw	r9,1264(sp)
   41eb8:	0048dcc0 	call	48dcc <__eqdf2>
   41ebc:	d8c13b17 	ldw	r3,1260(sp)
   41ec0:	da413c17 	ldw	r9,1264(sp)
   41ec4:	10000726 	beq	r2,zero,41ee4 <___vfprintf_internal_r+0x1758>
   41ec8:	d8812217 	ldw	r2,1160(sp)
   41ecc:	10c1962e 	bgeu	r2,r3,42528 <___vfprintf_internal_r+0x1d9c>
   41ed0:	01000c04 	movi	r4,48
   41ed4:	11000005 	stb	r4,0(r2)
   41ed8:	10800044 	addi	r2,r2,1
   41edc:	d8812215 	stw	r2,1160(sp)
   41ee0:	10fffc1e 	bne	r2,r3,41ed4 <___vfprintf_internal_r+0x1748>
   41ee4:	1cc7c83a 	sub	r3,r3,r19
   41ee8:	d8c13215 	stw	r3,1224(sp)
   41eec:	008019c4 	movi	r2,103
   41ef0:	90810626 	beq	r18,r2,4230c <___vfprintf_internal_r+0x1b80>
   41ef4:	008011c4 	movi	r2,71
   41ef8:	90810426 	beq	r18,r2,4230c <___vfprintf_internal_r+0x1b80>
   41efc:	00801984 	movi	r2,102
   41f00:	90819a1e 	bne	r18,r2,4256c <___vfprintf_internal_r+0x1de0>
   41f04:	d8812417 	ldw	r2,1168(sp)
   41f08:	d8812b15 	stw	r2,1196(sp)
   41f0c:	0081880e 	bge	zero,r2,42530 <___vfprintf_internal_r+0x1da4>
   41f10:	e000021e 	bne	fp,zero,41f1c <___vfprintf_internal_r+0x1790>
   41f14:	8400004c 	andi	r16,r16,1
   41f18:	80000426 	beq	r16,zero,41f2c <___vfprintf_internal_r+0x17a0>
   41f1c:	d8812b17 	ldw	r2,1196(sp)
   41f20:	e2000044 	addi	r8,fp,1
   41f24:	1205883a 	add	r2,r2,r8
   41f28:	d8812b15 	stw	r2,1196(sp)
   41f2c:	d8812815 	stw	r2,1184(sp)
   41f30:	10011716 	blt	r2,zero,42390 <___vfprintf_internal_r+0x1c04>
   41f34:	ddc12f07 	ldb	r23,1212(sp)
   41f38:	b800ca26 	beq	r23,zero,42264 <___vfprintf_internal_r+0x1ad8>
   41f3c:	00800b44 	movi	r2,45
   41f40:	d8812585 	stb	r2,1174(sp)
   41f44:	dc012a17 	ldw	r16,1192(sp)
   41f48:	d8013115 	stw	zero,1220(sp)
   41f4c:	003afe06 	br	40b48 <___vfprintf_internal_r+0x3bc>
   41f50:	d8812b17 	ldw	r2,1196(sp)
   41f54:	d8812815 	stw	r2,1184(sp)
   41f58:	10005e16 	blt	r2,zero,420d4 <___vfprintf_internal_r+0x1948>
   41f5c:	d8812583 	ldbu	r2,1174(sp)
   41f60:	ddc12d15 	stw	r23,1204(sp)
   41f64:	d8013115 	stw	zero,1220(sp)
   41f68:	003af306 	br	40b38 <___vfprintf_internal_r+0x3ac>
   41f6c:	d8812d17 	ldw	r2,1204(sp)
   41f70:	15c00017 	ldw	r23,0(r2)
   41f74:	10800104 	addi	r2,r2,4
   41f78:	d8812d15 	stw	r2,1204(sp)
   41f7c:	b82dd7fa 	srai	r22,r23,31
   41f80:	b005883a 	mov	r2,r22
   41f84:	003b4906 	br	40cac <___vfprintf_internal_r+0x520>
   41f88:	d8c12d17 	ldw	r3,1204(sp)
   41f8c:	002d883a 	mov	r22,zero
   41f90:	1dc00017 	ldw	r23,0(r3)
   41f94:	18c00104 	addi	r3,r3,4
   41f98:	d8c12d15 	stw	r3,1204(sp)
   41f9c:	b805883a 	mov	r2,r23
   41fa0:	00c00044 	movi	r3,1
   41fa4:	d8012585 	stb	zero,1174(sp)
   41fa8:	003acf06 	br	40ae8 <___vfprintf_internal_r+0x35c>
   41fac:	da012d17 	ldw	r8,1204(sp)
   41fb0:	002d883a 	mov	r22,zero
   41fb4:	45c00017 	ldw	r23,0(r8)
   41fb8:	42000104 	addi	r8,r8,4
   41fbc:	da012d15 	stw	r8,1204(sp)
   41fc0:	003be506 	br	40f58 <___vfprintf_internal_r+0x7cc>
   41fc4:	da012d17 	ldw	r8,1204(sp)
   41fc8:	002d883a 	mov	r22,zero
   41fcc:	0007883a 	mov	r3,zero
   41fd0:	45c00017 	ldw	r23,0(r8)
   41fd4:	42000104 	addi	r8,r8,4
   41fd8:	da012d15 	stw	r8,1204(sp)
   41fdc:	b805883a 	mov	r2,r23
   41fe0:	d8012585 	stb	zero,1174(sp)
   41fe4:	003ac006 	br	40ae8 <___vfprintf_internal_r+0x35c>
   41fe8:	d8c12d17 	ldw	r3,1204(sp)
   41fec:	d9012c17 	ldw	r4,1200(sp)
   41ff0:	18800017 	ldw	r2,0(r3)
   41ff4:	18c00104 	addi	r3,r3,4
   41ff8:	d8c12d15 	stw	r3,1204(sp)
   41ffc:	11000015 	stw	r4,0(r2)
   42000:	003a1806 	br	40864 <___vfprintf_internal_r+0xd8>
   42004:	073fffc4 	movi	fp,-1
   42008:	202b883a 	mov	r21,r4
   4200c:	003a3e06 	br	40908 <___vfprintf_internal_r+0x17c>
   42010:	008011c4 	movi	r2,71
   42014:	14809016 	blt	r2,r18,42258 <___vfprintf_internal_r+0x1acc>
   42018:	04c00174 	movhi	r19,5
   4201c:	9cf15804 	addi	r19,r19,-15008
   42020:	00c000c4 	movi	r3,3
   42024:	00bfdfc4 	movi	r2,-129
   42028:	80a0703a 	and	r16,r16,r2
   4202c:	d8c12815 	stw	r3,1184(sp)
   42030:	d8812583 	ldbu	r2,1174(sp)
   42034:	d8c12b15 	stw	r3,1196(sp)
   42038:	d8013115 	stw	zero,1220(sp)
   4203c:	003abe06 	br	40b38 <___vfprintf_internal_r+0x3ac>
   42040:	d9412917 	ldw	r5,1188(sp)
   42044:	8809883a 	mov	r4,r17
   42048:	d9811b04 	addi	r6,sp,1132
   4204c:	00407580 	call	40758 <__sprint_r>
   42050:	103b611e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   42054:	dc812417 	ldw	r18,1168(sp)
   42058:	da011d17 	ldw	r8,1140(sp)
   4205c:	da400404 	addi	r9,sp,16
   42060:	003f3506 	br	41d38 <___vfprintf_internal_r+0x15ac>
   42064:	ad400044 	addi	r21,r21,1
   42068:	84000814 	ori	r16,r16,32
   4206c:	14800047 	ldb	r18,1(r2)
   42070:	003a2406 	br	40904 <___vfprintf_internal_r+0x178>
   42074:	d9412917 	ldw	r5,1188(sp)
   42078:	8809883a 	mov	r4,r17
   4207c:	d9811b04 	addi	r6,sp,1132
   42080:	00407580 	call	40758 <__sprint_r>
   42084:	103b541e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   42088:	da011d17 	ldw	r8,1140(sp)
   4208c:	da400404 	addi	r9,sp,16
   42090:	003d4a06 	br	415bc <___vfprintf_internal_r+0xe30>
   42094:	4d000015 	stw	r20,0(r9)
   42098:	4c800115 	stw	r18,4(r9)
   4209c:	4491883a 	add	r8,r8,r18
   420a0:	18c00044 	addi	r3,r3,1
   420a4:	da011d15 	stw	r8,1140(sp)
   420a8:	d8c11c15 	stw	r3,1136(sp)
   420ac:	008001c4 	movi	r2,7
   420b0:	10fcdc16 	blt	r2,r3,41424 <___vfprintf_internal_r+0xc98>
   420b4:	4a400204 	addi	r9,r9,8
   420b8:	003ce106 	br	41440 <___vfprintf_internal_r+0xcb4>
   420bc:	da413c15 	stw	r9,1264(sp)
   420c0:	00474cc0 	call	474cc <strlen>
   420c4:	d8812b15 	stw	r2,1196(sp)
   420c8:	d8812815 	stw	r2,1184(sp)
   420cc:	da413c17 	ldw	r9,1264(sp)
   420d0:	103fa20e 	bge	r2,zero,41f5c <___vfprintf_internal_r+0x17d0>
   420d4:	d8012815 	stw	zero,1184(sp)
   420d8:	003fa006 	br	41f5c <___vfprintf_internal_r+0x17d0>
   420dc:	d9412917 	ldw	r5,1188(sp)
   420e0:	8809883a 	mov	r4,r17
   420e4:	d9811b04 	addi	r6,sp,1132
   420e8:	00407580 	call	40758 <__sprint_r>
   420ec:	103b3a1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   420f0:	da011d17 	ldw	r8,1140(sp)
   420f4:	d8c11c17 	ldw	r3,1136(sp)
   420f8:	da400404 	addi	r9,sp,16
   420fc:	d8813217 	ldw	r2,1224(sp)
   42100:	4cc00015 	stw	r19,0(r9)
   42104:	48800115 	stw	r2,4(r9)
   42108:	4091883a 	add	r8,r8,r2
   4210c:	003c8106 	br	41314 <___vfprintf_internal_r+0xb88>
   42110:	00800b44 	movi	r2,45
   42114:	d8812585 	stb	r2,1174(sp)
   42118:	003be306 	br	410a8 <___vfprintf_internal_r+0x91c>
   4211c:	4d000015 	stw	r20,0(r9)
   42120:	4c800115 	stw	r18,4(r9)
   42124:	4491883a 	add	r8,r8,r18
   42128:	18c00044 	addi	r3,r3,1
   4212c:	da011d15 	stw	r8,1140(sp)
   42130:	d8c11c15 	stw	r3,1136(sp)
   42134:	008001c4 	movi	r2,7
   42138:	10ffe816 	blt	r2,r3,420dc <___vfprintf_internal_r+0x1950>
   4213c:	4a400204 	addi	r9,r9,8
   42140:	003fee06 	br	420fc <___vfprintf_internal_r+0x1970>
   42144:	df012b15 	stw	fp,1196(sp)
   42148:	00800184 	movi	r2,6
   4214c:	1700072e 	bgeu	r2,fp,4216c <___vfprintf_internal_r+0x19e0>
   42150:	d8812b15 	stw	r2,1196(sp)
   42154:	d8812815 	stw	r2,1184(sp)
   42158:	ddc12d15 	stw	r23,1204(sp)
   4215c:	04c00174 	movhi	r19,5
   42160:	9cf16404 	addi	r19,r19,-14960
   42164:	d8013115 	stw	zero,1220(sp)
   42168:	003a7a06 	br	40b54 <___vfprintf_internal_r+0x3c8>
   4216c:	d8812b17 	ldw	r2,1196(sp)
   42170:	d8812815 	stw	r2,1184(sp)
   42174:	103ff80e 	bge	r2,zero,42158 <___vfprintf_internal_r+0x19cc>
   42178:	d8012815 	stw	zero,1184(sp)
   4217c:	003ff606 	br	42158 <___vfprintf_internal_r+0x19cc>
   42180:	d9012d17 	ldw	r4,1204(sp)
   42184:	da012c17 	ldw	r8,1200(sp)
   42188:	20800017 	ldw	r2,0(r4)
   4218c:	21000104 	addi	r4,r4,4
   42190:	d9012d15 	stw	r4,1204(sp)
   42194:	12000015 	stw	r8,0(r2)
   42198:	0039b206 	br	40864 <___vfprintf_internal_r+0xd8>
   4219c:	d9412917 	ldw	r5,1188(sp)
   421a0:	8809883a 	mov	r4,r17
   421a4:	d9811b04 	addi	r6,sp,1132
   421a8:	00407580 	call	40758 <__sprint_r>
   421ac:	103b0a1e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   421b0:	dc812417 	ldw	r18,1168(sp)
   421b4:	da011d17 	ldw	r8,1140(sp)
   421b8:	da400404 	addi	r9,sp,16
   421bc:	003def06 	br	4197c <___vfprintf_internal_r+0x11f0>
   421c0:	d9412917 	ldw	r5,1188(sp)
   421c4:	8809883a 	mov	r4,r17
   421c8:	d9811b04 	addi	r6,sp,1132
   421cc:	00407580 	call	40758 <__sprint_r>
   421d0:	103b011e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   421d4:	dc812417 	ldw	r18,1168(sp)
   421d8:	da400404 	addi	r9,sp,16
   421dc:	003eb906 	br	41cc4 <___vfprintf_internal_r+0x1538>
   421e0:	d9412917 	ldw	r5,1188(sp)
   421e4:	8809883a 	mov	r4,r17
   421e8:	d9811b04 	addi	r6,sp,1132
   421ec:	00407580 	call	40758 <__sprint_r>
   421f0:	103af91e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   421f4:	dc812417 	ldw	r18,1168(sp)
   421f8:	da011d17 	ldw	r8,1140(sp)
   421fc:	d8c11c17 	ldw	r3,1136(sp)
   42200:	da400404 	addi	r9,sp,16
   42204:	003ea306 	br	41c94 <___vfprintf_internal_r+0x1508>
   42208:	00800244 	movi	r2,9
   4220c:	15fda636 	bltu	r2,r23,418a8 <___vfprintf_internal_r+0x111c>
   42210:	dd010e04 	addi	r20,sp,1080
   42214:	003dc206 	br	41920 <___vfprintf_internal_r+0x1194>
   42218:	df012815 	stw	fp,1184(sp)
   4221c:	d8812583 	ldbu	r2,1174(sp)
   42220:	df012b15 	stw	fp,1196(sp)
   42224:	ddc12d15 	stw	r23,1204(sp)
   42228:	d8013115 	stw	zero,1220(sp)
   4222c:	003a4206 	br	40b38 <___vfprintf_internal_r+0x3ac>
   42230:	d9412917 	ldw	r5,1188(sp)
   42234:	8809883a 	mov	r4,r17
   42238:	d9811b04 	addi	r6,sp,1132
   4223c:	00407580 	call	40758 <__sprint_r>
   42240:	103ae51e 	bne	r2,zero,40dd8 <___vfprintf_internal_r+0x64c>
   42244:	dc812417 	ldw	r18,1168(sp)
   42248:	da011d17 	ldw	r8,1140(sp)
   4224c:	d8c11c17 	ldw	r3,1136(sp)
   42250:	da400404 	addi	r9,sp,16
   42254:	003ec906 	br	41d7c <___vfprintf_internal_r+0x15f0>
   42258:	04c00174 	movhi	r19,5
   4225c:	9cf15904 	addi	r19,r19,-15004
   42260:	003f6f06 	br	42020 <___vfprintf_internal_r+0x1894>
   42264:	d8812583 	ldbu	r2,1174(sp)
   42268:	dc012a17 	ldw	r16,1192(sp)
   4226c:	d8013115 	stw	zero,1220(sp)
   42270:	003a3106 	br	40b38 <___vfprintf_internal_r+0x3ac>
   42274:	d8812404 	addi	r2,sp,1168
   42278:	d8800115 	stw	r2,4(sp)
   4227c:	d8812304 	addi	r2,sp,1164
   42280:	d8800215 	stw	r2,8(sp)
   42284:	d8812204 	addi	r2,sp,1160
   42288:	df000015 	stw	fp,0(sp)
   4228c:	d8800315 	stw	r2,12(sp)
   42290:	8809883a 	mov	r4,r17
   42294:	b00b883a 	mov	r5,r22
   42298:	a00d883a 	mov	r6,r20
   4229c:	01c000c4 	movi	r7,3
   422a0:	da413c15 	stw	r9,1264(sp)
   422a4:	00429240 	call	42924 <_dtoa_r>
   422a8:	da413c17 	ldw	r9,1264(sp)
   422ac:	1027883a 	mov	r19,r2
   422b0:	1707883a 	add	r3,r2,fp
   422b4:	e02f883a 	mov	r23,fp
   422b8:	99000007 	ldb	r4,0(r19)
   422bc:	00800c04 	movi	r2,48
   422c0:	20800326 	beq	r4,r2,422d0 <___vfprintf_internal_r+0x1b44>
   422c4:	da812417 	ldw	r10,1168(sp)
   422c8:	1a87883a 	add	r3,r3,r10
   422cc:	003ef406 	br	41ea0 <___vfprintf_internal_r+0x1714>
   422d0:	b009883a 	mov	r4,r22
   422d4:	a00b883a 	mov	r5,r20
   422d8:	000d883a 	mov	r6,zero
   422dc:	000f883a 	mov	r7,zero
   422e0:	d8c13b15 	stw	r3,1260(sp)
   422e4:	da413c15 	stw	r9,1264(sp)
   422e8:	0048e280 	call	48e28 <__nedf2>
   422ec:	d8c13b17 	ldw	r3,1260(sp)
   422f0:	da413c17 	ldw	r9,1264(sp)
   422f4:	103ff326 	beq	r2,zero,422c4 <___vfprintf_internal_r+0x1b38>
   422f8:	00800044 	movi	r2,1
   422fc:	15d5c83a 	sub	r10,r2,r23
   42300:	da812415 	stw	r10,1168(sp)
   42304:	1a87883a 	add	r3,r3,r10
   42308:	003ee506 	br	41ea0 <___vfprintf_internal_r+0x1714>
   4230c:	d8812417 	ldw	r2,1168(sp)
   42310:	d8812b15 	stw	r2,1196(sp)
   42314:	1029883a 	mov	r20,r2
   42318:	00bfff44 	movi	r2,-3
   4231c:	a0800116 	blt	r20,r2,42324 <___vfprintf_internal_r+0x1b98>
   42320:	e5001d0e 	bge	fp,r20,42398 <___vfprintf_internal_r+0x1c0c>
   42324:	94bfff84 	addi	r18,r18,-2
   42328:	a53fffc4 	addi	r20,r20,-1
   4232c:	dd012415 	stw	r20,1168(sp)
   42330:	dc811fc5 	stb	r18,1151(sp)
   42334:	a0007816 	blt	r20,zero,42518 <___vfprintf_internal_r+0x1d8c>
   42338:	00800ac4 	movi	r2,43
   4233c:	d8812005 	stb	r2,1152(sp)
   42340:	00800244 	movi	r2,9
   42344:	15002b16 	blt	r2,r20,423f4 <___vfprintf_internal_r+0x1c68>
   42348:	00800c04 	movi	r2,48
   4234c:	a5000c04 	addi	r20,r20,48
   42350:	d8812045 	stb	r2,1153(sp)
   42354:	dd012085 	stb	r20,1154(sp)
   42358:	d8c120c4 	addi	r3,sp,1155
   4235c:	d8811fc4 	addi	r2,sp,1151
   42360:	da013217 	ldw	r8,1224(sp)
   42364:	1885c83a 	sub	r2,r3,r2
   42368:	d8813515 	stw	r2,1236(sp)
   4236c:	4085883a 	add	r2,r8,r2
   42370:	d8812b15 	stw	r2,1196(sp)
   42374:	00800044 	movi	r2,1
   42378:	1200610e 	bge	r2,r8,42500 <___vfprintf_internal_r+0x1d74>
   4237c:	d8812b17 	ldw	r2,1196(sp)
   42380:	10800044 	addi	r2,r2,1
   42384:	d8812b15 	stw	r2,1196(sp)
   42388:	d8812815 	stw	r2,1184(sp)
   4238c:	103ee90e 	bge	r2,zero,41f34 <___vfprintf_internal_r+0x17a8>
   42390:	d8012815 	stw	zero,1184(sp)
   42394:	003ee706 	br	41f34 <___vfprintf_internal_r+0x17a8>
   42398:	d8812b17 	ldw	r2,1196(sp)
   4239c:	da013217 	ldw	r8,1224(sp)
   423a0:	12003716 	blt	r2,r8,42480 <___vfprintf_internal_r+0x1cf4>
   423a4:	8400004c 	andi	r16,r16,1
   423a8:	80000326 	beq	r16,zero,423b8 <___vfprintf_internal_r+0x1c2c>
   423ac:	d8812b17 	ldw	r2,1196(sp)
   423b0:	10800044 	addi	r2,r2,1
   423b4:	d8812b15 	stw	r2,1196(sp)
   423b8:	d8812815 	stw	r2,1184(sp)
   423bc:	10003716 	blt	r2,zero,4249c <___vfprintf_internal_r+0x1d10>
   423c0:	048019c4 	movi	r18,103
   423c4:	003edb06 	br	41f34 <___vfprintf_internal_r+0x17a8>
   423c8:	d8012815 	stw	zero,1184(sp)
   423cc:	003b6906 	br	41174 <___vfprintf_internal_r+0x9e8>
   423d0:	e03e901e 	bne	fp,zero,41e14 <___vfprintf_internal_r+0x1688>
   423d4:	07000044 	movi	fp,1
   423d8:	003e8e06 	br	41e14 <___vfprintf_internal_r+0x1688>
   423dc:	07000184 	movi	fp,6
   423e0:	003e8c06 	br	41e14 <___vfprintf_internal_r+0x1688>
   423e4:	00c00b44 	movi	r3,45
   423e8:	a520003c 	xorhi	r20,r20,32768
   423ec:	d8c12f05 	stb	r3,1212(sp)
   423f0:	003e8c06 	br	41e24 <___vfprintf_internal_r+0x1698>
   423f4:	d8c11f84 	addi	r3,sp,1150
   423f8:	102f883a 	mov	r23,r2
   423fc:	4839883a 	mov	fp,r9
   42400:	a009883a 	mov	r4,r20
   42404:	01400284 	movi	r5,10
   42408:	182d883a 	mov	r22,r3
   4240c:	00406840 	call	40684 <__modsi3>
   42410:	10800c04 	addi	r2,r2,48
   42414:	a009883a 	mov	r4,r20
   42418:	b0800005 	stb	r2,0(r22)
   4241c:	01400284 	movi	r5,10
   42420:	00406340 	call	40634 <__divsi3>
   42424:	1029883a 	mov	r20,r2
   42428:	b0ffffc4 	addi	r3,r22,-1
   4242c:	b8bff416 	blt	r23,r2,42400 <___vfprintf_internal_r+0x1c74>
   42430:	11400c04 	addi	r5,r2,48
   42434:	b17fffc5 	stb	r5,-1(r22)
   42438:	d8811fc4 	addi	r2,sp,1151
   4243c:	e013883a 	mov	r9,fp
   42440:	1880482e 	bgeu	r3,r2,42564 <___vfprintf_internal_r+0x1dd8>
   42444:	b007883a 	mov	r3,r22
   42448:	d9012044 	addi	r4,sp,1153
   4244c:	00000206 	br	42458 <___vfprintf_internal_r+0x1ccc>
   42450:	19400003 	ldbu	r5,0(r3)
   42454:	18c00044 	addi	r3,r3,1
   42458:	21400005 	stb	r5,0(r4)
   4245c:	21000044 	addi	r4,r4,1
   42460:	10fffb1e 	bne	r2,r3,42450 <___vfprintf_internal_r+0x1cc4>
   42464:	d8c12004 	addi	r3,sp,1152
   42468:	1d87c83a 	sub	r3,r3,r22
   4246c:	d9012044 	addi	r4,sp,1153
   42470:	20c7883a 	add	r3,r4,r3
   42474:	003fba06 	br	42360 <___vfprintf_internal_r+0x1bd4>
   42478:	d8c12217 	ldw	r3,1160(sp)
   4247c:	003e9906 	br	41ee4 <___vfprintf_internal_r+0x1758>
   42480:	05000b0e 	bge	zero,r20,424b0 <___vfprintf_internal_r+0x1d24>
   42484:	05000044 	movi	r20,1
   42488:	da013217 	ldw	r8,1224(sp)
   4248c:	a229883a 	add	r20,r20,r8
   42490:	dd012b15 	stw	r20,1196(sp)
   42494:	dd012815 	stw	r20,1184(sp)
   42498:	a03fc90e 	bge	r20,zero,423c0 <___vfprintf_internal_r+0x1c34>
   4249c:	d8012815 	stw	zero,1184(sp)
   424a0:	048019c4 	movi	r18,103
   424a4:	003ea306 	br	41f34 <___vfprintf_internal_r+0x17a8>
   424a8:	e5c00044 	addi	r23,fp,1
   424ac:	003e6606 	br	41e48 <___vfprintf_internal_r+0x16bc>
   424b0:	00800084 	movi	r2,2
   424b4:	1529c83a 	sub	r20,r2,r20
   424b8:	003ff306 	br	42488 <___vfprintf_internal_r+0x1cfc>
   424bc:	008011c4 	movi	r2,71
   424c0:	90be7226 	beq	r18,r2,41e8c <___vfprintf_internal_r+0x1700>
   424c4:	003e7306 	br	41e94 <___vfprintf_internal_r+0x1708>
   424c8:	d8812d17 	ldw	r2,1204(sp)
   424cc:	ac800043 	ldbu	r18,1(r21)
   424d0:	202b883a 	mov	r21,r4
   424d4:	17000017 	ldw	fp,0(r2)
   424d8:	10800104 	addi	r2,r2,4
   424dc:	d8812d15 	stw	r2,1204(sp)
   424e0:	e0001b16 	blt	fp,zero,42550 <___vfprintf_internal_r+0x1dc4>
   424e4:	94803fcc 	andi	r18,r18,255
   424e8:	9480201c 	xori	r18,r18,128
   424ec:	94bfe004 	addi	r18,r18,-128
   424f0:	00390406 	br	40904 <___vfprintf_internal_r+0x178>
   424f4:	00bfffc4 	movi	r2,-1
   424f8:	d8812c15 	stw	r2,1200(sp)
   424fc:	003a2506 	br	40d94 <___vfprintf_internal_r+0x608>
   42500:	80a0703a 	and	r16,r16,r2
   42504:	803f9d1e 	bne	r16,zero,4237c <___vfprintf_internal_r+0x1bf0>
   42508:	d8812b17 	ldw	r2,1196(sp)
   4250c:	d8812815 	stw	r2,1184(sp)
   42510:	103e880e 	bge	r2,zero,41f34 <___vfprintf_internal_r+0x17a8>
   42514:	003f9e06 	br	42390 <___vfprintf_internal_r+0x1c04>
   42518:	00800b44 	movi	r2,45
   4251c:	0529c83a 	sub	r20,zero,r20
   42520:	d8812005 	stb	r2,1152(sp)
   42524:	003f8606 	br	42340 <___vfprintf_internal_r+0x1bb4>
   42528:	1007883a 	mov	r3,r2
   4252c:	003e6d06 	br	41ee4 <___vfprintf_internal_r+0x1758>
   42530:	e000021e 	bne	fp,zero,4253c <___vfprintf_internal_r+0x1db0>
   42534:	8400004c 	andi	r16,r16,1
   42538:	80000e26 	beq	r16,zero,42574 <___vfprintf_internal_r+0x1de8>
   4253c:	e7000084 	addi	fp,fp,2
   42540:	df012b15 	stw	fp,1196(sp)
   42544:	df012815 	stw	fp,1184(sp)
   42548:	e03e7a0e 	bge	fp,zero,41f34 <___vfprintf_internal_r+0x17a8>
   4254c:	003f9006 	br	42390 <___vfprintf_internal_r+0x1c04>
   42550:	94803fcc 	andi	r18,r18,255
   42554:	9480201c 	xori	r18,r18,128
   42558:	073fffc4 	movi	fp,-1
   4255c:	94bfe004 	addi	r18,r18,-128
   42560:	0038e806 	br	40904 <___vfprintf_internal_r+0x178>
   42564:	d8c12044 	addi	r3,sp,1153
   42568:	003f7d06 	br	42360 <___vfprintf_internal_r+0x1bd4>
   4256c:	dd012417 	ldw	r20,1168(sp)
   42570:	003f6d06 	br	42328 <___vfprintf_internal_r+0x1b9c>
   42574:	00c00044 	movi	r3,1
   42578:	d8c12815 	stw	r3,1184(sp)
   4257c:	d8c12b15 	stw	r3,1196(sp)
   42580:	003e6c06 	br	41f34 <___vfprintf_internal_r+0x17a8>

00042584 <__vfprintf_internal>:
   42584:	00800174 	movhi	r2,5
   42588:	10b8a504 	addi	r2,r2,-7532
   4258c:	2007883a 	mov	r3,r4
   42590:	11000017 	ldw	r4,0(r2)
   42594:	2805883a 	mov	r2,r5
   42598:	300f883a 	mov	r7,r6
   4259c:	180b883a 	mov	r5,r3
   425a0:	100d883a 	mov	r6,r2
   425a4:	004078c1 	jmpi	4078c <___vfprintf_internal_r>

000425a8 <__swsetup_r>:
   425a8:	00800174 	movhi	r2,5
   425ac:	10b8a504 	addi	r2,r2,-7532
   425b0:	10800017 	ldw	r2,0(r2)
   425b4:	defffd04 	addi	sp,sp,-12
   425b8:	dc400115 	stw	r17,4(sp)
   425bc:	dc000015 	stw	r16,0(sp)
   425c0:	dfc00215 	stw	ra,8(sp)
   425c4:	2023883a 	mov	r17,r4
   425c8:	2821883a 	mov	r16,r5
   425cc:	10000226 	beq	r2,zero,425d8 <__swsetup_r+0x30>
   425d0:	10c00e17 	ldw	r3,56(r2)
   425d4:	18003d26 	beq	r3,zero,426cc <__swsetup_r+0x124>
   425d8:	8080030b 	ldhu	r2,12(r16)
   425dc:	10c0020c 	andi	r3,r2,8
   425e0:	18ffffcc 	andi	r3,r3,65535
   425e4:	18e0001c 	xori	r3,r3,32768
   425e8:	18e00004 	addi	r3,r3,-32768
   425ec:	18001226 	beq	r3,zero,42638 <__swsetup_r+0x90>
   425f0:	80c00417 	ldw	r3,16(r16)
   425f4:	18001f26 	beq	r3,zero,42674 <__swsetup_r+0xcc>
   425f8:	1100004c 	andi	r4,r2,1
   425fc:	2000261e 	bne	r4,zero,42698 <__swsetup_r+0xf0>
   42600:	1080008c 	andi	r2,r2,2
   42604:	10bfffcc 	andi	r2,r2,65535
   42608:	10a0001c 	xori	r2,r2,32768
   4260c:	10a00004 	addi	r2,r2,-32768
   42610:	1000311e 	bne	r2,zero,426d8 <__swsetup_r+0x130>
   42614:	80800517 	ldw	r2,20(r16)
   42618:	80800215 	stw	r2,8(r16)
   4261c:	18002326 	beq	r3,zero,426ac <__swsetup_r+0x104>
   42620:	0005883a 	mov	r2,zero
   42624:	dfc00217 	ldw	ra,8(sp)
   42628:	dc400117 	ldw	r17,4(sp)
   4262c:	dc000017 	ldw	r16,0(sp)
   42630:	dec00304 	addi	sp,sp,12
   42634:	f800283a 	ret
   42638:	10c0040c 	andi	r3,r2,16
   4263c:	18ffffcc 	andi	r3,r3,65535
   42640:	18e0001c 	xori	r3,r3,32768
   42644:	18e00004 	addi	r3,r3,-32768
   42648:	18001e26 	beq	r3,zero,426c4 <__swsetup_r+0x11c>
   4264c:	10c0010c 	andi	r3,r2,4
   42650:	18ffffcc 	andi	r3,r3,65535
   42654:	18e0001c 	xori	r3,r3,32768
   42658:	18e00004 	addi	r3,r3,-32768
   4265c:	1800211e 	bne	r3,zero,426e4 <__swsetup_r+0x13c>
   42660:	80c00417 	ldw	r3,16(r16)
   42664:	11400214 	ori	r5,r2,8
   42668:	8140030d 	sth	r5,12(r16)
   4266c:	2805883a 	mov	r2,r5
   42670:	183fe11e 	bne	r3,zero,425f8 <__swsetup_r+0x50>
   42674:	1140a00c 	andi	r5,r2,640
   42678:	01008004 	movi	r4,512
   4267c:	293fde26 	beq	r5,r4,425f8 <__swsetup_r+0x50>
   42680:	8809883a 	mov	r4,r17
   42684:	800b883a 	mov	r5,r16
   42688:	0044f5c0 	call	44f5c <__smakebuf_r>
   4268c:	8080030b 	ldhu	r2,12(r16)
   42690:	80c00417 	ldw	r3,16(r16)
   42694:	003fd806 	br	425f8 <__swsetup_r+0x50>
   42698:	80800517 	ldw	r2,20(r16)
   4269c:	80000215 	stw	zero,8(r16)
   426a0:	0085c83a 	sub	r2,zero,r2
   426a4:	80800615 	stw	r2,24(r16)
   426a8:	183fdd1e 	bne	r3,zero,42620 <__swsetup_r+0x78>
   426ac:	8080030b 	ldhu	r2,12(r16)
   426b0:	1080200c 	andi	r2,r2,128
   426b4:	10bfffcc 	andi	r2,r2,65535
   426b8:	10a0001c 	xori	r2,r2,32768
   426bc:	10a00004 	addi	r2,r2,-32768
   426c0:	103fd826 	beq	r2,zero,42624 <__swsetup_r+0x7c>
   426c4:	00bfffc4 	movi	r2,-1
   426c8:	003fd606 	br	42624 <__swsetup_r+0x7c>
   426cc:	1009883a 	mov	r4,r2
   426d0:	00441e80 	call	441e8 <__sinit>
   426d4:	003fc006 	br	425d8 <__swsetup_r+0x30>
   426d8:	0005883a 	mov	r2,zero
   426dc:	80800215 	stw	r2,8(r16)
   426e0:	003fce06 	br	4261c <__swsetup_r+0x74>
   426e4:	81400c17 	ldw	r5,48(r16)
   426e8:	28000626 	beq	r5,zero,42704 <__swsetup_r+0x15c>
   426ec:	80c01004 	addi	r3,r16,64
   426f0:	28c00326 	beq	r5,r3,42700 <__swsetup_r+0x158>
   426f4:	8809883a 	mov	r4,r17
   426f8:	004456c0 	call	4456c <_free_r>
   426fc:	8080030b 	ldhu	r2,12(r16)
   42700:	80000c15 	stw	zero,48(r16)
   42704:	80c00417 	ldw	r3,16(r16)
   42708:	013ff6c4 	movi	r4,-37
   4270c:	2084703a 	and	r2,r4,r2
   42710:	80000115 	stw	zero,4(r16)
   42714:	80c00015 	stw	r3,0(r16)
   42718:	003fd206 	br	42664 <__swsetup_r+0xbc>

0004271c <quorem>:
   4271c:	defff704 	addi	sp,sp,-36
   42720:	dc400115 	stw	r17,4(sp)
   42724:	20800417 	ldw	r2,16(r4)
   42728:	2c400417 	ldw	r17,16(r5)
   4272c:	dd800615 	stw	r22,24(sp)
   42730:	dd400515 	stw	r21,20(sp)
   42734:	dfc00815 	stw	ra,32(sp)
   42738:	ddc00715 	stw	r23,28(sp)
   4273c:	dd000415 	stw	r20,16(sp)
   42740:	dcc00315 	stw	r19,12(sp)
   42744:	dc800215 	stw	r18,8(sp)
   42748:	dc000015 	stw	r16,0(sp)
   4274c:	202b883a 	mov	r21,r4
   42750:	282d883a 	mov	r22,r5
   42754:	14407116 	blt	r2,r17,4291c <quorem+0x200>
   42758:	88800104 	addi	r2,r17,4
   4275c:	1085883a 	add	r2,r2,r2
   42760:	1085883a 	add	r2,r2,r2
   42764:	28a7883a 	add	r19,r5,r2
   42768:	2085883a 	add	r2,r4,r2
   4276c:	15c00017 	ldw	r23,0(r2)
   42770:	99400017 	ldw	r5,0(r19)
   42774:	8c7fffc4 	addi	r17,r17,-1
   42778:	b809883a 	mov	r4,r23
   4277c:	29400044 	addi	r5,r5,1
   42780:	00406e00 	call	406e0 <__udivsi3>
   42784:	1025883a 	mov	r18,r2
   42788:	b4000504 	addi	r16,r22,20
   4278c:	ad000504 	addi	r20,r21,20
   42790:	10002d26 	beq	r2,zero,42848 <quorem+0x12c>
   42794:	800d883a 	mov	r6,r16
   42798:	a007883a 	mov	r3,r20
   4279c:	000f883a 	mov	r7,zero
   427a0:	0005883a 	mov	r2,zero
   427a4:	32c00017 	ldw	r11,0(r6)
   427a8:	1a400017 	ldw	r9,0(r3)
   427ac:	31800104 	addi	r6,r6,4
   427b0:	5abfffcc 	andi	r10,r11,65535
   427b4:	5495383a 	mul	r10,r10,r18
   427b8:	5816d43a 	srli	r11,r11,16
   427bc:	4a3fffcc 	andi	r8,r9,65535
   427c0:	3a95883a 	add	r10,r7,r10
   427c4:	500ed43a 	srli	r7,r10,16
   427c8:	5c97383a 	mul	r11,r11,r18
   427cc:	4085883a 	add	r2,r8,r2
   427d0:	52bfffcc 	andi	r10,r10,65535
   427d4:	1291c83a 	sub	r8,r2,r10
   427d8:	4804d43a 	srli	r2,r9,16
   427dc:	3acf883a 	add	r7,r7,r11
   427e0:	4015d43a 	srai	r10,r8,16
   427e4:	393fffcc 	andi	r4,r7,65535
   427e8:	1105c83a 	sub	r2,r2,r4
   427ec:	1285883a 	add	r2,r2,r10
   427f0:	1880008d 	sth	r2,2(r3)
   427f4:	1a00000d 	sth	r8,0(r3)
   427f8:	380ed43a 	srli	r7,r7,16
   427fc:	1005d43a 	srai	r2,r2,16
   42800:	18c00104 	addi	r3,r3,4
   42804:	99bfe72e 	bgeu	r19,r6,427a4 <quorem+0x88>
   42808:	b8000f1e 	bne	r23,zero,42848 <quorem+0x12c>
   4280c:	88800144 	addi	r2,r17,5
   42810:	1085883a 	add	r2,r2,r2
   42814:	1085883a 	add	r2,r2,r2
   42818:	a887883a 	add	r3,r21,r2
   4281c:	18bfff04 	addi	r2,r3,-4
   42820:	a080082e 	bgeu	r20,r2,42844 <quorem+0x128>
   42824:	18ffff17 	ldw	r3,-4(r3)
   42828:	18000326 	beq	r3,zero,42838 <quorem+0x11c>
   4282c:	00000506 	br	42844 <quorem+0x128>
   42830:	10c00017 	ldw	r3,0(r2)
   42834:	1800031e 	bne	r3,zero,42844 <quorem+0x128>
   42838:	10bfff04 	addi	r2,r2,-4
   4283c:	8c7fffc4 	addi	r17,r17,-1
   42840:	a0bffb36 	bltu	r20,r2,42830 <quorem+0x114>
   42844:	ac400415 	stw	r17,16(r21)
   42848:	a809883a 	mov	r4,r21
   4284c:	b00b883a 	mov	r5,r22
   42850:	00465200 	call	46520 <__mcmp>
   42854:	10002516 	blt	r2,zero,428ec <quorem+0x1d0>
   42858:	94800044 	addi	r18,r18,1
   4285c:	a007883a 	mov	r3,r20
   42860:	000b883a 	mov	r5,zero
   42864:	1a000017 	ldw	r8,0(r3)
   42868:	81c00017 	ldw	r7,0(r16)
   4286c:	84000104 	addi	r16,r16,4
   42870:	41bfffcc 	andi	r6,r8,65535
   42874:	38bfffcc 	andi	r2,r7,65535
   42878:	314b883a 	add	r5,r6,r5
   4287c:	288dc83a 	sub	r6,r5,r2
   42880:	380ed43a 	srli	r7,r7,16
   42884:	400ad43a 	srli	r5,r8,16
   42888:	3005d43a 	srai	r2,r6,16
   4288c:	1980000d 	sth	r6,0(r3)
   42890:	29cbc83a 	sub	r5,r5,r7
   42894:	288b883a 	add	r5,r5,r2
   42898:	1940008d 	sth	r5,2(r3)
   4289c:	280bd43a 	srai	r5,r5,16
   428a0:	18c00104 	addi	r3,r3,4
   428a4:	9c3fef2e 	bgeu	r19,r16,42864 <quorem+0x148>
   428a8:	88800144 	addi	r2,r17,5
   428ac:	1085883a 	add	r2,r2,r2
   428b0:	1085883a 	add	r2,r2,r2
   428b4:	a885883a 	add	r2,r21,r2
   428b8:	10c00017 	ldw	r3,0(r2)
   428bc:	18000b1e 	bne	r3,zero,428ec <quorem+0x1d0>
   428c0:	10ffff04 	addi	r3,r2,-4
   428c4:	a0c0082e 	bgeu	r20,r3,428e8 <quorem+0x1cc>
   428c8:	10bfff17 	ldw	r2,-4(r2)
   428cc:	10000326 	beq	r2,zero,428dc <quorem+0x1c0>
   428d0:	00000506 	br	428e8 <quorem+0x1cc>
   428d4:	18800017 	ldw	r2,0(r3)
   428d8:	1000031e 	bne	r2,zero,428e8 <quorem+0x1cc>
   428dc:	18ffff04 	addi	r3,r3,-4
   428e0:	8c7fffc4 	addi	r17,r17,-1
   428e4:	a0fffb36 	bltu	r20,r3,428d4 <quorem+0x1b8>
   428e8:	ac400415 	stw	r17,16(r21)
   428ec:	9005883a 	mov	r2,r18
   428f0:	dfc00817 	ldw	ra,32(sp)
   428f4:	ddc00717 	ldw	r23,28(sp)
   428f8:	dd800617 	ldw	r22,24(sp)
   428fc:	dd400517 	ldw	r21,20(sp)
   42900:	dd000417 	ldw	r20,16(sp)
   42904:	dcc00317 	ldw	r19,12(sp)
   42908:	dc800217 	ldw	r18,8(sp)
   4290c:	dc400117 	ldw	r17,4(sp)
   42910:	dc000017 	ldw	r16,0(sp)
   42914:	dec00904 	addi	sp,sp,36
   42918:	f800283a 	ret
   4291c:	0005883a 	mov	r2,zero
   42920:	003ff306 	br	428f0 <quorem+0x1d4>

00042924 <_dtoa_r>:
   42924:	20801017 	ldw	r2,64(r4)
   42928:	deffdf04 	addi	sp,sp,-132
   4292c:	dcc01a15 	stw	r19,104(sp)
   42930:	dc801915 	stw	r18,100(sp)
   42934:	dc401815 	stw	r17,96(sp)
   42938:	dc001715 	stw	r16,92(sp)
   4293c:	dfc02015 	stw	ra,128(sp)
   42940:	df001f15 	stw	fp,124(sp)
   42944:	ddc01e15 	stw	r23,120(sp)
   42948:	dd801d15 	stw	r22,116(sp)
   4294c:	dd401c15 	stw	r21,112(sp)
   42950:	dd001b15 	stw	r20,108(sp)
   42954:	d9400315 	stw	r5,12(sp)
   42958:	d9c00415 	stw	r7,16(sp)
   4295c:	2021883a 	mov	r16,r4
   42960:	3025883a 	mov	r18,r6
   42964:	dcc02317 	ldw	r19,140(sp)
   42968:	3023883a 	mov	r17,r6
   4296c:	10000826 	beq	r2,zero,42990 <_dtoa_r+0x6c>
   42970:	20c01117 	ldw	r3,68(r4)
   42974:	01800044 	movi	r6,1
   42978:	100b883a 	mov	r5,r2
   4297c:	30cc983a 	sll	r6,r6,r3
   42980:	10c00115 	stw	r3,4(r2)
   42984:	11800215 	stw	r6,8(r2)
   42988:	0045d240 	call	45d24 <_Bfree>
   4298c:	80001015 	stw	zero,64(r16)
   42990:	90002f16 	blt	r18,zero,42a50 <_dtoa_r+0x12c>
   42994:	98000015 	stw	zero,0(r19)
   42998:	90dffc2c 	andhi	r3,r18,32752
   4299c:	009ffc34 	movhi	r2,32752
   429a0:	18801c26 	beq	r3,r2,42a14 <_dtoa_r+0xf0>
   429a4:	d9000317 	ldw	r4,12(sp)
   429a8:	880b883a 	mov	r5,r17
   429ac:	000d883a 	mov	r6,zero
   429b0:	000f883a 	mov	r7,zero
   429b4:	0048dcc0 	call	48dcc <__eqdf2>
   429b8:	10002c1e 	bne	r2,zero,42a6c <_dtoa_r+0x148>
   429bc:	d9002217 	ldw	r4,136(sp)
   429c0:	d9c02417 	ldw	r7,144(sp)
   429c4:	00800044 	movi	r2,1
   429c8:	20800015 	stw	r2,0(r4)
   429cc:	38019426 	beq	r7,zero,43020 <_dtoa_r+0x6fc>
   429d0:	00800174 	movhi	r2,5
   429d4:	10b16644 	addi	r2,r2,-14951
   429d8:	38800015 	stw	r2,0(r7)
   429dc:	15ffffc4 	addi	r23,r2,-1
   429e0:	b805883a 	mov	r2,r23
   429e4:	dfc02017 	ldw	ra,128(sp)
   429e8:	df001f17 	ldw	fp,124(sp)
   429ec:	ddc01e17 	ldw	r23,120(sp)
   429f0:	dd801d17 	ldw	r22,116(sp)
   429f4:	dd401c17 	ldw	r21,112(sp)
   429f8:	dd001b17 	ldw	r20,108(sp)
   429fc:	dcc01a17 	ldw	r19,104(sp)
   42a00:	dc801917 	ldw	r18,100(sp)
   42a04:	dc401817 	ldw	r17,96(sp)
   42a08:	dc001717 	ldw	r16,92(sp)
   42a0c:	dec02104 	addi	sp,sp,132
   42a10:	f800283a 	ret
   42a14:	d8c02217 	ldw	r3,136(sp)
   42a18:	d9000317 	ldw	r4,12(sp)
   42a1c:	0089c3c4 	movi	r2,9999
   42a20:	18800015 	stw	r2,0(r3)
   42a24:	20016c26 	beq	r4,zero,42fd8 <_dtoa_r+0x6b4>
   42a28:	05c00174 	movhi	r23,5
   42a2c:	bdf17204 	addi	r23,r23,-14904
   42a30:	d9c02417 	ldw	r7,144(sp)
   42a34:	383fea26 	beq	r7,zero,429e0 <_dtoa_r+0xbc>
   42a38:	b88000c7 	ldb	r2,3(r23)
   42a3c:	10016d1e 	bne	r2,zero,42ff4 <_dtoa_r+0x6d0>
   42a40:	b88000c4 	addi	r2,r23,3
   42a44:	d8c02417 	ldw	r3,144(sp)
   42a48:	18800015 	stw	r2,0(r3)
   42a4c:	003fe406 	br	429e0 <_dtoa_r+0xbc>
   42a50:	04600034 	movhi	r17,32768
   42a54:	8c7fffc4 	addi	r17,r17,-1
   42a58:	9462703a 	and	r17,r18,r17
   42a5c:	00800044 	movi	r2,1
   42a60:	98800015 	stw	r2,0(r19)
   42a64:	8825883a 	mov	r18,r17
   42a68:	003fcb06 	br	42998 <_dtoa_r+0x74>
   42a6c:	d9400317 	ldw	r5,12(sp)
   42a70:	9028d53a 	srli	r20,r18,20
   42a74:	d8800204 	addi	r2,sp,8
   42a78:	d8800015 	stw	r2,0(sp)
   42a7c:	8009883a 	mov	r4,r16
   42a80:	880d883a 	mov	r6,r17
   42a84:	d9c00104 	addi	r7,sp,4
   42a88:	00468c80 	call	468c8 <__d2b>
   42a8c:	a501ffcc 	andi	r20,r20,2047
   42a90:	1039883a 	mov	fp,r2
   42a94:	a001591e 	bne	r20,zero,42ffc <_dtoa_r+0x6d8>
   42a98:	dd400217 	ldw	r21,8(sp)
   42a9c:	dd000117 	ldw	r20,4(sp)
   42aa0:	00befbc4 	movi	r2,-1041
   42aa4:	ad29883a 	add	r20,r21,r20
   42aa8:	a082d216 	blt	r20,r2,435f4 <_dtoa_r+0xcd0>
   42aac:	d8c00317 	ldw	r3,12(sp)
   42ab0:	013f0384 	movi	r4,-1010
   42ab4:	2509c83a 	sub	r4,r4,r20
   42ab8:	a0810484 	addi	r2,r20,1042
   42abc:	9124983a 	sll	r18,r18,r4
   42ac0:	1884d83a 	srl	r2,r3,r2
   42ac4:	9088b03a 	or	r4,r18,r2
   42ac8:	00491500 	call	49150 <__floatunsidf>
   42acc:	1009883a 	mov	r4,r2
   42ad0:	017f8434 	movhi	r5,65040
   42ad4:	00800044 	movi	r2,1
   42ad8:	194b883a 	add	r5,r3,r5
   42adc:	a53fffc4 	addi	r20,r20,-1
   42ae0:	d8800f15 	stw	r2,60(sp)
   42ae4:	000d883a 	mov	r6,zero
   42ae8:	01cffe34 	movhi	r7,16376
   42aec:	00488d40 	call	488d4 <__subdf3>
   42af0:	1009883a 	mov	r4,r2
   42af4:	180b883a 	mov	r5,r3
   42af8:	0198dbf4 	movhi	r6,25455
   42afc:	3190d844 	addi	r6,r6,17249
   42b00:	01cff4f4 	movhi	r7,16339
   42b04:	39e1e9c4 	addi	r7,r7,-30809
   42b08:	00489340 	call	48934 <__muldf3>
   42b0c:	180b883a 	mov	r5,r3
   42b10:	01a2d874 	movhi	r6,35681
   42b14:	31b22cc4 	addi	r6,r6,-14157
   42b18:	01cff1f4 	movhi	r7,16327
   42b1c:	39e28a04 	addi	r7,r7,-30168
   42b20:	1009883a 	mov	r4,r2
   42b24:	00488800 	call	48880 <__adddf3>
   42b28:	a009883a 	mov	r4,r20
   42b2c:	1027883a 	mov	r19,r2
   42b30:	1825883a 	mov	r18,r3
   42b34:	0048fa80 	call	48fa8 <__floatsidf>
   42b38:	1009883a 	mov	r4,r2
   42b3c:	180b883a 	mov	r5,r3
   42b40:	019427f4 	movhi	r6,20639
   42b44:	319e7ec4 	addi	r6,r6,31227
   42b48:	01cff4f4 	movhi	r7,16339
   42b4c:	39d104c4 	addi	r7,r7,17427
   42b50:	00489340 	call	48934 <__muldf3>
   42b54:	9809883a 	mov	r4,r19
   42b58:	900b883a 	mov	r5,r18
   42b5c:	100d883a 	mov	r6,r2
   42b60:	180f883a 	mov	r7,r3
   42b64:	00488800 	call	48880 <__adddf3>
   42b68:	1009883a 	mov	r4,r2
   42b6c:	180b883a 	mov	r5,r3
   42b70:	1027883a 	mov	r19,r2
   42b74:	1825883a 	mov	r18,r3
   42b78:	004907c0 	call	4907c <__fixdfsi>
   42b7c:	9809883a 	mov	r4,r19
   42b80:	900b883a 	mov	r5,r18
   42b84:	000d883a 	mov	r6,zero
   42b88:	000f883a 	mov	r7,zero
   42b8c:	d8800615 	stw	r2,24(sp)
   42b90:	0048f4c0 	call	48f4c <__ltdf2>
   42b94:	10027e16 	blt	r2,zero,43590 <_dtoa_r+0xc6c>
   42b98:	d8c00617 	ldw	r3,24(sp)
   42b9c:	00800584 	movi	r2,22
   42ba0:	10c26c36 	bltu	r2,r3,43554 <_dtoa_r+0xc30>
   42ba4:	180490fa 	slli	r2,r3,3
   42ba8:	00c00174 	movhi	r3,5
   42bac:	18f19804 	addi	r3,r3,-14752
   42bb0:	d9800317 	ldw	r6,12(sp)
   42bb4:	1885883a 	add	r2,r3,r2
   42bb8:	11000017 	ldw	r4,0(r2)
   42bbc:	11400117 	ldw	r5,4(r2)
   42bc0:	880f883a 	mov	r7,r17
   42bc4:	0048e840 	call	48e84 <__gtdf2>
   42bc8:	00828f0e 	bge	zero,r2,43608 <_dtoa_r+0xce4>
   42bcc:	d8800617 	ldw	r2,24(sp)
   42bd0:	d8000d15 	stw	zero,52(sp)
   42bd4:	10bfffc4 	addi	r2,r2,-1
   42bd8:	d8800615 	stw	r2,24(sp)
   42bdc:	ad29c83a 	sub	r20,r21,r20
   42be0:	a53fffc4 	addi	r20,r20,-1
   42be4:	a0026616 	blt	r20,zero,43580 <_dtoa_r+0xc5c>
   42be8:	dd000715 	stw	r20,28(sp)
   42bec:	d8000815 	stw	zero,32(sp)
   42bf0:	d8800617 	ldw	r2,24(sp)
   42bf4:	10025a16 	blt	r2,zero,43560 <_dtoa_r+0xc3c>
   42bf8:	d8c00717 	ldw	r3,28(sp)
   42bfc:	d8800b15 	stw	r2,44(sp)
   42c00:	d8000a15 	stw	zero,40(sp)
   42c04:	1887883a 	add	r3,r3,r2
   42c08:	d8c00715 	stw	r3,28(sp)
   42c0c:	d9c00417 	ldw	r7,16(sp)
   42c10:	00800244 	movi	r2,9
   42c14:	11c10536 	bltu	r2,r7,4302c <_dtoa_r+0x708>
   42c18:	00800144 	movi	r2,5
   42c1c:	11c4c60e 	bge	r2,r7,43f38 <_dtoa_r+0x1614>
   42c20:	39ffff04 	addi	r7,r7,-4
   42c24:	d9c00415 	stw	r7,16(sp)
   42c28:	0027883a 	mov	r19,zero
   42c2c:	d9c00417 	ldw	r7,16(sp)
   42c30:	008000c4 	movi	r2,3
   42c34:	3883a226 	beq	r7,r2,43ac0 <_dtoa_r+0x119c>
   42c38:	11c2bc16 	blt	r2,r7,4372c <_dtoa_r+0xe08>
   42c3c:	00800084 	movi	r2,2
   42c40:	3880fb1e 	bne	r7,r2,43030 <_dtoa_r+0x70c>
   42c44:	d8000c15 	stw	zero,48(sp)
   42c48:	d9002117 	ldw	r4,132(sp)
   42c4c:	0103ae0e 	bge	zero,r4,43b08 <_dtoa_r+0x11e4>
   42c50:	2025883a 	mov	r18,r4
   42c54:	d9000e15 	stw	r4,56(sp)
   42c58:	d9000915 	stw	r4,36(sp)
   42c5c:	80001115 	stw	zero,68(r16)
   42c60:	008005c4 	movi	r2,23
   42c64:	1484b22e 	bgeu	r2,r18,43f30 <_dtoa_r+0x160c>
   42c68:	00c00044 	movi	r3,1
   42c6c:	00800104 	movi	r2,4
   42c70:	1085883a 	add	r2,r2,r2
   42c74:	11000504 	addi	r4,r2,20
   42c78:	180b883a 	mov	r5,r3
   42c7c:	18c00044 	addi	r3,r3,1
   42c80:	913ffb2e 	bgeu	r18,r4,42c70 <_dtoa_r+0x34c>
   42c84:	81401115 	stw	r5,68(r16)
   42c88:	8009883a 	mov	r4,r16
   42c8c:	0045c7c0 	call	45c7c <_Balloc>
   42c90:	102f883a 	mov	r23,r2
   42c94:	80801015 	stw	r2,64(r16)
   42c98:	00800384 	movi	r2,14
   42c9c:	1480f036 	bltu	r2,r18,43060 <_dtoa_r+0x73c>
   42ca0:	9800ef26 	beq	r19,zero,43060 <_dtoa_r+0x73c>
   42ca4:	d8800617 	ldw	r2,24(sp)
   42ca8:	00839c0e 	bge	zero,r2,43b1c <_dtoa_r+0x11f8>
   42cac:	d8c00617 	ldw	r3,24(sp)
   42cb0:	108003cc 	andi	r2,r2,15
   42cb4:	100490fa 	slli	r2,r2,3
   42cb8:	182bd13a 	srai	r21,r3,4
   42cbc:	00c00174 	movhi	r3,5
   42cc0:	18f19804 	addi	r3,r3,-14752
   42cc4:	1885883a 	add	r2,r3,r2
   42cc8:	a8c0040c 	andi	r3,r21,16
   42ccc:	12800017 	ldw	r10,0(r2)
   42cd0:	15800117 	ldw	r22,4(r2)
   42cd4:	18038726 	beq	r3,zero,43af4 <_dtoa_r+0x11d0>
   42cd8:	00800174 	movhi	r2,5
   42cdc:	10b18e04 	addi	r2,r2,-14792
   42ce0:	11800817 	ldw	r6,32(r2)
   42ce4:	11c00917 	ldw	r7,36(r2)
   42ce8:	d9000317 	ldw	r4,12(sp)
   42cec:	880b883a 	mov	r5,r17
   42cf0:	da801515 	stw	r10,84(sp)
   42cf4:	0048c180 	call	48c18 <__divdf3>
   42cf8:	da801517 	ldw	r10,84(sp)
   42cfc:	d8801015 	stw	r2,64(sp)
   42d00:	1829883a 	mov	r20,r3
   42d04:	ad4003cc 	andi	r21,r21,15
   42d08:	048000c4 	movi	r18,3
   42d0c:	a8001126 	beq	r21,zero,42d54 <_dtoa_r+0x430>
   42d10:	04c00174 	movhi	r19,5
   42d14:	9cf18e04 	addi	r19,r19,-14792
   42d18:	5005883a 	mov	r2,r10
   42d1c:	b007883a 	mov	r3,r22
   42d20:	a980004c 	andi	r6,r21,1
   42d24:	1009883a 	mov	r4,r2
   42d28:	a82bd07a 	srai	r21,r21,1
   42d2c:	180b883a 	mov	r5,r3
   42d30:	30000426 	beq	r6,zero,42d44 <_dtoa_r+0x420>
   42d34:	99800017 	ldw	r6,0(r19)
   42d38:	99c00117 	ldw	r7,4(r19)
   42d3c:	94800044 	addi	r18,r18,1
   42d40:	00489340 	call	48934 <__muldf3>
   42d44:	9cc00204 	addi	r19,r19,8
   42d48:	a83ff51e 	bne	r21,zero,42d20 <_dtoa_r+0x3fc>
   42d4c:	1015883a 	mov	r10,r2
   42d50:	182d883a 	mov	r22,r3
   42d54:	d9001017 	ldw	r4,64(sp)
   42d58:	a00b883a 	mov	r5,r20
   42d5c:	500d883a 	mov	r6,r10
   42d60:	b00f883a 	mov	r7,r22
   42d64:	0048c180 	call	48c18 <__divdf3>
   42d68:	1027883a 	mov	r19,r2
   42d6c:	1829883a 	mov	r20,r3
   42d70:	d8c00d17 	ldw	r3,52(sp)
   42d74:	18000626 	beq	r3,zero,42d90 <_dtoa_r+0x46c>
   42d78:	9809883a 	mov	r4,r19
   42d7c:	a00b883a 	mov	r5,r20
   42d80:	000d883a 	mov	r6,zero
   42d84:	01cffc34 	movhi	r7,16368
   42d88:	0048f4c0 	call	48f4c <__ltdf2>
   42d8c:	10040e16 	blt	r2,zero,43dc8 <_dtoa_r+0x14a4>
   42d90:	9009883a 	mov	r4,r18
   42d94:	0048fa80 	call	48fa8 <__floatsidf>
   42d98:	1009883a 	mov	r4,r2
   42d9c:	180b883a 	mov	r5,r3
   42da0:	980d883a 	mov	r6,r19
   42da4:	a00f883a 	mov	r7,r20
   42da8:	00489340 	call	48934 <__muldf3>
   42dac:	1009883a 	mov	r4,r2
   42db0:	180b883a 	mov	r5,r3
   42db4:	000d883a 	mov	r6,zero
   42db8:	01d00734 	movhi	r7,16412
   42dbc:	00488800 	call	48880 <__adddf3>
   42dc0:	057f3034 	movhi	r21,64704
   42dc4:	1d6b883a 	add	r21,r3,r21
   42dc8:	d8c00917 	ldw	r3,36(sp)
   42dcc:	1025883a 	mov	r18,r2
   42dd0:	18031f26 	beq	r3,zero,43a50 <_dtoa_r+0x112c>
   42dd4:	d8800617 	ldw	r2,24(sp)
   42dd8:	dac00917 	ldw	r11,36(sp)
   42ddc:	d8801315 	stw	r2,76(sp)
   42de0:	d8c00c17 	ldw	r3,48(sp)
   42de4:	18039026 	beq	r3,zero,43c28 <_dtoa_r+0x1304>
   42de8:	58bfffc4 	addi	r2,r11,-1
   42dec:	100490fa 	slli	r2,r2,3
   42df0:	00c00174 	movhi	r3,5
   42df4:	18f19804 	addi	r3,r3,-14752
   42df8:	0009883a 	mov	r4,zero
   42dfc:	1885883a 	add	r2,r3,r2
   42e00:	11800017 	ldw	r6,0(r2)
   42e04:	11c00117 	ldw	r7,4(r2)
   42e08:	014ff834 	movhi	r5,16352
   42e0c:	dac01615 	stw	r11,88(sp)
   42e10:	0048c180 	call	48c18 <__divdf3>
   42e14:	900d883a 	mov	r6,r18
   42e18:	a80f883a 	mov	r7,r21
   42e1c:	1009883a 	mov	r4,r2
   42e20:	180b883a 	mov	r5,r3
   42e24:	00488d40 	call	488d4 <__subdf3>
   42e28:	a00b883a 	mov	r5,r20
   42e2c:	9809883a 	mov	r4,r19
   42e30:	182b883a 	mov	r21,r3
   42e34:	d8801015 	stw	r2,64(sp)
   42e38:	004907c0 	call	4907c <__fixdfsi>
   42e3c:	1009883a 	mov	r4,r2
   42e40:	d8801515 	stw	r2,84(sp)
   42e44:	0048fa80 	call	48fa8 <__floatsidf>
   42e48:	9809883a 	mov	r4,r19
   42e4c:	a00b883a 	mov	r5,r20
   42e50:	100d883a 	mov	r6,r2
   42e54:	180f883a 	mov	r7,r3
   42e58:	00488d40 	call	488d4 <__subdf3>
   42e5c:	da401517 	ldw	r9,84(sp)
   42e60:	d9001017 	ldw	r4,64(sp)
   42e64:	a80b883a 	mov	r5,r21
   42e68:	4d000c04 	addi	r20,r9,48
   42e6c:	bd000005 	stb	r20,0(r23)
   42e70:	100d883a 	mov	r6,r2
   42e74:	180f883a 	mov	r7,r3
   42e78:	bd800044 	addi	r22,r23,1
   42e7c:	1025883a 	mov	r18,r2
   42e80:	1827883a 	mov	r19,r3
   42e84:	0048e840 	call	48e84 <__gtdf2>
   42e88:	00842216 	blt	zero,r2,43f14 <_dtoa_r+0x15f0>
   42e8c:	0009883a 	mov	r4,zero
   42e90:	014ffc34 	movhi	r5,16368
   42e94:	900d883a 	mov	r6,r18
   42e98:	980f883a 	mov	r7,r19
   42e9c:	00488d40 	call	488d4 <__subdf3>
   42ea0:	d9001017 	ldw	r4,64(sp)
   42ea4:	a80b883a 	mov	r5,r21
   42ea8:	100d883a 	mov	r6,r2
   42eac:	180f883a 	mov	r7,r3
   42eb0:	0048e840 	call	48e84 <__gtdf2>
   42eb4:	dac01617 	ldw	r11,88(sp)
   42eb8:	00841316 	blt	zero,r2,43f08 <_dtoa_r+0x15e4>
   42ebc:	00800044 	movi	r2,1
   42ec0:	12c0670e 	bge	r2,r11,43060 <_dtoa_r+0x73c>
   42ec4:	bad7883a 	add	r11,r23,r11
   42ec8:	df001115 	stw	fp,68(sp)
   42ecc:	dc401215 	stw	r17,72(sp)
   42ed0:	5839883a 	mov	fp,r11
   42ed4:	dc401017 	ldw	r17,64(sp)
   42ed8:	00000806 	br	42efc <_dtoa_r+0x5d8>
   42edc:	00488d40 	call	488d4 <__subdf3>
   42ee0:	1009883a 	mov	r4,r2
   42ee4:	180b883a 	mov	r5,r3
   42ee8:	880d883a 	mov	r6,r17
   42eec:	a80f883a 	mov	r7,r21
   42ef0:	0048f4c0 	call	48f4c <__ltdf2>
   42ef4:	1003ee16 	blt	r2,zero,43eb0 <_dtoa_r+0x158c>
   42ef8:	b703f126 	beq	r22,fp,43ec0 <_dtoa_r+0x159c>
   42efc:	8809883a 	mov	r4,r17
   42f00:	a80b883a 	mov	r5,r21
   42f04:	000d883a 	mov	r6,zero
   42f08:	01d00934 	movhi	r7,16420
   42f0c:	00489340 	call	48934 <__muldf3>
   42f10:	000d883a 	mov	r6,zero
   42f14:	01d00934 	movhi	r7,16420
   42f18:	9009883a 	mov	r4,r18
   42f1c:	980b883a 	mov	r5,r19
   42f20:	1023883a 	mov	r17,r2
   42f24:	182b883a 	mov	r21,r3
   42f28:	00489340 	call	48934 <__muldf3>
   42f2c:	180b883a 	mov	r5,r3
   42f30:	1009883a 	mov	r4,r2
   42f34:	1825883a 	mov	r18,r3
   42f38:	1027883a 	mov	r19,r2
   42f3c:	004907c0 	call	4907c <__fixdfsi>
   42f40:	1009883a 	mov	r4,r2
   42f44:	1029883a 	mov	r20,r2
   42f48:	0048fa80 	call	48fa8 <__floatsidf>
   42f4c:	9809883a 	mov	r4,r19
   42f50:	900b883a 	mov	r5,r18
   42f54:	100d883a 	mov	r6,r2
   42f58:	180f883a 	mov	r7,r3
   42f5c:	00488d40 	call	488d4 <__subdf3>
   42f60:	a5000c04 	addi	r20,r20,48
   42f64:	b5000005 	stb	r20,0(r22)
   42f68:	1009883a 	mov	r4,r2
   42f6c:	180b883a 	mov	r5,r3
   42f70:	880d883a 	mov	r6,r17
   42f74:	a80f883a 	mov	r7,r21
   42f78:	1025883a 	mov	r18,r2
   42f7c:	1827883a 	mov	r19,r3
   42f80:	0048f4c0 	call	48f4c <__ltdf2>
   42f84:	b5800044 	addi	r22,r22,1
   42f88:	0009883a 	mov	r4,zero
   42f8c:	014ffc34 	movhi	r5,16368
   42f90:	900d883a 	mov	r6,r18
   42f94:	980f883a 	mov	r7,r19
   42f98:	103fd00e 	bge	r2,zero,42edc <_dtoa_r+0x5b8>
   42f9c:	d9001317 	ldw	r4,76(sp)
   42fa0:	df001117 	ldw	fp,68(sp)
   42fa4:	d9000615 	stw	r4,24(sp)
   42fa8:	8009883a 	mov	r4,r16
   42fac:	e00b883a 	mov	r5,fp
   42fb0:	0045d240 	call	45d24 <_Bfree>
   42fb4:	d9c00617 	ldw	r7,24(sp)
   42fb8:	d8c02217 	ldw	r3,136(sp)
   42fbc:	d9002417 	ldw	r4,144(sp)
   42fc0:	b0000005 	stb	zero,0(r22)
   42fc4:	38800044 	addi	r2,r7,1
   42fc8:	18800015 	stw	r2,0(r3)
   42fcc:	203e8426 	beq	r4,zero,429e0 <_dtoa_r+0xbc>
   42fd0:	25800015 	stw	r22,0(r4)
   42fd4:	003e8206 	br	429e0 <_dtoa_r+0xbc>
   42fd8:	00800434 	movhi	r2,16
   42fdc:	10bfffc4 	addi	r2,r2,-1
   42fe0:	90a4703a 	and	r18,r18,r2
   42fe4:	903e901e 	bne	r18,zero,42a28 <_dtoa_r+0x104>
   42fe8:	05c00174 	movhi	r23,5
   42fec:	bdf16f04 	addi	r23,r23,-14916
   42ff0:	003e8f06 	br	42a30 <_dtoa_r+0x10c>
   42ff4:	b8800204 	addi	r2,r23,8
   42ff8:	003e9206 	br	42a44 <_dtoa_r+0x120>
   42ffc:	01400434 	movhi	r5,16
   43000:	297fffc4 	addi	r5,r5,-1
   43004:	894a703a 	and	r5,r17,r5
   43008:	d9000317 	ldw	r4,12(sp)
   4300c:	294ffc34 	orhi	r5,r5,16368
   43010:	a53f0044 	addi	r20,r20,-1023
   43014:	dd400217 	ldw	r21,8(sp)
   43018:	d8000f15 	stw	zero,60(sp)
   4301c:	003eb106 	br	42ae4 <_dtoa_r+0x1c0>
   43020:	05c00174 	movhi	r23,5
   43024:	bdf16604 	addi	r23,r23,-14952
   43028:	003e6d06 	br	429e0 <_dtoa_r+0xbc>
   4302c:	d8000415 	stw	zero,16(sp)
   43030:	80001115 	stw	zero,68(r16)
   43034:	8009883a 	mov	r4,r16
   43038:	000b883a 	mov	r5,zero
   4303c:	0045c7c0 	call	45c7c <_Balloc>
   43040:	01ffffc4 	movi	r7,-1
   43044:	102f883a 	mov	r23,r2
   43048:	80801015 	stw	r2,64(r16)
   4304c:	00800044 	movi	r2,1
   43050:	d9c00915 	stw	r7,36(sp)
   43054:	d8002115 	stw	zero,132(sp)
   43058:	d9c00e15 	stw	r7,56(sp)
   4305c:	d8800c15 	stw	r2,48(sp)
   43060:	d8800117 	ldw	r2,4(sp)
   43064:	10008b16 	blt	r2,zero,43294 <_dtoa_r+0x970>
   43068:	d9000617 	ldw	r4,24(sp)
   4306c:	00c00384 	movi	r3,14
   43070:	19008816 	blt	r3,r4,43294 <_dtoa_r+0x970>
   43074:	200490fa 	slli	r2,r4,3
   43078:	d9c02117 	ldw	r7,132(sp)
   4307c:	00c00174 	movhi	r3,5
   43080:	18f19804 	addi	r3,r3,-14752
   43084:	1885883a 	add	r2,r3,r2
   43088:	14800017 	ldw	r18,0(r2)
   4308c:	14c00117 	ldw	r19,4(r2)
   43090:	3801c916 	blt	r7,zero,437b8 <_dtoa_r+0xe94>
   43094:	d9000317 	ldw	r4,12(sp)
   43098:	900d883a 	mov	r6,r18
   4309c:	980f883a 	mov	r7,r19
   430a0:	880b883a 	mov	r5,r17
   430a4:	0048c180 	call	48c18 <__divdf3>
   430a8:	180b883a 	mov	r5,r3
   430ac:	1009883a 	mov	r4,r2
   430b0:	004907c0 	call	4907c <__fixdfsi>
   430b4:	1009883a 	mov	r4,r2
   430b8:	102b883a 	mov	r21,r2
   430bc:	0048fa80 	call	48fa8 <__floatsidf>
   430c0:	1009883a 	mov	r4,r2
   430c4:	180b883a 	mov	r5,r3
   430c8:	900d883a 	mov	r6,r18
   430cc:	980f883a 	mov	r7,r19
   430d0:	00489340 	call	48934 <__muldf3>
   430d4:	d9000317 	ldw	r4,12(sp)
   430d8:	880b883a 	mov	r5,r17
   430dc:	100d883a 	mov	r6,r2
   430e0:	180f883a 	mov	r7,r3
   430e4:	00488d40 	call	488d4 <__subdf3>
   430e8:	d9c00917 	ldw	r7,36(sp)
   430ec:	1009883a 	mov	r4,r2
   430f0:	a8800c04 	addi	r2,r21,48
   430f4:	b8800005 	stb	r2,0(r23)
   430f8:	01800044 	movi	r6,1
   430fc:	180b883a 	mov	r5,r3
   43100:	2005883a 	mov	r2,r4
   43104:	bd800044 	addi	r22,r23,1
   43108:	39803726 	beq	r7,r6,431e8 <_dtoa_r+0x8c4>
   4310c:	000d883a 	mov	r6,zero
   43110:	01d00934 	movhi	r7,16420
   43114:	00489340 	call	48934 <__muldf3>
   43118:	1009883a 	mov	r4,r2
   4311c:	180b883a 	mov	r5,r3
   43120:	000d883a 	mov	r6,zero
   43124:	000f883a 	mov	r7,zero
   43128:	1029883a 	mov	r20,r2
   4312c:	1823883a 	mov	r17,r3
   43130:	0048dcc0 	call	48dcc <__eqdf2>
   43134:	103f9c26 	beq	r2,zero,42fa8 <_dtoa_r+0x684>
   43138:	dd400917 	ldw	r21,36(sp)
   4313c:	dc000415 	stw	r16,16(sp)
   43140:	00000906 	br	43168 <_dtoa_r+0x844>
   43144:	00489340 	call	48934 <__muldf3>
   43148:	1009883a 	mov	r4,r2
   4314c:	180b883a 	mov	r5,r3
   43150:	000d883a 	mov	r6,zero
   43154:	000f883a 	mov	r7,zero
   43158:	1029883a 	mov	r20,r2
   4315c:	1823883a 	mov	r17,r3
   43160:	0048dcc0 	call	48dcc <__eqdf2>
   43164:	10022926 	beq	r2,zero,43a0c <_dtoa_r+0x10e8>
   43168:	900d883a 	mov	r6,r18
   4316c:	980f883a 	mov	r7,r19
   43170:	a009883a 	mov	r4,r20
   43174:	880b883a 	mov	r5,r17
   43178:	0048c180 	call	48c18 <__divdf3>
   4317c:	180b883a 	mov	r5,r3
   43180:	1009883a 	mov	r4,r2
   43184:	004907c0 	call	4907c <__fixdfsi>
   43188:	1009883a 	mov	r4,r2
   4318c:	1021883a 	mov	r16,r2
   43190:	0048fa80 	call	48fa8 <__floatsidf>
   43194:	1009883a 	mov	r4,r2
   43198:	180b883a 	mov	r5,r3
   4319c:	900d883a 	mov	r6,r18
   431a0:	980f883a 	mov	r7,r19
   431a4:	00489340 	call	48934 <__muldf3>
   431a8:	a009883a 	mov	r4,r20
   431ac:	880b883a 	mov	r5,r17
   431b0:	100d883a 	mov	r6,r2
   431b4:	180f883a 	mov	r7,r3
   431b8:	00488d40 	call	488d4 <__subdf3>
   431bc:	82400c04 	addi	r9,r16,48
   431c0:	b2400005 	stb	r9,0(r22)
   431c4:	b5800044 	addi	r22,r22,1
   431c8:	b5d3c83a 	sub	r9,r22,r23
   431cc:	000d883a 	mov	r6,zero
   431d0:	01d00934 	movhi	r7,16420
   431d4:	1009883a 	mov	r4,r2
   431d8:	180b883a 	mov	r5,r3
   431dc:	aa7fd91e 	bne	r21,r9,43144 <_dtoa_r+0x820>
   431e0:	802b883a 	mov	r21,r16
   431e4:	dc000417 	ldw	r16,16(sp)
   431e8:	1009883a 	mov	r4,r2
   431ec:	180b883a 	mov	r5,r3
   431f0:	100d883a 	mov	r6,r2
   431f4:	180f883a 	mov	r7,r3
   431f8:	00488800 	call	48880 <__adddf3>
   431fc:	9009883a 	mov	r4,r18
   43200:	980b883a 	mov	r5,r19
   43204:	100d883a 	mov	r6,r2
   43208:	180f883a 	mov	r7,r3
   4320c:	1023883a 	mov	r17,r2
   43210:	1829883a 	mov	r20,r3
   43214:	0048f4c0 	call	48f4c <__ltdf2>
   43218:	10000816 	blt	r2,zero,4323c <_dtoa_r+0x918>
   4321c:	9009883a 	mov	r4,r18
   43220:	980b883a 	mov	r5,r19
   43224:	880d883a 	mov	r6,r17
   43228:	a00f883a 	mov	r7,r20
   4322c:	0048dcc0 	call	48dcc <__eqdf2>
   43230:	103f5d1e 	bne	r2,zero,42fa8 <_dtoa_r+0x684>
   43234:	ad40004c 	andi	r21,r21,1
   43238:	a83f5b26 	beq	r21,zero,42fa8 <_dtoa_r+0x684>
   4323c:	b53fffc3 	ldbu	r20,-1(r22)
   43240:	b0ffff84 	addi	r3,r22,-2
   43244:	01400e44 	movi	r5,57
   43248:	00000306 	br	43258 <_dtoa_r+0x934>
   4324c:	1d000003 	ldbu	r20,0(r3)
   43250:	102d883a 	mov	r22,r2
   43254:	18ffffc4 	addi	r3,r3,-1
   43258:	a1003fcc 	andi	r4,r20,255
   4325c:	2100201c 	xori	r4,r4,128
   43260:	213fe004 	addi	r4,r4,-128
   43264:	b0bfffc4 	addi	r2,r22,-1
   43268:	2142ca1e 	bne	r4,r5,43d94 <_dtoa_r+0x1470>
   4326c:	b8bff71e 	bne	r23,r2,4324c <_dtoa_r+0x928>
   43270:	d8800617 	ldw	r2,24(sp)
   43274:	05000c44 	movi	r20,49
   43278:	10800044 	addi	r2,r2,1
   4327c:	d8800615 	stw	r2,24(sp)
   43280:	00800c04 	movi	r2,48
   43284:	b8800005 	stb	r2,0(r23)
   43288:	b805883a 	mov	r2,r23
   4328c:	15000005 	stb	r20,0(r2)
   43290:	003f4506 	br	42fa8 <_dtoa_r+0x684>
   43294:	d9c00c17 	ldw	r7,48(sp)
   43298:	3800c926 	beq	r7,zero,435c0 <_dtoa_r+0xc9c>
   4329c:	d9c00417 	ldw	r7,16(sp)
   432a0:	00c00044 	movi	r3,1
   432a4:	19c16c0e 	bge	r3,r7,43858 <_dtoa_r+0xf34>
   432a8:	d9000917 	ldw	r4,36(sp)
   432ac:	d9c00a17 	ldw	r7,40(sp)
   432b0:	24ffffc4 	addi	r19,r4,-1
   432b4:	3cc20716 	blt	r7,r19,43ad4 <_dtoa_r+0x11b0>
   432b8:	3ce7c83a 	sub	r19,r7,r19
   432bc:	d9c00917 	ldw	r7,36(sp)
   432c0:	3802ae16 	blt	r7,zero,43d7c <_dtoa_r+0x1458>
   432c4:	dc800817 	ldw	r18,32(sp)
   432c8:	d8800917 	ldw	r2,36(sp)
   432cc:	d8c00817 	ldw	r3,32(sp)
   432d0:	d9c00717 	ldw	r7,28(sp)
   432d4:	8009883a 	mov	r4,r16
   432d8:	1887883a 	add	r3,r3,r2
   432dc:	388f883a 	add	r7,r7,r2
   432e0:	01400044 	movi	r5,1
   432e4:	d8c00815 	stw	r3,32(sp)
   432e8:	d9c00715 	stw	r7,28(sp)
   432ec:	004607c0 	call	4607c <__i2b>
   432f0:	102b883a 	mov	r21,r2
   432f4:	90000a26 	beq	r18,zero,43320 <_dtoa_r+0x9fc>
   432f8:	d8800717 	ldw	r2,28(sp)
   432fc:	0080080e 	bge	zero,r2,43320 <_dtoa_r+0x9fc>
   43300:	90812b16 	blt	r18,r2,437b0 <_dtoa_r+0xe8c>
   43304:	d8c00817 	ldw	r3,32(sp)
   43308:	d9000717 	ldw	r4,28(sp)
   4330c:	90a5c83a 	sub	r18,r18,r2
   43310:	1887c83a 	sub	r3,r3,r2
   43314:	2089c83a 	sub	r4,r4,r2
   43318:	d8c00815 	stw	r3,32(sp)
   4331c:	d9000715 	stw	r4,28(sp)
   43320:	d9c00a17 	ldw	r7,40(sp)
   43324:	01c0140e 	bge	zero,r7,43378 <_dtoa_r+0xa54>
   43328:	d8800c17 	ldw	r2,48(sp)
   4332c:	1001de26 	beq	r2,zero,43aa8 <_dtoa_r+0x1184>
   43330:	04c00e0e 	bge	zero,r19,4336c <_dtoa_r+0xa48>
   43334:	a80b883a 	mov	r5,r21
   43338:	8009883a 	mov	r4,r16
   4333c:	980d883a 	mov	r6,r19
   43340:	00462980 	call	46298 <__pow5mult>
   43344:	e00d883a 	mov	r6,fp
   43348:	8009883a 	mov	r4,r16
   4334c:	100b883a 	mov	r5,r2
   43350:	102b883a 	mov	r21,r2
   43354:	00460b80 	call	460b8 <__multiply>
   43358:	1029883a 	mov	r20,r2
   4335c:	e00b883a 	mov	r5,fp
   43360:	8009883a 	mov	r4,r16
   43364:	0045d240 	call	45d24 <_Bfree>
   43368:	a039883a 	mov	fp,r20
   4336c:	d8c00a17 	ldw	r3,40(sp)
   43370:	1ccdc83a 	sub	r6,r3,r19
   43374:	3001291e 	bne	r6,zero,4381c <_dtoa_r+0xef8>
   43378:	8009883a 	mov	r4,r16
   4337c:	01400044 	movi	r5,1
   43380:	004607c0 	call	4607c <__i2b>
   43384:	d9000b17 	ldw	r4,44(sp)
   43388:	1029883a 	mov	r20,r2
   4338c:	0100050e 	bge	zero,r4,433a4 <_dtoa_r+0xa80>
   43390:	d9800b17 	ldw	r6,44(sp)
   43394:	8009883a 	mov	r4,r16
   43398:	100b883a 	mov	r5,r2
   4339c:	00462980 	call	46298 <__pow5mult>
   433a0:	1029883a 	mov	r20,r2
   433a4:	d9c00417 	ldw	r7,16(sp)
   433a8:	00800044 	movi	r2,1
   433ac:	11c0f00e 	bge	r2,r7,43770 <_dtoa_r+0xe4c>
   433b0:	0023883a 	mov	r17,zero
   433b4:	d8800b17 	ldw	r2,44(sp)
   433b8:	1001741e 	bne	r2,zero,4398c <_dtoa_r+0x1068>
   433bc:	00800044 	movi	r2,1
   433c0:	d8c00717 	ldw	r3,28(sp)
   433c4:	10c5883a 	add	r2,r2,r3
   433c8:	108007cc 	andi	r2,r2,31
   433cc:	10008026 	beq	r2,zero,435d0 <_dtoa_r+0xcac>
   433d0:	01000804 	movi	r4,32
   433d4:	2089c83a 	sub	r4,r4,r2
   433d8:	00c00104 	movi	r3,4
   433dc:	1902d00e 	bge	r3,r4,43f20 <_dtoa_r+0x15fc>
   433e0:	d9000817 	ldw	r4,32(sp)
   433e4:	d9c00717 	ldw	r7,28(sp)
   433e8:	00c00704 	movi	r3,28
   433ec:	1885c83a 	sub	r2,r3,r2
   433f0:	2089883a 	add	r4,r4,r2
   433f4:	388f883a 	add	r7,r7,r2
   433f8:	d9000815 	stw	r4,32(sp)
   433fc:	90a5883a 	add	r18,r18,r2
   43400:	d9c00715 	stw	r7,28(sp)
   43404:	d9c00817 	ldw	r7,32(sp)
   43408:	01c0050e 	bge	zero,r7,43420 <_dtoa_r+0xafc>
   4340c:	e00b883a 	mov	r5,fp
   43410:	8009883a 	mov	r4,r16
   43414:	380d883a 	mov	r6,r7
   43418:	00463c40 	call	463c4 <__lshift>
   4341c:	1039883a 	mov	fp,r2
   43420:	d8800717 	ldw	r2,28(sp)
   43424:	0080050e 	bge	zero,r2,4343c <_dtoa_r+0xb18>
   43428:	a00b883a 	mov	r5,r20
   4342c:	8009883a 	mov	r4,r16
   43430:	100d883a 	mov	r6,r2
   43434:	00463c40 	call	463c4 <__lshift>
   43438:	1029883a 	mov	r20,r2
   4343c:	d8c00d17 	ldw	r3,52(sp)
   43440:	1801401e 	bne	r3,zero,43944 <_dtoa_r+0x1020>
   43444:	d8800917 	ldw	r2,36(sp)
   43448:	00815a0e 	bge	zero,r2,439b4 <_dtoa_r+0x1090>
   4344c:	d8c00c17 	ldw	r3,48(sp)
   43450:	18006f1e 	bne	r3,zero,43610 <_dtoa_r+0xcec>
   43454:	b823883a 	mov	r17,r23
   43458:	dc800917 	ldw	r18,36(sp)
   4345c:	00000206 	br	43468 <_dtoa_r+0xb44>
   43460:	0045d4c0 	call	45d4c <__multadd>
   43464:	1039883a 	mov	fp,r2
   43468:	e009883a 	mov	r4,fp
   4346c:	a00b883a 	mov	r5,r20
   43470:	004271c0 	call	4271c <quorem>
   43474:	10800c04 	addi	r2,r2,48
   43478:	88800005 	stb	r2,0(r17)
   4347c:	8c400044 	addi	r17,r17,1
   43480:	8dc7c83a 	sub	r3,r17,r23
   43484:	8009883a 	mov	r4,r16
   43488:	e00b883a 	mov	r5,fp
   4348c:	01800284 	movi	r6,10
   43490:	000f883a 	mov	r7,zero
   43494:	1cbff216 	blt	r3,r18,43460 <_dtoa_r+0xb3c>
   43498:	dd800917 	ldw	r22,36(sp)
   4349c:	1007883a 	mov	r3,r2
   434a0:	05823a0e 	bge	zero,r22,43d8c <_dtoa_r+0x1468>
   434a4:	bdad883a 	add	r22,r23,r22
   434a8:	0023883a 	mov	r17,zero
   434ac:	e00b883a 	mov	r5,fp
   434b0:	01800044 	movi	r6,1
   434b4:	8009883a 	mov	r4,r16
   434b8:	d8c01515 	stw	r3,84(sp)
   434bc:	00463c40 	call	463c4 <__lshift>
   434c0:	1009883a 	mov	r4,r2
   434c4:	a00b883a 	mov	r5,r20
   434c8:	1039883a 	mov	fp,r2
   434cc:	00465200 	call	46520 <__mcmp>
   434d0:	d8c01517 	ldw	r3,84(sp)
   434d4:	0080d60e 	bge	zero,r2,43830 <_dtoa_r+0xf0c>
   434d8:	b13fffc3 	ldbu	r4,-1(r22)
   434dc:	b0ffff84 	addi	r3,r22,-2
   434e0:	01800e44 	movi	r6,57
   434e4:	00000306 	br	434f4 <_dtoa_r+0xbd0>
   434e8:	19000003 	ldbu	r4,0(r3)
   434ec:	102d883a 	mov	r22,r2
   434f0:	18ffffc4 	addi	r3,r3,-1
   434f4:	21403fcc 	andi	r5,r4,255
   434f8:	2940201c 	xori	r5,r5,128
   434fc:	297fe004 	addi	r5,r5,-128
   43500:	b0bfffc4 	addi	r2,r22,-1
   43504:	2981a71e 	bne	r5,r6,43ba4 <_dtoa_r+0x1280>
   43508:	b8bff71e 	bne	r23,r2,434e8 <_dtoa_r+0xbc4>
   4350c:	d8800617 	ldw	r2,24(sp)
   43510:	10800044 	addi	r2,r2,1
   43514:	d8800615 	stw	r2,24(sp)
   43518:	00800c44 	movi	r2,49
   4351c:	b8800005 	stb	r2,0(r23)
   43520:	8009883a 	mov	r4,r16
   43524:	a00b883a 	mov	r5,r20
   43528:	0045d240 	call	45d24 <_Bfree>
   4352c:	a83e9e26 	beq	r21,zero,42fa8 <_dtoa_r+0x684>
   43530:	88000426 	beq	r17,zero,43544 <_dtoa_r+0xc20>
   43534:	8d400326 	beq	r17,r21,43544 <_dtoa_r+0xc20>
   43538:	8009883a 	mov	r4,r16
   4353c:	880b883a 	mov	r5,r17
   43540:	0045d240 	call	45d24 <_Bfree>
   43544:	8009883a 	mov	r4,r16
   43548:	a80b883a 	mov	r5,r21
   4354c:	0045d240 	call	45d24 <_Bfree>
   43550:	003e9506 	br	42fa8 <_dtoa_r+0x684>
   43554:	00c00044 	movi	r3,1
   43558:	d8c00d15 	stw	r3,52(sp)
   4355c:	003d9f06 	br	42bdc <_dtoa_r+0x2b8>
   43560:	d9000817 	ldw	r4,32(sp)
   43564:	d8800617 	ldw	r2,24(sp)
   43568:	d8000b15 	stw	zero,44(sp)
   4356c:	2089c83a 	sub	r4,r4,r2
   43570:	0087c83a 	sub	r3,zero,r2
   43574:	d9000815 	stw	r4,32(sp)
   43578:	d8c00a15 	stw	r3,40(sp)
   4357c:	003da306 	br	42c0c <_dtoa_r+0x2e8>
   43580:	0529c83a 	sub	r20,zero,r20
   43584:	dd000815 	stw	r20,32(sp)
   43588:	d8000715 	stw	zero,28(sp)
   4358c:	003d9806 	br	42bf0 <_dtoa_r+0x2cc>
   43590:	d9000617 	ldw	r4,24(sp)
   43594:	0048fa80 	call	48fa8 <__floatsidf>
   43598:	1009883a 	mov	r4,r2
   4359c:	180b883a 	mov	r5,r3
   435a0:	980d883a 	mov	r6,r19
   435a4:	900f883a 	mov	r7,r18
   435a8:	0048e280 	call	48e28 <__nedf2>
   435ac:	103d7a26 	beq	r2,zero,42b98 <_dtoa_r+0x274>
   435b0:	d8800617 	ldw	r2,24(sp)
   435b4:	10bfffc4 	addi	r2,r2,-1
   435b8:	d8800615 	stw	r2,24(sp)
   435bc:	003d7606 	br	42b98 <_dtoa_r+0x274>
   435c0:	dcc00a17 	ldw	r19,40(sp)
   435c4:	dc800817 	ldw	r18,32(sp)
   435c8:	002b883a 	mov	r21,zero
   435cc:	003f4906 	br	432f4 <_dtoa_r+0x9d0>
   435d0:	00800704 	movi	r2,28
   435d4:	d8c00817 	ldw	r3,32(sp)
   435d8:	d9000717 	ldw	r4,28(sp)
   435dc:	90a5883a 	add	r18,r18,r2
   435e0:	1887883a 	add	r3,r3,r2
   435e4:	2089883a 	add	r4,r4,r2
   435e8:	d8c00815 	stw	r3,32(sp)
   435ec:	d9000715 	stw	r4,28(sp)
   435f0:	003f8406 	br	43404 <_dtoa_r+0xae0>
   435f4:	d9c00317 	ldw	r7,12(sp)
   435f8:	013efb84 	movi	r4,-1042
   435fc:	2509c83a 	sub	r4,r4,r20
   43600:	3908983a 	sll	r4,r7,r4
   43604:	003d3006 	br	42ac8 <_dtoa_r+0x1a4>
   43608:	d8000d15 	stw	zero,52(sp)
   4360c:	003d7306 	br	42bdc <_dtoa_r+0x2b8>
   43610:	0480050e 	bge	zero,r18,43628 <_dtoa_r+0xd04>
   43614:	a80b883a 	mov	r5,r21
   43618:	8009883a 	mov	r4,r16
   4361c:	900d883a 	mov	r6,r18
   43620:	00463c40 	call	463c4 <__lshift>
   43624:	102b883a 	mov	r21,r2
   43628:	8801611e 	bne	r17,zero,43bb0 <_dtoa_r+0x128c>
   4362c:	a827883a 	mov	r19,r21
   43630:	d8c00317 	ldw	r3,12(sp)
   43634:	d9000917 	ldw	r4,36(sp)
   43638:	b8bfffc4 	addi	r2,r23,-1
   4363c:	18c0004c 	andi	r3,r3,1
   43640:	1105883a 	add	r2,r2,r4
   43644:	b825883a 	mov	r18,r23
   43648:	d8800515 	stw	r2,20(sp)
   4364c:	a823883a 	mov	r17,r21
   43650:	d8c00315 	stw	r3,12(sp)
   43654:	ddc00715 	stw	r23,28(sp)
   43658:	e009883a 	mov	r4,fp
   4365c:	a00b883a 	mov	r5,r20
   43660:	004271c0 	call	4271c <quorem>
   43664:	e009883a 	mov	r4,fp
   43668:	880b883a 	mov	r5,r17
   4366c:	102d883a 	mov	r22,r2
   43670:	00465200 	call	46520 <__mcmp>
   43674:	980d883a 	mov	r6,r19
   43678:	8009883a 	mov	r4,r16
   4367c:	a00b883a 	mov	r5,r20
   43680:	102b883a 	mov	r21,r2
   43684:	00465780 	call	46578 <__mdiff>
   43688:	100d883a 	mov	r6,r2
   4368c:	10800317 	ldw	r2,12(r2)
   43690:	b5c00c04 	addi	r23,r22,48
   43694:	10008c26 	beq	r2,zero,438c8 <_dtoa_r+0xfa4>
   43698:	8009883a 	mov	r4,r16
   4369c:	300b883a 	mov	r5,r6
   436a0:	0045d240 	call	45d24 <_Bfree>
   436a4:	00800044 	movi	r2,1
   436a8:	a8007116 	blt	r21,zero,43870 <_dtoa_r+0xf4c>
   436ac:	a800041e 	bne	r21,zero,436c0 <_dtoa_r+0xd9c>
   436b0:	d9c00417 	ldw	r7,16(sp)
   436b4:	3800021e 	bne	r7,zero,436c0 <_dtoa_r+0xd9c>
   436b8:	d8c00317 	ldw	r3,12(sp)
   436bc:	18006c26 	beq	r3,zero,43870 <_dtoa_r+0xf4c>
   436c0:	00814c16 	blt	zero,r2,43bf4 <_dtoa_r+0x12d0>
   436c4:	d8c00517 	ldw	r3,20(sp)
   436c8:	95400044 	addi	r21,r18,1
   436cc:	95c00005 	stb	r23,0(r18)
   436d0:	a82d883a 	mov	r22,r21
   436d4:	90c14d26 	beq	r18,r3,43c0c <_dtoa_r+0x12e8>
   436d8:	e00b883a 	mov	r5,fp
   436dc:	8009883a 	mov	r4,r16
   436e0:	01800284 	movi	r6,10
   436e4:	000f883a 	mov	r7,zero
   436e8:	0045d4c0 	call	45d4c <__multadd>
   436ec:	1039883a 	mov	fp,r2
   436f0:	8cc08b26 	beq	r17,r19,43920 <_dtoa_r+0xffc>
   436f4:	880b883a 	mov	r5,r17
   436f8:	01800284 	movi	r6,10
   436fc:	000f883a 	mov	r7,zero
   43700:	8009883a 	mov	r4,r16
   43704:	0045d4c0 	call	45d4c <__multadd>
   43708:	980b883a 	mov	r5,r19
   4370c:	8009883a 	mov	r4,r16
   43710:	01800284 	movi	r6,10
   43714:	000f883a 	mov	r7,zero
   43718:	1023883a 	mov	r17,r2
   4371c:	0045d4c0 	call	45d4c <__multadd>
   43720:	1027883a 	mov	r19,r2
   43724:	a825883a 	mov	r18,r21
   43728:	003fcb06 	br	43658 <_dtoa_r+0xd34>
   4372c:	d9c00417 	ldw	r7,16(sp)
   43730:	00800104 	movi	r2,4
   43734:	3880e426 	beq	r7,r2,43ac8 <_dtoa_r+0x11a4>
   43738:	00800144 	movi	r2,5
   4373c:	38be3c1e 	bne	r7,r2,43030 <_dtoa_r+0x70c>
   43740:	00c00044 	movi	r3,1
   43744:	d8c00c15 	stw	r3,48(sp)
   43748:	d9c02117 	ldw	r7,132(sp)
   4374c:	d8800617 	ldw	r2,24(sp)
   43750:	388f883a 	add	r7,r7,r2
   43754:	3c800044 	addi	r18,r7,1
   43758:	d9c00e15 	stw	r7,56(sp)
   4375c:	dc800915 	stw	r18,36(sp)
   43760:	04bd3e16 	blt	zero,r18,42c5c <_dtoa_r+0x338>
   43764:	80001115 	stw	zero,68(r16)
   43768:	000b883a 	mov	r5,zero
   4376c:	003d4606 	br	42c88 <_dtoa_r+0x364>
   43770:	d8c00317 	ldw	r3,12(sp)
   43774:	183f0e1e 	bne	r3,zero,433b0 <_dtoa_r+0xa8c>
   43778:	00c00434 	movhi	r3,16
   4377c:	18ffffc4 	addi	r3,r3,-1
   43780:	88c6703a 	and	r3,r17,r3
   43784:	183f0a1e 	bne	r3,zero,433b0 <_dtoa_r+0xa8c>
   43788:	8c5ffc2c 	andhi	r17,r17,32752
   4378c:	883f0826 	beq	r17,zero,433b0 <_dtoa_r+0xa8c>
   43790:	d9000817 	ldw	r4,32(sp)
   43794:	d9c00717 	ldw	r7,28(sp)
   43798:	1023883a 	mov	r17,r2
   4379c:	2089883a 	add	r4,r4,r2
   437a0:	388f883a 	add	r7,r7,r2
   437a4:	d9000815 	stw	r4,32(sp)
   437a8:	d9c00715 	stw	r7,28(sp)
   437ac:	003f0106 	br	433b4 <_dtoa_r+0xa90>
   437b0:	9005883a 	mov	r2,r18
   437b4:	003ed306 	br	43304 <_dtoa_r+0x9e0>
   437b8:	d8800917 	ldw	r2,36(sp)
   437bc:	00be3516 	blt	zero,r2,43094 <_dtoa_r+0x770>
   437c0:	1000b61e 	bne	r2,zero,43a9c <_dtoa_r+0x1178>
   437c4:	9009883a 	mov	r4,r18
   437c8:	980b883a 	mov	r5,r19
   437cc:	000d883a 	mov	r6,zero
   437d0:	01d00534 	movhi	r7,16404
   437d4:	00489340 	call	48934 <__muldf3>
   437d8:	d9800317 	ldw	r6,12(sp)
   437dc:	1009883a 	mov	r4,r2
   437e0:	180b883a 	mov	r5,r3
   437e4:	880f883a 	mov	r7,r17
   437e8:	0048ee80 	call	48ee8 <__gedf2>
   437ec:	0029883a 	mov	r20,zero
   437f0:	002b883a 	mov	r21,zero
   437f4:	10007e16 	blt	r2,zero,439f0 <_dtoa_r+0x10cc>
   437f8:	d8802117 	ldw	r2,132(sp)
   437fc:	b82d883a 	mov	r22,r23
   43800:	0084303a 	nor	r2,zero,r2
   43804:	d8800615 	stw	r2,24(sp)
   43808:	8009883a 	mov	r4,r16
   4380c:	a00b883a 	mov	r5,r20
   43810:	0045d240 	call	45d24 <_Bfree>
   43814:	a83f4b1e 	bne	r21,zero,43544 <_dtoa_r+0xc20>
   43818:	003de306 	br	42fa8 <_dtoa_r+0x684>
   4381c:	e00b883a 	mov	r5,fp
   43820:	8009883a 	mov	r4,r16
   43824:	00462980 	call	46298 <__pow5mult>
   43828:	1039883a 	mov	fp,r2
   4382c:	003ed206 	br	43378 <_dtoa_r+0xa54>
   43830:	1000021e 	bne	r2,zero,4383c <_dtoa_r+0xf18>
   43834:	18c0004c 	andi	r3,r3,1
   43838:	183f271e 	bne	r3,zero,434d8 <_dtoa_r+0xbb4>
   4383c:	01000c04 	movi	r4,48
   43840:	00000106 	br	43848 <_dtoa_r+0xf24>
   43844:	102d883a 	mov	r22,r2
   43848:	b0bfffc4 	addi	r2,r22,-1
   4384c:	10c00007 	ldb	r3,0(r2)
   43850:	193ffc26 	beq	r3,r4,43844 <_dtoa_r+0xf20>
   43854:	003f3206 	br	43520 <_dtoa_r+0xbfc>
   43858:	d8c00f17 	ldw	r3,60(sp)
   4385c:	18015026 	beq	r3,zero,43da0 <_dtoa_r+0x147c>
   43860:	10810cc4 	addi	r2,r2,1075
   43864:	dcc00a17 	ldw	r19,40(sp)
   43868:	dc800817 	ldw	r18,32(sp)
   4386c:	003e9706 	br	432cc <_dtoa_r+0x9a8>
   43870:	b807883a 	mov	r3,r23
   43874:	182b883a 	mov	r21,r3
   43878:	ddc00717 	ldw	r23,28(sp)
   4387c:	00800e0e 	bge	zero,r2,438b8 <_dtoa_r+0xf94>
   43880:	e00b883a 	mov	r5,fp
   43884:	01800044 	movi	r6,1
   43888:	8009883a 	mov	r4,r16
   4388c:	d8c01515 	stw	r3,84(sp)
   43890:	00463c40 	call	463c4 <__lshift>
   43894:	1009883a 	mov	r4,r2
   43898:	a00b883a 	mov	r5,r20
   4389c:	1039883a 	mov	fp,r2
   438a0:	00465200 	call	46520 <__mcmp>
   438a4:	d8c01517 	ldw	r3,84(sp)
   438a8:	0081880e 	bge	zero,r2,43ecc <_dtoa_r+0x15a8>
   438ac:	00800e44 	movi	r2,57
   438b0:	b0c00c44 	addi	r3,r22,49
   438b4:	a8816326 	beq	r21,r2,43e44 <_dtoa_r+0x1520>
   438b8:	90c00005 	stb	r3,0(r18)
   438bc:	95800044 	addi	r22,r18,1
   438c0:	982b883a 	mov	r21,r19
   438c4:	003f1606 	br	43520 <_dtoa_r+0xbfc>
   438c8:	300b883a 	mov	r5,r6
   438cc:	e009883a 	mov	r4,fp
   438d0:	d9801515 	stw	r6,84(sp)
   438d4:	00465200 	call	46520 <__mcmp>
   438d8:	d9801517 	ldw	r6,84(sp)
   438dc:	8009883a 	mov	r4,r16
   438e0:	d8801515 	stw	r2,84(sp)
   438e4:	300b883a 	mov	r5,r6
   438e8:	0045d240 	call	45d24 <_Bfree>
   438ec:	d8801517 	ldw	r2,84(sp)
   438f0:	103f6d1e 	bne	r2,zero,436a8 <_dtoa_r+0xd84>
   438f4:	d9c00417 	ldw	r7,16(sp)
   438f8:	383f6b1e 	bne	r7,zero,436a8 <_dtoa_r+0xd84>
   438fc:	d8c00317 	ldw	r3,12(sp)
   43900:	183f691e 	bne	r3,zero,436a8 <_dtoa_r+0xd84>
   43904:	b807883a 	mov	r3,r23
   43908:	00800e44 	movi	r2,57
   4390c:	ddc00717 	ldw	r23,28(sp)
   43910:	18814c26 	beq	r3,r2,43e44 <_dtoa_r+0x1520>
   43914:	057fe80e 	bge	zero,r21,438b8 <_dtoa_r+0xf94>
   43918:	b0c00c44 	addi	r3,r22,49
   4391c:	003fe606 	br	438b8 <_dtoa_r+0xf94>
   43920:	880b883a 	mov	r5,r17
   43924:	8009883a 	mov	r4,r16
   43928:	01800284 	movi	r6,10
   4392c:	000f883a 	mov	r7,zero
   43930:	0045d4c0 	call	45d4c <__multadd>
   43934:	1023883a 	mov	r17,r2
   43938:	1027883a 	mov	r19,r2
   4393c:	a825883a 	mov	r18,r21
   43940:	003f4506 	br	43658 <_dtoa_r+0xd34>
   43944:	e009883a 	mov	r4,fp
   43948:	a00b883a 	mov	r5,r20
   4394c:	00465200 	call	46520 <__mcmp>
   43950:	103ebc0e 	bge	r2,zero,43444 <_dtoa_r+0xb20>
   43954:	e00b883a 	mov	r5,fp
   43958:	8009883a 	mov	r4,r16
   4395c:	01800284 	movi	r6,10
   43960:	000f883a 	mov	r7,zero
   43964:	0045d4c0 	call	45d4c <__multadd>
   43968:	1039883a 	mov	fp,r2
   4396c:	d8800617 	ldw	r2,24(sp)
   43970:	d8c00c17 	ldw	r3,48(sp)
   43974:	10bfffc4 	addi	r2,r2,-1
   43978:	d8800615 	stw	r2,24(sp)
   4397c:	1801571e 	bne	r3,zero,43edc <_dtoa_r+0x15b8>
   43980:	d9c00e17 	ldw	r7,56(sp)
   43984:	d9c00915 	stw	r7,36(sp)
   43988:	003eae06 	br	43444 <_dtoa_r+0xb20>
   4398c:	a0800417 	ldw	r2,16(r20)
   43990:	10800104 	addi	r2,r2,4
   43994:	1085883a 	add	r2,r2,r2
   43998:	1085883a 	add	r2,r2,r2
   4399c:	a085883a 	add	r2,r20,r2
   439a0:	11000017 	ldw	r4,0(r2)
   439a4:	0045f640 	call	45f64 <__hi0bits>
   439a8:	00c00804 	movi	r3,32
   439ac:	1885c83a 	sub	r2,r3,r2
   439b0:	003e8306 	br	433c0 <_dtoa_r+0xa9c>
   439b4:	d9c00417 	ldw	r7,16(sp)
   439b8:	00800084 	movi	r2,2
   439bc:	11fea30e 	bge	r2,r7,4344c <_dtoa_r+0xb28>
   439c0:	d8800917 	ldw	r2,36(sp)
   439c4:	103f8c1e 	bne	r2,zero,437f8 <_dtoa_r+0xed4>
   439c8:	a00b883a 	mov	r5,r20
   439cc:	8009883a 	mov	r4,r16
   439d0:	01800144 	movi	r6,5
   439d4:	000f883a 	mov	r7,zero
   439d8:	0045d4c0 	call	45d4c <__multadd>
   439dc:	e009883a 	mov	r4,fp
   439e0:	100b883a 	mov	r5,r2
   439e4:	1029883a 	mov	r20,r2
   439e8:	00465200 	call	46520 <__mcmp>
   439ec:	00bf820e 	bge	zero,r2,437f8 <_dtoa_r+0xed4>
   439f0:	00800c44 	movi	r2,49
   439f4:	b8800005 	stb	r2,0(r23)
   439f8:	d8800617 	ldw	r2,24(sp)
   439fc:	bd800044 	addi	r22,r23,1
   43a00:	10800044 	addi	r2,r2,1
   43a04:	d8800615 	stw	r2,24(sp)
   43a08:	003f7f06 	br	43808 <_dtoa_r+0xee4>
   43a0c:	dc000417 	ldw	r16,16(sp)
   43a10:	003d6506 	br	42fa8 <_dtoa_r+0x684>
   43a14:	9009883a 	mov	r4,r18
   43a18:	0048fa80 	call	48fa8 <__floatsidf>
   43a1c:	1009883a 	mov	r4,r2
   43a20:	180b883a 	mov	r5,r3
   43a24:	980d883a 	mov	r6,r19
   43a28:	a00f883a 	mov	r7,r20
   43a2c:	00489340 	call	48934 <__muldf3>
   43a30:	1009883a 	mov	r4,r2
   43a34:	180b883a 	mov	r5,r3
   43a38:	000d883a 	mov	r6,zero
   43a3c:	01d00734 	movhi	r7,16412
   43a40:	00488800 	call	48880 <__adddf3>
   43a44:	057f3034 	movhi	r21,64704
   43a48:	1025883a 	mov	r18,r2
   43a4c:	1d6b883a 	add	r21,r3,r21
   43a50:	9809883a 	mov	r4,r19
   43a54:	a00b883a 	mov	r5,r20
   43a58:	000d883a 	mov	r6,zero
   43a5c:	01d00534 	movhi	r7,16404
   43a60:	00488d40 	call	488d4 <__subdf3>
   43a64:	1009883a 	mov	r4,r2
   43a68:	180b883a 	mov	r5,r3
   43a6c:	900d883a 	mov	r6,r18
   43a70:	a80f883a 	mov	r7,r21
   43a74:	1027883a 	mov	r19,r2
   43a78:	1829883a 	mov	r20,r3
   43a7c:	0048e840 	call	48e84 <__gtdf2>
   43a80:	00806616 	blt	zero,r2,43c1c <_dtoa_r+0x12f8>
   43a84:	a9e0003c 	xorhi	r7,r21,32768
   43a88:	9809883a 	mov	r4,r19
   43a8c:	a00b883a 	mov	r5,r20
   43a90:	900d883a 	mov	r6,r18
   43a94:	0048f4c0 	call	48f4c <__ltdf2>
   43a98:	103d710e 	bge	r2,zero,43060 <_dtoa_r+0x73c>
   43a9c:	0029883a 	mov	r20,zero
   43aa0:	002b883a 	mov	r21,zero
   43aa4:	003f5406 	br	437f8 <_dtoa_r+0xed4>
   43aa8:	d9800a17 	ldw	r6,40(sp)
   43aac:	e00b883a 	mov	r5,fp
   43ab0:	8009883a 	mov	r4,r16
   43ab4:	00462980 	call	46298 <__pow5mult>
   43ab8:	1039883a 	mov	fp,r2
   43abc:	003e2e06 	br	43378 <_dtoa_r+0xa54>
   43ac0:	d8000c15 	stw	zero,48(sp)
   43ac4:	003f2006 	br	43748 <_dtoa_r+0xe24>
   43ac8:	00800044 	movi	r2,1
   43acc:	d8800c15 	stw	r2,48(sp)
   43ad0:	003c5d06 	br	42c48 <_dtoa_r+0x324>
   43ad4:	d8c00a17 	ldw	r3,40(sp)
   43ad8:	d9000b17 	ldw	r4,44(sp)
   43adc:	dcc00a15 	stw	r19,40(sp)
   43ae0:	98c5c83a 	sub	r2,r19,r3
   43ae4:	2089883a 	add	r4,r4,r2
   43ae8:	d9000b15 	stw	r4,44(sp)
   43aec:	0027883a 	mov	r19,zero
   43af0:	003df206 	br	432bc <_dtoa_r+0x998>
   43af4:	d9000317 	ldw	r4,12(sp)
   43af8:	8829883a 	mov	r20,r17
   43afc:	04800084 	movi	r18,2
   43b00:	d9001015 	stw	r4,64(sp)
   43b04:	003c8106 	br	42d0c <_dtoa_r+0x3e8>
   43b08:	04800044 	movi	r18,1
   43b0c:	dc800e15 	stw	r18,56(sp)
   43b10:	dc800915 	stw	r18,36(sp)
   43b14:	dc802115 	stw	r18,132(sp)
   43b18:	003f1206 	br	43764 <_dtoa_r+0xe40>
   43b1c:	d8800617 	ldw	r2,24(sp)
   43b20:	00abc83a 	sub	r21,zero,r2
   43b24:	a800a426 	beq	r21,zero,43db8 <_dtoa_r+0x1494>
   43b28:	a88003cc 	andi	r2,r21,15
   43b2c:	100490fa 	slli	r2,r2,3
   43b30:	00c00174 	movhi	r3,5
   43b34:	18f19804 	addi	r3,r3,-14752
   43b38:	d9000317 	ldw	r4,12(sp)
   43b3c:	1885883a 	add	r2,r3,r2
   43b40:	11800017 	ldw	r6,0(r2)
   43b44:	11c00117 	ldw	r7,4(r2)
   43b48:	a82bd13a 	srai	r21,r21,4
   43b4c:	880b883a 	mov	r5,r17
   43b50:	00489340 	call	48934 <__muldf3>
   43b54:	1027883a 	mov	r19,r2
   43b58:	1829883a 	mov	r20,r3
   43b5c:	a800e826 	beq	r21,zero,43f00 <_dtoa_r+0x15dc>
   43b60:	05800174 	movhi	r22,5
   43b64:	b5b18e04 	addi	r22,r22,-14792
   43b68:	04800084 	movi	r18,2
   43b6c:	a980004c 	andi	r6,r21,1
   43b70:	1009883a 	mov	r4,r2
   43b74:	a82bd07a 	srai	r21,r21,1
   43b78:	180b883a 	mov	r5,r3
   43b7c:	30000426 	beq	r6,zero,43b90 <_dtoa_r+0x126c>
   43b80:	b1800017 	ldw	r6,0(r22)
   43b84:	b1c00117 	ldw	r7,4(r22)
   43b88:	94800044 	addi	r18,r18,1
   43b8c:	00489340 	call	48934 <__muldf3>
   43b90:	b5800204 	addi	r22,r22,8
   43b94:	a83ff51e 	bne	r21,zero,43b6c <_dtoa_r+0x1248>
   43b98:	1027883a 	mov	r19,r2
   43b9c:	1829883a 	mov	r20,r3
   43ba0:	003c7306 	br	42d70 <_dtoa_r+0x44c>
   43ba4:	21000044 	addi	r4,r4,1
   43ba8:	11000005 	stb	r4,0(r2)
   43bac:	003e5c06 	br	43520 <_dtoa_r+0xbfc>
   43bb0:	a9400117 	ldw	r5,4(r21)
   43bb4:	8009883a 	mov	r4,r16
   43bb8:	0045c7c0 	call	45c7c <_Balloc>
   43bbc:	a9800417 	ldw	r6,16(r21)
   43bc0:	11000304 	addi	r4,r2,12
   43bc4:	a9400304 	addi	r5,r21,12
   43bc8:	31800084 	addi	r6,r6,2
   43bcc:	318d883a 	add	r6,r6,r6
   43bd0:	318d883a 	add	r6,r6,r6
   43bd4:	1023883a 	mov	r17,r2
   43bd8:	00459800 	call	45980 <memcpy>
   43bdc:	8009883a 	mov	r4,r16
   43be0:	880b883a 	mov	r5,r17
   43be4:	01800044 	movi	r6,1
   43be8:	00463c40 	call	463c4 <__lshift>
   43bec:	1027883a 	mov	r19,r2
   43bf0:	003e8f06 	br	43630 <_dtoa_r+0xd0c>
   43bf4:	b807883a 	mov	r3,r23
   43bf8:	00800e44 	movi	r2,57
   43bfc:	ddc00717 	ldw	r23,28(sp)
   43c00:	18809026 	beq	r3,r2,43e44 <_dtoa_r+0x1520>
   43c04:	18c00044 	addi	r3,r3,1
   43c08:	003f2b06 	br	438b8 <_dtoa_r+0xf94>
   43c0c:	b807883a 	mov	r3,r23
   43c10:	982b883a 	mov	r21,r19
   43c14:	ddc00717 	ldw	r23,28(sp)
   43c18:	003e2406 	br	434ac <_dtoa_r+0xb88>
   43c1c:	0029883a 	mov	r20,zero
   43c20:	002b883a 	mov	r21,zero
   43c24:	003f7206 	br	439f0 <_dtoa_r+0x10cc>
   43c28:	593fffc4 	addi	r4,r11,-1
   43c2c:	200490fa 	slli	r2,r4,3
   43c30:	00c00174 	movhi	r3,5
   43c34:	18f19804 	addi	r3,r3,-14752
   43c38:	d9001015 	stw	r4,64(sp)
   43c3c:	1885883a 	add	r2,r3,r2
   43c40:	11000017 	ldw	r4,0(r2)
   43c44:	11400117 	ldw	r5,4(r2)
   43c48:	900d883a 	mov	r6,r18
   43c4c:	a80f883a 	mov	r7,r21
   43c50:	dac01615 	stw	r11,88(sp)
   43c54:	00489340 	call	48934 <__muldf3>
   43c58:	a00b883a 	mov	r5,r20
   43c5c:	9809883a 	mov	r4,r19
   43c60:	d8c01215 	stw	r3,72(sp)
   43c64:	d8801115 	stw	r2,68(sp)
   43c68:	004907c0 	call	4907c <__fixdfsi>
   43c6c:	1009883a 	mov	r4,r2
   43c70:	1025883a 	mov	r18,r2
   43c74:	0048fa80 	call	48fa8 <__floatsidf>
   43c78:	9809883a 	mov	r4,r19
   43c7c:	a00b883a 	mov	r5,r20
   43c80:	100d883a 	mov	r6,r2
   43c84:	180f883a 	mov	r7,r3
   43c88:	94800c04 	addi	r18,r18,48
   43c8c:	00488d40 	call	488d4 <__subdf3>
   43c90:	bc800005 	stb	r18,0(r23)
   43c94:	dac01617 	ldw	r11,88(sp)
   43c98:	102b883a 	mov	r21,r2
   43c9c:	00800044 	movi	r2,1
   43ca0:	bd800044 	addi	r22,r23,1
   43ca4:	1815883a 	mov	r10,r3
   43ca8:	58802226 	beq	r11,r2,43d34 <_dtoa_r+0x1410>
   43cac:	bad7883a 	add	r11,r23,r11
   43cb0:	dc001415 	stw	r16,80(sp)
   43cb4:	a805883a 	mov	r2,r21
   43cb8:	b027883a 	mov	r19,r22
   43cbc:	5821883a 	mov	r16,r11
   43cc0:	882b883a 	mov	r21,r17
   43cc4:	000d883a 	mov	r6,zero
   43cc8:	01d00934 	movhi	r7,16420
   43ccc:	1009883a 	mov	r4,r2
   43cd0:	180b883a 	mov	r5,r3
   43cd4:	00489340 	call	48934 <__muldf3>
   43cd8:	180b883a 	mov	r5,r3
   43cdc:	1009883a 	mov	r4,r2
   43ce0:	1829883a 	mov	r20,r3
   43ce4:	1023883a 	mov	r17,r2
   43ce8:	004907c0 	call	4907c <__fixdfsi>
   43cec:	1009883a 	mov	r4,r2
   43cf0:	1025883a 	mov	r18,r2
   43cf4:	0048fa80 	call	48fa8 <__floatsidf>
   43cf8:	8809883a 	mov	r4,r17
   43cfc:	a00b883a 	mov	r5,r20
   43d00:	100d883a 	mov	r6,r2
   43d04:	180f883a 	mov	r7,r3
   43d08:	94800c04 	addi	r18,r18,48
   43d0c:	00488d40 	call	488d4 <__subdf3>
   43d10:	9cc00044 	addi	r19,r19,1
   43d14:	9cbfffc5 	stb	r18,-1(r19)
   43d18:	9c3fea1e 	bne	r19,r16,43cc4 <_dtoa_r+0x13a0>
   43d1c:	1815883a 	mov	r10,r3
   43d20:	d8c01017 	ldw	r3,64(sp)
   43d24:	dc001417 	ldw	r16,80(sp)
   43d28:	a823883a 	mov	r17,r21
   43d2c:	b0ed883a 	add	r22,r22,r3
   43d30:	102b883a 	mov	r21,r2
   43d34:	d9001117 	ldw	r4,68(sp)
   43d38:	d9401217 	ldw	r5,72(sp)
   43d3c:	000d883a 	mov	r6,zero
   43d40:	01cff834 	movhi	r7,16352
   43d44:	da801515 	stw	r10,84(sp)
   43d48:	00488800 	call	48880 <__adddf3>
   43d4c:	da801517 	ldw	r10,84(sp)
   43d50:	1009883a 	mov	r4,r2
   43d54:	180b883a 	mov	r5,r3
   43d58:	500f883a 	mov	r7,r10
   43d5c:	a80d883a 	mov	r6,r21
   43d60:	0048f4c0 	call	48f4c <__ltdf2>
   43d64:	da801517 	ldw	r10,84(sp)
   43d68:	10003b0e 	bge	r2,zero,43e58 <_dtoa_r+0x1534>
   43d6c:	d9c01317 	ldw	r7,76(sp)
   43d70:	b53fffc3 	ldbu	r20,-1(r22)
   43d74:	d9c00615 	stw	r7,24(sp)
   43d78:	003d3106 	br	43240 <_dtoa_r+0x91c>
   43d7c:	d8800817 	ldw	r2,32(sp)
   43d80:	11e5c83a 	sub	r18,r2,r7
   43d84:	0005883a 	mov	r2,zero
   43d88:	003d5006 	br	432cc <_dtoa_r+0x9a8>
   43d8c:	05800044 	movi	r22,1
   43d90:	003dc406 	br	434a4 <_dtoa_r+0xb80>
   43d94:	a5000044 	addi	r20,r20,1
   43d98:	15000005 	stb	r20,0(r2)
   43d9c:	003c8206 	br	42fa8 <_dtoa_r+0x684>
   43da0:	d8800217 	ldw	r2,8(sp)
   43da4:	00c00d84 	movi	r3,54
   43da8:	dcc00a17 	ldw	r19,40(sp)
   43dac:	1885c83a 	sub	r2,r3,r2
   43db0:	dc800817 	ldw	r18,32(sp)
   43db4:	003d4506 	br	432cc <_dtoa_r+0x9a8>
   43db8:	dcc00317 	ldw	r19,12(sp)
   43dbc:	8829883a 	mov	r20,r17
   43dc0:	04800084 	movi	r18,2
   43dc4:	003bea06 	br	42d70 <_dtoa_r+0x44c>
   43dc8:	d9000917 	ldw	r4,36(sp)
   43dcc:	203f1126 	beq	r4,zero,43a14 <_dtoa_r+0x10f0>
   43dd0:	d9c00e17 	ldw	r7,56(sp)
   43dd4:	01fca20e 	bge	zero,r7,43060 <_dtoa_r+0x73c>
   43dd8:	a00b883a 	mov	r5,r20
   43ddc:	9809883a 	mov	r4,r19
   43de0:	000d883a 	mov	r6,zero
   43de4:	01d00934 	movhi	r7,16420
   43de8:	00489340 	call	48934 <__muldf3>
   43dec:	91000044 	addi	r4,r18,1
   43df0:	1027883a 	mov	r19,r2
   43df4:	1829883a 	mov	r20,r3
   43df8:	0048fa80 	call	48fa8 <__floatsidf>
   43dfc:	9809883a 	mov	r4,r19
   43e00:	a00b883a 	mov	r5,r20
   43e04:	100d883a 	mov	r6,r2
   43e08:	180f883a 	mov	r7,r3
   43e0c:	00489340 	call	48934 <__muldf3>
   43e10:	1009883a 	mov	r4,r2
   43e14:	180b883a 	mov	r5,r3
   43e18:	000d883a 	mov	r6,zero
   43e1c:	01d00734 	movhi	r7,16412
   43e20:	00488800 	call	48880 <__adddf3>
   43e24:	1025883a 	mov	r18,r2
   43e28:	d8800617 	ldw	r2,24(sp)
   43e2c:	057f3034 	movhi	r21,64704
   43e30:	1d6b883a 	add	r21,r3,r21
   43e34:	10bfffc4 	addi	r2,r2,-1
   43e38:	d8801315 	stw	r2,76(sp)
   43e3c:	dac00e17 	ldw	r11,56(sp)
   43e40:	003be706 	br	42de0 <_dtoa_r+0x4bc>
   43e44:	01000e44 	movi	r4,57
   43e48:	91000005 	stb	r4,0(r18)
   43e4c:	95800044 	addi	r22,r18,1
   43e50:	982b883a 	mov	r21,r19
   43e54:	003da106 	br	434dc <_dtoa_r+0xbb8>
   43e58:	d9801117 	ldw	r6,68(sp)
   43e5c:	d9c01217 	ldw	r7,72(sp)
   43e60:	0009883a 	mov	r4,zero
   43e64:	014ff834 	movhi	r5,16352
   43e68:	da801515 	stw	r10,84(sp)
   43e6c:	00488d40 	call	488d4 <__subdf3>
   43e70:	da801517 	ldw	r10,84(sp)
   43e74:	1009883a 	mov	r4,r2
   43e78:	180b883a 	mov	r5,r3
   43e7c:	a80d883a 	mov	r6,r21
   43e80:	500f883a 	mov	r7,r10
   43e84:	0048e840 	call	48e84 <__gtdf2>
   43e88:	00bc750e 	bge	zero,r2,43060 <_dtoa_r+0x73c>
   43e8c:	01000c04 	movi	r4,48
   43e90:	00000106 	br	43e98 <_dtoa_r+0x1574>
   43e94:	102d883a 	mov	r22,r2
   43e98:	b0bfffc4 	addi	r2,r22,-1
   43e9c:	10c00007 	ldb	r3,0(r2)
   43ea0:	193ffc26 	beq	r3,r4,43e94 <_dtoa_r+0x1570>
   43ea4:	d8801317 	ldw	r2,76(sp)
   43ea8:	d8800615 	stw	r2,24(sp)
   43eac:	003c3e06 	br	42fa8 <_dtoa_r+0x684>
   43eb0:	d9001317 	ldw	r4,76(sp)
   43eb4:	df001117 	ldw	fp,68(sp)
   43eb8:	d9000615 	stw	r4,24(sp)
   43ebc:	003ce006 	br	43240 <_dtoa_r+0x91c>
   43ec0:	df001117 	ldw	fp,68(sp)
   43ec4:	dc401217 	ldw	r17,72(sp)
   43ec8:	003c6506 	br	43060 <_dtoa_r+0x73c>
   43ecc:	103e7a1e 	bne	r2,zero,438b8 <_dtoa_r+0xf94>
   43ed0:	1880004c 	andi	r2,r3,1
   43ed4:	103e7826 	beq	r2,zero,438b8 <_dtoa_r+0xf94>
   43ed8:	003e7406 	br	438ac <_dtoa_r+0xf88>
   43edc:	8009883a 	mov	r4,r16
   43ee0:	a80b883a 	mov	r5,r21
   43ee4:	01800284 	movi	r6,10
   43ee8:	000f883a 	mov	r7,zero
   43eec:	0045d4c0 	call	45d4c <__multadd>
   43ef0:	d9000e17 	ldw	r4,56(sp)
   43ef4:	102b883a 	mov	r21,r2
   43ef8:	d9000915 	stw	r4,36(sp)
   43efc:	003d5106 	br	43444 <_dtoa_r+0xb20>
   43f00:	04800084 	movi	r18,2
   43f04:	003b9a06 	br	42d70 <_dtoa_r+0x44c>
   43f08:	d8c01317 	ldw	r3,76(sp)
   43f0c:	d8c00615 	stw	r3,24(sp)
   43f10:	003ccb06 	br	43240 <_dtoa_r+0x91c>
   43f14:	d8c01317 	ldw	r3,76(sp)
   43f18:	d8c00615 	stw	r3,24(sp)
   43f1c:	003c2206 	br	42fa8 <_dtoa_r+0x684>
   43f20:	20fd3826 	beq	r4,r3,43404 <_dtoa_r+0xae0>
   43f24:	00c00f04 	movi	r3,60
   43f28:	1885c83a 	sub	r2,r3,r2
   43f2c:	003da906 	br	435d4 <_dtoa_r+0xcb0>
   43f30:	000b883a 	mov	r5,zero
   43f34:	003b5406 	br	42c88 <_dtoa_r+0x364>
   43f38:	04c00044 	movi	r19,1
   43f3c:	003b3b06 	br	42c2c <_dtoa_r+0x308>

00043f40 <_fflush_r>:
   43f40:	defffb04 	addi	sp,sp,-20
   43f44:	dcc00315 	stw	r19,12(sp)
   43f48:	dc400115 	stw	r17,4(sp)
   43f4c:	dfc00415 	stw	ra,16(sp)
   43f50:	dc800215 	stw	r18,8(sp)
   43f54:	dc000015 	stw	r16,0(sp)
   43f58:	2027883a 	mov	r19,r4
   43f5c:	2823883a 	mov	r17,r5
   43f60:	20000226 	beq	r4,zero,43f6c <_fflush_r+0x2c>
   43f64:	20800e17 	ldw	r2,56(r4)
   43f68:	10005726 	beq	r2,zero,440c8 <_fflush_r+0x188>
   43f6c:	8880030b 	ldhu	r2,12(r17)
   43f70:	10c0020c 	andi	r3,r2,8
   43f74:	18ffffcc 	andi	r3,r3,65535
   43f78:	18e0001c 	xori	r3,r3,32768
   43f7c:	18e00004 	addi	r3,r3,-32768
   43f80:	1800311e 	bne	r3,zero,44048 <_fflush_r+0x108>
   43f84:	89000117 	ldw	r4,4(r17)
   43f88:	10c20014 	ori	r3,r2,2048
   43f8c:	88c0030d 	sth	r3,12(r17)
   43f90:	180b883a 	mov	r5,r3
   43f94:	0100520e 	bge	zero,r4,440e0 <_fflush_r+0x1a0>
   43f98:	88c00a17 	ldw	r3,40(r17)
   43f9c:	18002226 	beq	r3,zero,44028 <_fflush_r+0xe8>
   43fa0:	1084000c 	andi	r2,r2,4096
   43fa4:	10bfffcc 	andi	r2,r2,65535
   43fa8:	10a0001c 	xori	r2,r2,32768
   43fac:	10a00004 	addi	r2,r2,-32768
   43fb0:	10004e26 	beq	r2,zero,440ec <_fflush_r+0x1ac>
   43fb4:	8c001417 	ldw	r16,80(r17)
   43fb8:	2940010c 	andi	r5,r5,4
   43fbc:	297fffcc 	andi	r5,r5,65535
   43fc0:	2960001c 	xori	r5,r5,32768
   43fc4:	29600004 	addi	r5,r5,-32768
   43fc8:	28000626 	beq	r5,zero,43fe4 <_fflush_r+0xa4>
   43fcc:	89000117 	ldw	r4,4(r17)
   43fd0:	88800c17 	ldw	r2,48(r17)
   43fd4:	8121c83a 	sub	r16,r16,r4
   43fd8:	10000226 	beq	r2,zero,43fe4 <_fflush_r+0xa4>
   43fdc:	88800f17 	ldw	r2,60(r17)
   43fe0:	80a1c83a 	sub	r16,r16,r2
   43fe4:	89400717 	ldw	r5,28(r17)
   43fe8:	9809883a 	mov	r4,r19
   43fec:	800d883a 	mov	r6,r16
   43ff0:	000f883a 	mov	r7,zero
   43ff4:	183ee83a 	callr	r3
   43ff8:	8080281e 	bne	r16,r2,4409c <_fflush_r+0x15c>
   43ffc:	8880030b 	ldhu	r2,12(r17)
   44000:	88c00417 	ldw	r3,16(r17)
   44004:	88000115 	stw	zero,4(r17)
   44008:	113dffcc 	andi	r4,r2,63487
   4400c:	1084000c 	andi	r2,r2,4096
   44010:	10bfffcc 	andi	r2,r2,65535
   44014:	10a0001c 	xori	r2,r2,32768
   44018:	8900030d 	sth	r4,12(r17)
   4401c:	88c00015 	stw	r3,0(r17)
   44020:	10a00004 	addi	r2,r2,-32768
   44024:	10002c1e 	bne	r2,zero,440d8 <_fflush_r+0x198>
   44028:	0005883a 	mov	r2,zero
   4402c:	dfc00417 	ldw	ra,16(sp)
   44030:	dcc00317 	ldw	r19,12(sp)
   44034:	dc800217 	ldw	r18,8(sp)
   44038:	dc400117 	ldw	r17,4(sp)
   4403c:	dc000017 	ldw	r16,0(sp)
   44040:	dec00504 	addi	sp,sp,20
   44044:	f800283a 	ret
   44048:	8c800417 	ldw	r18,16(r17)
   4404c:	903ff626 	beq	r18,zero,44028 <_fflush_r+0xe8>
   44050:	8c000017 	ldw	r16,0(r17)
   44054:	108000cc 	andi	r2,r2,3
   44058:	8c800015 	stw	r18,0(r17)
   4405c:	84a1c83a 	sub	r16,r16,r18
   44060:	10001b1e 	bne	r2,zero,440d0 <_fflush_r+0x190>
   44064:	88800517 	ldw	r2,20(r17)
   44068:	88800215 	stw	r2,8(r17)
   4406c:	04000316 	blt	zero,r16,4407c <_fflush_r+0x13c>
   44070:	003fed06 	br	44028 <_fflush_r+0xe8>
   44074:	90a5883a 	add	r18,r18,r2
   44078:	043feb0e 	bge	zero,r16,44028 <_fflush_r+0xe8>
   4407c:	88800917 	ldw	r2,36(r17)
   44080:	89400717 	ldw	r5,28(r17)
   44084:	800f883a 	mov	r7,r16
   44088:	900d883a 	mov	r6,r18
   4408c:	9809883a 	mov	r4,r19
   44090:	103ee83a 	callr	r2
   44094:	80a1c83a 	sub	r16,r16,r2
   44098:	00bff616 	blt	zero,r2,44074 <_fflush_r+0x134>
   4409c:	88c0030b 	ldhu	r3,12(r17)
   440a0:	00bfffc4 	movi	r2,-1
   440a4:	18c01014 	ori	r3,r3,64
   440a8:	88c0030d 	sth	r3,12(r17)
   440ac:	dfc00417 	ldw	ra,16(sp)
   440b0:	dcc00317 	ldw	r19,12(sp)
   440b4:	dc800217 	ldw	r18,8(sp)
   440b8:	dc400117 	ldw	r17,4(sp)
   440bc:	dc000017 	ldw	r16,0(sp)
   440c0:	dec00504 	addi	sp,sp,20
   440c4:	f800283a 	ret
   440c8:	00441e80 	call	441e8 <__sinit>
   440cc:	003fa706 	br	43f6c <_fflush_r+0x2c>
   440d0:	0005883a 	mov	r2,zero
   440d4:	003fe406 	br	44068 <_fflush_r+0x128>
   440d8:	8c001415 	stw	r16,80(r17)
   440dc:	003fd206 	br	44028 <_fflush_r+0xe8>
   440e0:	88c00f17 	ldw	r3,60(r17)
   440e4:	00ffac16 	blt	zero,r3,43f98 <_fflush_r+0x58>
   440e8:	003fcf06 	br	44028 <_fflush_r+0xe8>
   440ec:	89400717 	ldw	r5,28(r17)
   440f0:	9809883a 	mov	r4,r19
   440f4:	000d883a 	mov	r6,zero
   440f8:	01c00044 	movi	r7,1
   440fc:	183ee83a 	callr	r3
   44100:	1021883a 	mov	r16,r2
   44104:	00bfffc4 	movi	r2,-1
   44108:	80800326 	beq	r16,r2,44118 <_fflush_r+0x1d8>
   4410c:	8940030b 	ldhu	r5,12(r17)
   44110:	88c00a17 	ldw	r3,40(r17)
   44114:	003fa806 	br	43fb8 <_fflush_r+0x78>
   44118:	98c00017 	ldw	r3,0(r19)
   4411c:	00800744 	movi	r2,29
   44120:	18bfde1e 	bne	r3,r2,4409c <_fflush_r+0x15c>
   44124:	003fc006 	br	44028 <_fflush_r+0xe8>

00044128 <fflush>:
   44128:	200b883a 	mov	r5,r4
   4412c:	20000426 	beq	r4,zero,44140 <fflush+0x18>
   44130:	00800174 	movhi	r2,5
   44134:	10b8a504 	addi	r2,r2,-7532
   44138:	11000017 	ldw	r4,0(r2)
   4413c:	0043f401 	jmpi	43f40 <_fflush_r>
   44140:	00800174 	movhi	r2,5
   44144:	10b8a404 	addi	r2,r2,-7536
   44148:	11000017 	ldw	r4,0(r2)
   4414c:	01400134 	movhi	r5,4
   44150:	294fd004 	addi	r5,r5,16192
   44154:	0044dc81 	jmpi	44dc8 <_fwalk_reent>

00044158 <__fp_lock>:
   44158:	0005883a 	mov	r2,zero
   4415c:	f800283a 	ret

00044160 <__fp_unlock>:
   44160:	0005883a 	mov	r2,zero
   44164:	f800283a 	ret

00044168 <_cleanup_r>:
   44168:	01400134 	movhi	r5,4
   4416c:	295e0804 	addi	r5,r5,30752
   44170:	0044d201 	jmpi	44d20 <_fwalk>

00044174 <__sfmoreglue>:
   44174:	defffc04 	addi	sp,sp,-16
   44178:	dc400115 	stw	r17,4(sp)
   4417c:	2c401724 	muli	r17,r5,92
   44180:	dc800215 	stw	r18,8(sp)
   44184:	2825883a 	mov	r18,r5
   44188:	89400304 	addi	r5,r17,12
   4418c:	dc000015 	stw	r16,0(sp)
   44190:	dfc00315 	stw	ra,12(sp)
   44194:	00451040 	call	45104 <_malloc_r>
   44198:	1021883a 	mov	r16,r2
   4419c:	10000726 	beq	r2,zero,441bc <__sfmoreglue+0x48>
   441a0:	11000304 	addi	r4,r2,12
   441a4:	10000015 	stw	zero,0(r2)
   441a8:	14800115 	stw	r18,4(r2)
   441ac:	11000215 	stw	r4,8(r2)
   441b0:	000b883a 	mov	r5,zero
   441b4:	880d883a 	mov	r6,r17
   441b8:	0045ba00 	call	45ba0 <memset>
   441bc:	8005883a 	mov	r2,r16
   441c0:	dfc00317 	ldw	ra,12(sp)
   441c4:	dc800217 	ldw	r18,8(sp)
   441c8:	dc400117 	ldw	r17,4(sp)
   441cc:	dc000017 	ldw	r16,0(sp)
   441d0:	dec00404 	addi	sp,sp,16
   441d4:	f800283a 	ret

000441d8 <_cleanup>:
   441d8:	00800174 	movhi	r2,5
   441dc:	10b8a404 	addi	r2,r2,-7536
   441e0:	11000017 	ldw	r4,0(r2)
   441e4:	00441681 	jmpi	44168 <_cleanup_r>

000441e8 <__sinit>:
   441e8:	20800e17 	ldw	r2,56(r4)
   441ec:	1000401e 	bne	r2,zero,442f0 <__sinit+0x108>
   441f0:	21400117 	ldw	r5,4(r4)
   441f4:	01800134 	movhi	r6,4
   441f8:	31905a04 	addi	r6,r6,16744
   441fc:	20c00217 	ldw	r3,8(r4)
   44200:	21800f15 	stw	r6,60(r4)
   44204:	2080bb04 	addi	r2,r4,748
   44208:	02400044 	movi	r9,1
   4420c:	018000c4 	movi	r6,3
   44210:	2180b915 	stw	r6,740(r4)
   44214:	2080ba15 	stw	r2,744(r4)
   44218:	22400e15 	stw	r9,56(r4)
   4421c:	20800317 	ldw	r2,12(r4)
   44220:	2000b815 	stw	zero,736(r4)
   44224:	02000134 	movhi	r8,4
   44228:	421cba04 	addi	r8,r8,29416
   4422c:	01c00134 	movhi	r7,4
   44230:	39dccf04 	addi	r7,r7,29500
   44234:	01800134 	movhi	r6,4
   44238:	319cf104 	addi	r6,r6,29636
   4423c:	01000134 	movhi	r4,4
   44240:	211d0804 	addi	r4,r4,29728
   44244:	02800104 	movi	r10,4
   44248:	28000015 	stw	zero,0(r5)
   4424c:	28000115 	stw	zero,4(r5)
   44250:	28000215 	stw	zero,8(r5)
   44254:	2a80030d 	sth	r10,12(r5)
   44258:	2800038d 	sth	zero,14(r5)
   4425c:	28000415 	stw	zero,16(r5)
   44260:	28000515 	stw	zero,20(r5)
   44264:	28000615 	stw	zero,24(r5)
   44268:	29400715 	stw	r5,28(r5)
   4426c:	2a000815 	stw	r8,32(r5)
   44270:	29c00915 	stw	r7,36(r5)
   44274:	29800a15 	stw	r6,40(r5)
   44278:	29000b15 	stw	r4,44(r5)
   4427c:	01400284 	movi	r5,10
   44280:	18000015 	stw	zero,0(r3)
   44284:	18000115 	stw	zero,4(r3)
   44288:	18000215 	stw	zero,8(r3)
   4428c:	1940030d 	sth	r5,12(r3)
   44290:	1a40038d 	sth	r9,14(r3)
   44294:	18000415 	stw	zero,16(r3)
   44298:	18000515 	stw	zero,20(r3)
   4429c:	18000615 	stw	zero,24(r3)
   442a0:	18c00715 	stw	r3,28(r3)
   442a4:	1a000815 	stw	r8,32(r3)
   442a8:	19c00915 	stw	r7,36(r3)
   442ac:	19800a15 	stw	r6,40(r3)
   442b0:	19000b15 	stw	r4,44(r3)
   442b4:	00c00484 	movi	r3,18
   442b8:	10c0030d 	sth	r3,12(r2)
   442bc:	00c00084 	movi	r3,2
   442c0:	10000015 	stw	zero,0(r2)
   442c4:	10000115 	stw	zero,4(r2)
   442c8:	10000215 	stw	zero,8(r2)
   442cc:	10c0038d 	sth	r3,14(r2)
   442d0:	10000415 	stw	zero,16(r2)
   442d4:	10000515 	stw	zero,20(r2)
   442d8:	10000615 	stw	zero,24(r2)
   442dc:	10800715 	stw	r2,28(r2)
   442e0:	12000815 	stw	r8,32(r2)
   442e4:	11c00915 	stw	r7,36(r2)
   442e8:	11800a15 	stw	r6,40(r2)
   442ec:	11000b15 	stw	r4,44(r2)
   442f0:	f800283a 	ret

000442f4 <__sfp>:
   442f4:	defffc04 	addi	sp,sp,-16
   442f8:	00800174 	movhi	r2,5
   442fc:	10b8a404 	addi	r2,r2,-7536
   44300:	dc400115 	stw	r17,4(sp)
   44304:	14400017 	ldw	r17,0(r2)
   44308:	dc800215 	stw	r18,8(sp)
   4430c:	dfc00315 	stw	ra,12(sp)
   44310:	88800e17 	ldw	r2,56(r17)
   44314:	dc000015 	stw	r16,0(sp)
   44318:	2025883a 	mov	r18,r4
   4431c:	10002826 	beq	r2,zero,443c0 <__sfp+0xcc>
   44320:	8c40b804 	addi	r17,r17,736
   44324:	043fffc4 	movi	r16,-1
   44328:	89400117 	ldw	r5,4(r17)
   4432c:	88800217 	ldw	r2,8(r17)
   44330:	297fffc4 	addi	r5,r5,-1
   44334:	28000a16 	blt	r5,zero,44360 <__sfp+0x6c>
   44338:	10c0030f 	ldh	r3,12(r2)
   4433c:	18000c26 	beq	r3,zero,44370 <__sfp+0x7c>
   44340:	10c01a04 	addi	r3,r2,104
   44344:	00000206 	br	44350 <__sfp+0x5c>
   44348:	19bfe90f 	ldh	r6,-92(r3)
   4434c:	30000826 	beq	r6,zero,44370 <__sfp+0x7c>
   44350:	297fffc4 	addi	r5,r5,-1
   44354:	18bffd04 	addi	r2,r3,-12
   44358:	18c01704 	addi	r3,r3,92
   4435c:	2c3ffa1e 	bne	r5,r16,44348 <__sfp+0x54>
   44360:	88800017 	ldw	r2,0(r17)
   44364:	10001926 	beq	r2,zero,443cc <__sfp+0xd8>
   44368:	1023883a 	mov	r17,r2
   4436c:	003fee06 	br	44328 <__sfp+0x34>
   44370:	00ffffc4 	movi	r3,-1
   44374:	10c0038d 	sth	r3,14(r2)
   44378:	00c00044 	movi	r3,1
   4437c:	10c0030d 	sth	r3,12(r2)
   44380:	10000015 	stw	zero,0(r2)
   44384:	10000215 	stw	zero,8(r2)
   44388:	10000115 	stw	zero,4(r2)
   4438c:	10000415 	stw	zero,16(r2)
   44390:	10000515 	stw	zero,20(r2)
   44394:	10000615 	stw	zero,24(r2)
   44398:	10000c15 	stw	zero,48(r2)
   4439c:	10000d15 	stw	zero,52(r2)
   443a0:	10001115 	stw	zero,68(r2)
   443a4:	10001215 	stw	zero,72(r2)
   443a8:	dfc00317 	ldw	ra,12(sp)
   443ac:	dc800217 	ldw	r18,8(sp)
   443b0:	dc400117 	ldw	r17,4(sp)
   443b4:	dc000017 	ldw	r16,0(sp)
   443b8:	dec00404 	addi	sp,sp,16
   443bc:	f800283a 	ret
   443c0:	8809883a 	mov	r4,r17
   443c4:	00441e80 	call	441e8 <__sinit>
   443c8:	003fd506 	br	44320 <__sfp+0x2c>
   443cc:	9009883a 	mov	r4,r18
   443d0:	01400104 	movi	r5,4
   443d4:	00441740 	call	44174 <__sfmoreglue>
   443d8:	88800015 	stw	r2,0(r17)
   443dc:	103fe21e 	bne	r2,zero,44368 <__sfp+0x74>
   443e0:	00800304 	movi	r2,12
   443e4:	90800015 	stw	r2,0(r18)
   443e8:	0005883a 	mov	r2,zero
   443ec:	003fee06 	br	443a8 <__sfp+0xb4>

000443f0 <__sfp_lock_acquire>:
   443f0:	f800283a 	ret

000443f4 <__sfp_lock_release>:
   443f4:	f800283a 	ret

000443f8 <__sinit_lock_acquire>:
   443f8:	f800283a 	ret

000443fc <__sinit_lock_release>:
   443fc:	f800283a 	ret

00044400 <__fp_lock_all>:
   44400:	00800174 	movhi	r2,5
   44404:	10b8a504 	addi	r2,r2,-7532
   44408:	11000017 	ldw	r4,0(r2)
   4440c:	01400134 	movhi	r5,4
   44410:	29505604 	addi	r5,r5,16728
   44414:	0044d201 	jmpi	44d20 <_fwalk>

00044418 <__fp_unlock_all>:
   44418:	00800174 	movhi	r2,5
   4441c:	10b8a504 	addi	r2,r2,-7532
   44420:	11000017 	ldw	r4,0(r2)
   44424:	01400134 	movhi	r5,4
   44428:	29505804 	addi	r5,r5,16736
   4442c:	0044d201 	jmpi	44d20 <_fwalk>

00044430 <_malloc_trim_r>:
   44430:	defffb04 	addi	sp,sp,-20
   44434:	dcc00315 	stw	r19,12(sp)
   44438:	dc800215 	stw	r18,8(sp)
   4443c:	dc400115 	stw	r17,4(sp)
   44440:	dc000015 	stw	r16,0(sp)
   44444:	2827883a 	mov	r19,r5
   44448:	dfc00415 	stw	ra,16(sp)
   4444c:	04400174 	movhi	r17,5
   44450:	8c732004 	addi	r17,r17,-13184
   44454:	2021883a 	mov	r16,r4
   44458:	0049dac0 	call	49dac <__malloc_lock>
   4445c:	88800217 	ldw	r2,8(r17)
   44460:	14800117 	ldw	r18,4(r2)
   44464:	00bfff04 	movi	r2,-4
   44468:	90a4703a 	and	r18,r18,r2
   4446c:	9083fbc4 	addi	r2,r18,4079
   44470:	14e7c83a 	sub	r19,r2,r19
   44474:	9826d33a 	srli	r19,r19,12
   44478:	0083ffc4 	movi	r2,4095
   4447c:	9cffffc4 	addi	r19,r19,-1
   44480:	9826933a 	slli	r19,r19,12
   44484:	14c0060e 	bge	r2,r19,444a0 <_malloc_trim_r+0x70>
   44488:	8009883a 	mov	r4,r16
   4448c:	000b883a 	mov	r5,zero
   44490:	00472840 	call	47284 <_sbrk_r>
   44494:	88c00217 	ldw	r3,8(r17)
   44498:	1c87883a 	add	r3,r3,r18
   4449c:	10c00a26 	beq	r2,r3,444c8 <_malloc_trim_r+0x98>
   444a0:	8009883a 	mov	r4,r16
   444a4:	0049dcc0 	call	49dcc <__malloc_unlock>
   444a8:	0005883a 	mov	r2,zero
   444ac:	dfc00417 	ldw	ra,16(sp)
   444b0:	dcc00317 	ldw	r19,12(sp)
   444b4:	dc800217 	ldw	r18,8(sp)
   444b8:	dc400117 	ldw	r17,4(sp)
   444bc:	dc000017 	ldw	r16,0(sp)
   444c0:	dec00504 	addi	sp,sp,20
   444c4:	f800283a 	ret
   444c8:	8009883a 	mov	r4,r16
   444cc:	04cbc83a 	sub	r5,zero,r19
   444d0:	00472840 	call	47284 <_sbrk_r>
   444d4:	00ffffc4 	movi	r3,-1
   444d8:	10c01326 	beq	r2,r3,44528 <_malloc_trim_r+0xf8>
   444dc:	00800174 	movhi	r2,5
   444e0:	10bf5604 	addi	r2,r2,-680
   444e4:	11000017 	ldw	r4,0(r2)
   444e8:	88c00217 	ldw	r3,8(r17)
   444ec:	94e5c83a 	sub	r18,r18,r19
   444f0:	94800054 	ori	r18,r18,1
   444f4:	24e7c83a 	sub	r19,r4,r19
   444f8:	1c800115 	stw	r18,4(r3)
   444fc:	8009883a 	mov	r4,r16
   44500:	14c00015 	stw	r19,0(r2)
   44504:	0049dcc0 	call	49dcc <__malloc_unlock>
   44508:	00800044 	movi	r2,1
   4450c:	dfc00417 	ldw	ra,16(sp)
   44510:	dcc00317 	ldw	r19,12(sp)
   44514:	dc800217 	ldw	r18,8(sp)
   44518:	dc400117 	ldw	r17,4(sp)
   4451c:	dc000017 	ldw	r16,0(sp)
   44520:	dec00504 	addi	sp,sp,20
   44524:	f800283a 	ret
   44528:	8009883a 	mov	r4,r16
   4452c:	000b883a 	mov	r5,zero
   44530:	00472840 	call	47284 <_sbrk_r>
   44534:	88c00217 	ldw	r3,8(r17)
   44538:	014003c4 	movi	r5,15
   4453c:	10c9c83a 	sub	r4,r2,r3
   44540:	293fd70e 	bge	r5,r4,444a0 <_malloc_trim_r+0x70>
   44544:	01400174 	movhi	r5,5
   44548:	2978a704 	addi	r5,r5,-7524
   4454c:	29400017 	ldw	r5,0(r5)
   44550:	21000054 	ori	r4,r4,1
   44554:	19000115 	stw	r4,4(r3)
   44558:	1145c83a 	sub	r2,r2,r5
   4455c:	01400174 	movhi	r5,5
   44560:	297f5604 	addi	r5,r5,-680
   44564:	28800015 	stw	r2,0(r5)
   44568:	003fcd06 	br	444a0 <_malloc_trim_r+0x70>

0004456c <_free_r>:
   4456c:	defffd04 	addi	sp,sp,-12
   44570:	dc400115 	stw	r17,4(sp)
   44574:	dc000015 	stw	r16,0(sp)
   44578:	dfc00215 	stw	ra,8(sp)
   4457c:	2821883a 	mov	r16,r5
   44580:	2023883a 	mov	r17,r4
   44584:	28004b26 	beq	r5,zero,446b4 <_free_r+0x148>
   44588:	0049dac0 	call	49dac <__malloc_lock>
   4458c:	823fff17 	ldw	r8,-4(r16)
   44590:	00bfff84 	movi	r2,-2
   44594:	81bffe04 	addi	r6,r16,-8
   44598:	4084703a 	and	r2,r8,r2
   4459c:	3087883a 	add	r3,r6,r2
   445a0:	01400174 	movhi	r5,5
   445a4:	29732004 	addi	r5,r5,-13184
   445a8:	1a400117 	ldw	r9,4(r3)
   445ac:	29000217 	ldw	r4,8(r5)
   445b0:	01ffff04 	movi	r7,-4
   445b4:	49ce703a 	and	r7,r9,r7
   445b8:	20c06526 	beq	r4,r3,44750 <_free_r+0x1e4>
   445bc:	19c00115 	stw	r7,4(r3)
   445c0:	4200004c 	andi	r8,r8,1
   445c4:	40003026 	beq	r8,zero,44688 <_free_r+0x11c>
   445c8:	0009883a 	mov	r4,zero
   445cc:	19d1883a 	add	r8,r3,r7
   445d0:	42000117 	ldw	r8,4(r8)
   445d4:	4200004c 	andi	r8,r8,1
   445d8:	4000061e 	bne	r8,zero,445f4 <_free_r+0x88>
   445dc:	11c5883a 	add	r2,r2,r7
   445e0:	19c00217 	ldw	r7,8(r3)
   445e4:	20004e26 	beq	r4,zero,44720 <_free_r+0x1b4>
   445e8:	18c00317 	ldw	r3,12(r3)
   445ec:	38c00315 	stw	r3,12(r7)
   445f0:	19c00215 	stw	r7,8(r3)
   445f4:	11c00054 	ori	r7,r2,1
   445f8:	3087883a 	add	r3,r6,r2
   445fc:	31c00115 	stw	r7,4(r6)
   44600:	18800015 	stw	r2,0(r3)
   44604:	20001a1e 	bne	r4,zero,44670 <_free_r+0x104>
   44608:	00c07fc4 	movi	r3,511
   4460c:	18802e2e 	bgeu	r3,r2,446c8 <_free_r+0x15c>
   44610:	1006d27a 	srli	r3,r2,9
   44614:	01000104 	movi	r4,4
   44618:	20c06636 	bltu	r4,r3,447b4 <_free_r+0x248>
   4461c:	1008d1ba 	srli	r4,r2,6
   44620:	21000e04 	addi	r4,r4,56
   44624:	210f883a 	add	r7,r4,r4
   44628:	39cf883a 	add	r7,r7,r7
   4462c:	39cf883a 	add	r7,r7,r7
   44630:	29cf883a 	add	r7,r5,r7
   44634:	38c00217 	ldw	r3,8(r7)
   44638:	01400174 	movhi	r5,5
   4463c:	29732004 	addi	r5,r5,-13184
   44640:	19c06126 	beq	r3,r7,447c8 <_free_r+0x25c>
   44644:	013fff04 	movi	r4,-4
   44648:	19400117 	ldw	r5,4(r3)
   4464c:	290a703a 	and	r5,r5,r4
   44650:	1140022e 	bgeu	r2,r5,4465c <_free_r+0xf0>
   44654:	18c00217 	ldw	r3,8(r3)
   44658:	38fffb1e 	bne	r7,r3,44648 <_free_r+0xdc>
   4465c:	18800317 	ldw	r2,12(r3)
   44660:	30800315 	stw	r2,12(r6)
   44664:	30c00215 	stw	r3,8(r6)
   44668:	11800215 	stw	r6,8(r2)
   4466c:	19800315 	stw	r6,12(r3)
   44670:	8809883a 	mov	r4,r17
   44674:	dfc00217 	ldw	ra,8(sp)
   44678:	dc400117 	ldw	r17,4(sp)
   4467c:	dc000017 	ldw	r16,0(sp)
   44680:	dec00304 	addi	sp,sp,12
   44684:	0049dcc1 	jmpi	49dcc <__malloc_unlock>
   44688:	813ffe17 	ldw	r4,-8(r16)
   4468c:	2a400204 	addi	r9,r5,8
   44690:	310dc83a 	sub	r6,r6,r4
   44694:	32000217 	ldw	r8,8(r6)
   44698:	1105883a 	add	r2,r2,r4
   4469c:	42404326 	beq	r8,r9,447ac <_free_r+0x240>
   446a0:	32400317 	ldw	r9,12(r6)
   446a4:	0009883a 	mov	r4,zero
   446a8:	42400315 	stw	r9,12(r8)
   446ac:	4a000215 	stw	r8,8(r9)
   446b0:	003fc606 	br	445cc <_free_r+0x60>
   446b4:	dfc00217 	ldw	ra,8(sp)
   446b8:	dc400117 	ldw	r17,4(sp)
   446bc:	dc000017 	ldw	r16,0(sp)
   446c0:	dec00304 	addi	sp,sp,12
   446c4:	f800283a 	ret
   446c8:	1004d0fa 	srli	r2,r2,3
   446cc:	02000044 	movi	r8,1
   446d0:	29c00117 	ldw	r7,4(r5)
   446d4:	1087883a 	add	r3,r2,r2
   446d8:	18c7883a 	add	r3,r3,r3
   446dc:	1005d0ba 	srai	r2,r2,2
   446e0:	18c7883a 	add	r3,r3,r3
   446e4:	28c7883a 	add	r3,r5,r3
   446e8:	19000217 	ldw	r4,8(r3)
   446ec:	4084983a 	sll	r2,r8,r2
   446f0:	30c00315 	stw	r3,12(r6)
   446f4:	31000215 	stw	r4,8(r6)
   446f8:	11c4b03a 	or	r2,r2,r7
   446fc:	21800315 	stw	r6,12(r4)
   44700:	8809883a 	mov	r4,r17
   44704:	28800115 	stw	r2,4(r5)
   44708:	19800215 	stw	r6,8(r3)
   4470c:	dfc00217 	ldw	ra,8(sp)
   44710:	dc400117 	ldw	r17,4(sp)
   44714:	dc000017 	ldw	r16,0(sp)
   44718:	dec00304 	addi	sp,sp,12
   4471c:	0049dcc1 	jmpi	49dcc <__malloc_unlock>
   44720:	02000174 	movhi	r8,5
   44724:	42332204 	addi	r8,r8,-13176
   44728:	3a3faf1e 	bne	r7,r8,445e8 <_free_r+0x7c>
   4472c:	29800515 	stw	r6,20(r5)
   44730:	29800415 	stw	r6,16(r5)
   44734:	11000054 	ori	r4,r2,1
   44738:	3087883a 	add	r3,r6,r2
   4473c:	31c00315 	stw	r7,12(r6)
   44740:	31c00215 	stw	r7,8(r6)
   44744:	31000115 	stw	r4,4(r6)
   44748:	18800015 	stw	r2,0(r3)
   4474c:	003fc806 	br	44670 <_free_r+0x104>
   44750:	4200004c 	andi	r8,r8,1
   44754:	3885883a 	add	r2,r7,r2
   44758:	4000071e 	bne	r8,zero,44778 <_free_r+0x20c>
   4475c:	81fffe17 	ldw	r7,-8(r16)
   44760:	31cdc83a 	sub	r6,r6,r7
   44764:	30c00317 	ldw	r3,12(r6)
   44768:	31000217 	ldw	r4,8(r6)
   4476c:	11c5883a 	add	r2,r2,r7
   44770:	20c00315 	stw	r3,12(r4)
   44774:	19000215 	stw	r4,8(r3)
   44778:	00c00174 	movhi	r3,5
   4477c:	18f8a804 	addi	r3,r3,-7520
   44780:	18c00017 	ldw	r3,0(r3)
   44784:	11000054 	ori	r4,r2,1
   44788:	31000115 	stw	r4,4(r6)
   4478c:	29800215 	stw	r6,8(r5)
   44790:	10ffb736 	bltu	r2,r3,44670 <_free_r+0x104>
   44794:	00800174 	movhi	r2,5
   44798:	10bf4e04 	addi	r2,r2,-712
   4479c:	11400017 	ldw	r5,0(r2)
   447a0:	8809883a 	mov	r4,r17
   447a4:	00444300 	call	44430 <_malloc_trim_r>
   447a8:	003fb106 	br	44670 <_free_r+0x104>
   447ac:	01000044 	movi	r4,1
   447b0:	003f8606 	br	445cc <_free_r+0x60>
   447b4:	01000504 	movi	r4,20
   447b8:	20c00b36 	bltu	r4,r3,447e8 <_free_r+0x27c>
   447bc:	190016c4 	addi	r4,r3,91
   447c0:	210f883a 	add	r7,r4,r4
   447c4:	003f9806 	br	44628 <_free_r+0xbc>
   447c8:	2009d0ba 	srai	r4,r4,2
   447cc:	00800044 	movi	r2,1
   447d0:	29c00117 	ldw	r7,4(r5)
   447d4:	1108983a 	sll	r4,r2,r4
   447d8:	1805883a 	mov	r2,r3
   447dc:	21c8b03a 	or	r4,r4,r7
   447e0:	29000115 	stw	r4,4(r5)
   447e4:	003f9e06 	br	44660 <_free_r+0xf4>
   447e8:	01001504 	movi	r4,84
   447ec:	20c00436 	bltu	r4,r3,44800 <_free_r+0x294>
   447f0:	1008d33a 	srli	r4,r2,12
   447f4:	21001b84 	addi	r4,r4,110
   447f8:	210f883a 	add	r7,r4,r4
   447fc:	003f8a06 	br	44628 <_free_r+0xbc>
   44800:	01005504 	movi	r4,340
   44804:	20c00436 	bltu	r4,r3,44818 <_free_r+0x2ac>
   44808:	1008d3fa 	srli	r4,r2,15
   4480c:	21001dc4 	addi	r4,r4,119
   44810:	210f883a 	add	r7,r4,r4
   44814:	003f8406 	br	44628 <_free_r+0xbc>
   44818:	01015504 	movi	r4,1364
   4481c:	20c00436 	bltu	r4,r3,44830 <_free_r+0x2c4>
   44820:	1008d4ba 	srli	r4,r2,18
   44824:	21001f04 	addi	r4,r4,124
   44828:	210f883a 	add	r7,r4,r4
   4482c:	003f7e06 	br	44628 <_free_r+0xbc>
   44830:	01c03f04 	movi	r7,252
   44834:	01001f84 	movi	r4,126
   44838:	003f7b06 	br	44628 <_free_r+0xbc>

0004483c <__sfvwrite_r>:
   4483c:	30800217 	ldw	r2,8(r6)
   44840:	defff504 	addi	sp,sp,-44
   44844:	dd400615 	stw	r21,24(sp)
   44848:	dd000515 	stw	r20,20(sp)
   4484c:	dc000115 	stw	r16,4(sp)
   44850:	dfc00a15 	stw	ra,40(sp)
   44854:	df000915 	stw	fp,36(sp)
   44858:	ddc00815 	stw	r23,32(sp)
   4485c:	dd800715 	stw	r22,28(sp)
   44860:	dcc00415 	stw	r19,16(sp)
   44864:	dc800315 	stw	r18,12(sp)
   44868:	dc400215 	stw	r17,8(sp)
   4486c:	3029883a 	mov	r20,r6
   44870:	202b883a 	mov	r21,r4
   44874:	2821883a 	mov	r16,r5
   44878:	10002126 	beq	r2,zero,44900 <__sfvwrite_r+0xc4>
   4487c:	2880030b 	ldhu	r2,12(r5)
   44880:	10c0020c 	andi	r3,r2,8
   44884:	18ffffcc 	andi	r3,r3,65535
   44888:	18e0001c 	xori	r3,r3,32768
   4488c:	18e00004 	addi	r3,r3,-32768
   44890:	18002826 	beq	r3,zero,44934 <__sfvwrite_r+0xf8>
   44894:	28c00417 	ldw	r3,16(r5)
   44898:	18002626 	beq	r3,zero,44934 <__sfvwrite_r+0xf8>
   4489c:	10c0008c 	andi	r3,r2,2
   448a0:	18ffffcc 	andi	r3,r3,65535
   448a4:	18e0001c 	xori	r3,r3,32768
   448a8:	18e00004 	addi	r3,r3,-32768
   448ac:	a4400017 	ldw	r17,0(r20)
   448b0:	18002b26 	beq	r3,zero,44960 <__sfvwrite_r+0x124>
   448b4:	0027883a 	mov	r19,zero
   448b8:	0025883a 	mov	r18,zero
   448bc:	05810004 	movi	r22,1024
   448c0:	980d883a 	mov	r6,r19
   448c4:	a809883a 	mov	r4,r21
   448c8:	90004f26 	beq	r18,zero,44a08 <__sfvwrite_r+0x1cc>
   448cc:	900f883a 	mov	r7,r18
   448d0:	81400717 	ldw	r5,28(r16)
   448d4:	b480012e 	bgeu	r22,r18,448dc <__sfvwrite_r+0xa0>
   448d8:	01c10004 	movi	r7,1024
   448dc:	80800917 	ldw	r2,36(r16)
   448e0:	103ee83a 	callr	r2
   448e4:	0080540e 	bge	zero,r2,44a38 <__sfvwrite_r+0x1fc>
   448e8:	a0c00217 	ldw	r3,8(r20)
   448ec:	98a7883a 	add	r19,r19,r2
   448f0:	90a5c83a 	sub	r18,r18,r2
   448f4:	1885c83a 	sub	r2,r3,r2
   448f8:	a0800215 	stw	r2,8(r20)
   448fc:	103ff01e 	bne	r2,zero,448c0 <__sfvwrite_r+0x84>
   44900:	0005883a 	mov	r2,zero
   44904:	dfc00a17 	ldw	ra,40(sp)
   44908:	df000917 	ldw	fp,36(sp)
   4490c:	ddc00817 	ldw	r23,32(sp)
   44910:	dd800717 	ldw	r22,28(sp)
   44914:	dd400617 	ldw	r21,24(sp)
   44918:	dd000517 	ldw	r20,20(sp)
   4491c:	dcc00417 	ldw	r19,16(sp)
   44920:	dc800317 	ldw	r18,12(sp)
   44924:	dc400217 	ldw	r17,8(sp)
   44928:	dc000117 	ldw	r16,4(sp)
   4492c:	dec00b04 	addi	sp,sp,44
   44930:	f800283a 	ret
   44934:	a809883a 	mov	r4,r21
   44938:	800b883a 	mov	r5,r16
   4493c:	00425a80 	call	425a8 <__swsetup_r>
   44940:	1000f01e 	bne	r2,zero,44d04 <__sfvwrite_r+0x4c8>
   44944:	8080030b 	ldhu	r2,12(r16)
   44948:	a4400017 	ldw	r17,0(r20)
   4494c:	10c0008c 	andi	r3,r2,2
   44950:	18ffffcc 	andi	r3,r3,65535
   44954:	18e0001c 	xori	r3,r3,32768
   44958:	18e00004 	addi	r3,r3,-32768
   4495c:	183fd51e 	bne	r3,zero,448b4 <__sfvwrite_r+0x78>
   44960:	10c0004c 	andi	r3,r2,1
   44964:	002d883a 	mov	r22,zero
   44968:	1800381e 	bne	r3,zero,44a4c <__sfvwrite_r+0x210>
   4496c:	0025883a 	mov	r18,zero
   44970:	90002126 	beq	r18,zero,449f8 <__sfvwrite_r+0x1bc>
   44974:	10c0800c 	andi	r3,r2,512
   44978:	18ffffcc 	andi	r3,r3,65535
   4497c:	18e0001c 	xori	r3,r3,32768
   44980:	18e00004 	addi	r3,r3,-32768
   44984:	84c00217 	ldw	r19,8(r16)
   44988:	18006b26 	beq	r3,zero,44b38 <__sfvwrite_r+0x2fc>
   4498c:	980f883a 	mov	r7,r19
   44990:	94c08636 	bltu	r18,r19,44bac <__sfvwrite_r+0x370>
   44994:	10c1200c 	andi	r3,r2,1152
   44998:	18009f1e 	bne	r3,zero,44c18 <__sfvwrite_r+0x3dc>
   4499c:	81000017 	ldw	r4,0(r16)
   449a0:	982f883a 	mov	r23,r19
   449a4:	9039883a 	mov	fp,r18
   449a8:	9027883a 	mov	r19,r18
   449ac:	380d883a 	mov	r6,r7
   449b0:	b00b883a 	mov	r5,r22
   449b4:	d9c00015 	stw	r7,0(sp)
   449b8:	0045a780 	call	45a78 <memmove>
   449bc:	d9c00017 	ldw	r7,0(sp)
   449c0:	81000217 	ldw	r4,8(r16)
   449c4:	80800017 	ldw	r2,0(r16)
   449c8:	25efc83a 	sub	r23,r4,r23
   449cc:	11cf883a 	add	r7,r2,r7
   449d0:	85c00215 	stw	r23,8(r16)
   449d4:	81c00015 	stw	r7,0(r16)
   449d8:	a0800217 	ldw	r2,8(r20)
   449dc:	b72d883a 	add	r22,r22,fp
   449e0:	9725c83a 	sub	r18,r18,fp
   449e4:	14e7c83a 	sub	r19,r2,r19
   449e8:	a4c00215 	stw	r19,8(r20)
   449ec:	983fc426 	beq	r19,zero,44900 <__sfvwrite_r+0xc4>
   449f0:	8080030b 	ldhu	r2,12(r16)
   449f4:	903fdf1e 	bne	r18,zero,44974 <__sfvwrite_r+0x138>
   449f8:	8d800017 	ldw	r22,0(r17)
   449fc:	8c800117 	ldw	r18,4(r17)
   44a00:	8c400204 	addi	r17,r17,8
   44a04:	003fda06 	br	44970 <__sfvwrite_r+0x134>
   44a08:	8cc00017 	ldw	r19,0(r17)
   44a0c:	8c800117 	ldw	r18,4(r17)
   44a10:	8c400204 	addi	r17,r17,8
   44a14:	003faa06 	br	448c0 <__sfvwrite_r+0x84>
   44a18:	0046c240 	call	46c24 <_realloc_r>
   44a1c:	102f883a 	mov	r23,r2
   44a20:	10009f1e 	bne	r2,zero,44ca0 <__sfvwrite_r+0x464>
   44a24:	81400417 	ldw	r5,16(r16)
   44a28:	a809883a 	mov	r4,r21
   44a2c:	004456c0 	call	4456c <_free_r>
   44a30:	00800304 	movi	r2,12
   44a34:	a8800015 	stw	r2,0(r21)
   44a38:	80c0030b 	ldhu	r3,12(r16)
   44a3c:	00bfffc4 	movi	r2,-1
   44a40:	18c01014 	ori	r3,r3,64
   44a44:	80c0030d 	sth	r3,12(r16)
   44a48:	003fae06 	br	44904 <__sfvwrite_r+0xc8>
   44a4c:	0007883a 	mov	r3,zero
   44a50:	0039883a 	mov	fp,zero
   44a54:	0025883a 	mov	r18,zero
   44a58:	90001e26 	beq	r18,zero,44ad4 <__sfvwrite_r+0x298>
   44a5c:	18006526 	beq	r3,zero,44bf4 <__sfvwrite_r+0x3b8>
   44a60:	b02f883a 	mov	r23,r22
   44a64:	9580012e 	bgeu	r18,r22,44a6c <__sfvwrite_r+0x230>
   44a68:	902f883a 	mov	r23,r18
   44a6c:	81000017 	ldw	r4,0(r16)
   44a70:	80800417 	ldw	r2,16(r16)
   44a74:	84c00217 	ldw	r19,8(r16)
   44a78:	81c00517 	ldw	r7,20(r16)
   44a7c:	1100022e 	bgeu	r2,r4,44a88 <__sfvwrite_r+0x24c>
   44a80:	99e7883a 	add	r19,r19,r7
   44a84:	9dc01816 	blt	r19,r23,44ae8 <__sfvwrite_r+0x2ac>
   44a88:	b9c03b16 	blt	r23,r7,44b78 <__sfvwrite_r+0x33c>
   44a8c:	80800917 	ldw	r2,36(r16)
   44a90:	81400717 	ldw	r5,28(r16)
   44a94:	a809883a 	mov	r4,r21
   44a98:	d8c00015 	stw	r3,0(sp)
   44a9c:	e00d883a 	mov	r6,fp
   44aa0:	103ee83a 	callr	r2
   44aa4:	1027883a 	mov	r19,r2
   44aa8:	d8c00017 	ldw	r3,0(sp)
   44aac:	00bfe20e 	bge	zero,r2,44a38 <__sfvwrite_r+0x1fc>
   44ab0:	b4edc83a 	sub	r22,r22,r19
   44ab4:	b0001a26 	beq	r22,zero,44b20 <__sfvwrite_r+0x2e4>
   44ab8:	a0800217 	ldw	r2,8(r20)
   44abc:	e4f9883a 	add	fp,fp,r19
   44ac0:	94e5c83a 	sub	r18,r18,r19
   44ac4:	14e7c83a 	sub	r19,r2,r19
   44ac8:	a4c00215 	stw	r19,8(r20)
   44acc:	983f8c26 	beq	r19,zero,44900 <__sfvwrite_r+0xc4>
   44ad0:	903fe21e 	bne	r18,zero,44a5c <__sfvwrite_r+0x220>
   44ad4:	8f000017 	ldw	fp,0(r17)
   44ad8:	8c800117 	ldw	r18,4(r17)
   44adc:	0007883a 	mov	r3,zero
   44ae0:	8c400204 	addi	r17,r17,8
   44ae4:	003fdc06 	br	44a58 <__sfvwrite_r+0x21c>
   44ae8:	e00b883a 	mov	r5,fp
   44aec:	980d883a 	mov	r6,r19
   44af0:	d8c00015 	stw	r3,0(sp)
   44af4:	0045a780 	call	45a78 <memmove>
   44af8:	80800017 	ldw	r2,0(r16)
   44afc:	a809883a 	mov	r4,r21
   44b00:	800b883a 	mov	r5,r16
   44b04:	14c5883a 	add	r2,r2,r19
   44b08:	80800015 	stw	r2,0(r16)
   44b0c:	0043f400 	call	43f40 <_fflush_r>
   44b10:	d8c00017 	ldw	r3,0(sp)
   44b14:	103fc81e 	bne	r2,zero,44a38 <__sfvwrite_r+0x1fc>
   44b18:	b4edc83a 	sub	r22,r22,r19
   44b1c:	b03fe61e 	bne	r22,zero,44ab8 <__sfvwrite_r+0x27c>
   44b20:	a809883a 	mov	r4,r21
   44b24:	800b883a 	mov	r5,r16
   44b28:	0043f400 	call	43f40 <_fflush_r>
   44b2c:	103fc21e 	bne	r2,zero,44a38 <__sfvwrite_r+0x1fc>
   44b30:	0007883a 	mov	r3,zero
   44b34:	003fe006 	br	44ab8 <__sfvwrite_r+0x27c>
   44b38:	81000017 	ldw	r4,0(r16)
   44b3c:	80800417 	ldw	r2,16(r16)
   44b40:	1100022e 	bgeu	r2,r4,44b4c <__sfvwrite_r+0x310>
   44b44:	9839883a 	mov	fp,r19
   44b48:	9c806036 	bltu	r19,r18,44ccc <__sfvwrite_r+0x490>
   44b4c:	81c00517 	ldw	r7,20(r16)
   44b50:	91c01c36 	bltu	r18,r7,44bc4 <__sfvwrite_r+0x388>
   44b54:	80800917 	ldw	r2,36(r16)
   44b58:	81400717 	ldw	r5,28(r16)
   44b5c:	a809883a 	mov	r4,r21
   44b60:	b00d883a 	mov	r6,r22
   44b64:	103ee83a 	callr	r2
   44b68:	1027883a 	mov	r19,r2
   44b6c:	00bfb20e 	bge	zero,r2,44a38 <__sfvwrite_r+0x1fc>
   44b70:	1039883a 	mov	fp,r2
   44b74:	003f9806 	br	449d8 <__sfvwrite_r+0x19c>
   44b78:	b80d883a 	mov	r6,r23
   44b7c:	e00b883a 	mov	r5,fp
   44b80:	d8c00015 	stw	r3,0(sp)
   44b84:	0045a780 	call	45a78 <memmove>
   44b88:	80800217 	ldw	r2,8(r16)
   44b8c:	81000017 	ldw	r4,0(r16)
   44b90:	b827883a 	mov	r19,r23
   44b94:	15c5c83a 	sub	r2,r2,r23
   44b98:	25ef883a 	add	r23,r4,r23
   44b9c:	80800215 	stw	r2,8(r16)
   44ba0:	85c00015 	stw	r23,0(r16)
   44ba4:	d8c00017 	ldw	r3,0(sp)
   44ba8:	003fc106 	br	44ab0 <__sfvwrite_r+0x274>
   44bac:	81000017 	ldw	r4,0(r16)
   44bb0:	902f883a 	mov	r23,r18
   44bb4:	9039883a 	mov	fp,r18
   44bb8:	9027883a 	mov	r19,r18
   44bbc:	900f883a 	mov	r7,r18
   44bc0:	003f7a06 	br	449ac <__sfvwrite_r+0x170>
   44bc4:	b00b883a 	mov	r5,r22
   44bc8:	900d883a 	mov	r6,r18
   44bcc:	0045a780 	call	45a78 <memmove>
   44bd0:	80c00217 	ldw	r3,8(r16)
   44bd4:	80800017 	ldw	r2,0(r16)
   44bd8:	9027883a 	mov	r19,r18
   44bdc:	1c87c83a 	sub	r3,r3,r18
   44be0:	1485883a 	add	r2,r2,r18
   44be4:	80c00215 	stw	r3,8(r16)
   44be8:	80800015 	stw	r2,0(r16)
   44bec:	9039883a 	mov	fp,r18
   44bf0:	003f7906 	br	449d8 <__sfvwrite_r+0x19c>
   44bf4:	e009883a 	mov	r4,fp
   44bf8:	01400284 	movi	r5,10
   44bfc:	900d883a 	mov	r6,r18
   44c00:	00458880 	call	45888 <memchr>
   44c04:	10003c26 	beq	r2,zero,44cf8 <__sfvwrite_r+0x4bc>
   44c08:	15800044 	addi	r22,r2,1
   44c0c:	b72dc83a 	sub	r22,r22,fp
   44c10:	00c00044 	movi	r3,1
   44c14:	003f9206 	br	44a60 <__sfvwrite_r+0x224>
   44c18:	81000517 	ldw	r4,20(r16)
   44c1c:	81400417 	ldw	r5,16(r16)
   44c20:	80c00017 	ldw	r3,0(r16)
   44c24:	210d883a 	add	r6,r4,r4
   44c28:	3109883a 	add	r4,r6,r4
   44c2c:	2026d7fa 	srli	r19,r4,31
   44c30:	1979c83a 	sub	fp,r3,r5
   44c34:	e1800044 	addi	r6,fp,1
   44c38:	9909883a 	add	r4,r19,r4
   44c3c:	2027d07a 	srai	r19,r4,1
   44c40:	3489883a 	add	r4,r6,r18
   44c44:	980d883a 	mov	r6,r19
   44c48:	9900022e 	bgeu	r19,r4,44c54 <__sfvwrite_r+0x418>
   44c4c:	2027883a 	mov	r19,r4
   44c50:	200d883a 	mov	r6,r4
   44c54:	1081000c 	andi	r2,r2,1024
   44c58:	10bfffcc 	andi	r2,r2,65535
   44c5c:	10a0001c 	xori	r2,r2,32768
   44c60:	10a00004 	addi	r2,r2,-32768
   44c64:	a809883a 	mov	r4,r21
   44c68:	103f6b26 	beq	r2,zero,44a18 <__sfvwrite_r+0x1dc>
   44c6c:	300b883a 	mov	r5,r6
   44c70:	00451040 	call	45104 <_malloc_r>
   44c74:	102f883a 	mov	r23,r2
   44c78:	103f6d26 	beq	r2,zero,44a30 <__sfvwrite_r+0x1f4>
   44c7c:	81400417 	ldw	r5,16(r16)
   44c80:	1009883a 	mov	r4,r2
   44c84:	e00d883a 	mov	r6,fp
   44c88:	00459800 	call	45980 <memcpy>
   44c8c:	8080030b 	ldhu	r2,12(r16)
   44c90:	00fedfc4 	movi	r3,-1153
   44c94:	10c4703a 	and	r2,r2,r3
   44c98:	10802014 	ori	r2,r2,128
   44c9c:	8080030d 	sth	r2,12(r16)
   44ca0:	bf09883a 	add	r4,r23,fp
   44ca4:	9f07c83a 	sub	r3,r19,fp
   44ca8:	85c00415 	stw	r23,16(r16)
   44cac:	84c00515 	stw	r19,20(r16)
   44cb0:	81000015 	stw	r4,0(r16)
   44cb4:	902f883a 	mov	r23,r18
   44cb8:	80c00215 	stw	r3,8(r16)
   44cbc:	9039883a 	mov	fp,r18
   44cc0:	9027883a 	mov	r19,r18
   44cc4:	900f883a 	mov	r7,r18
   44cc8:	003f3806 	br	449ac <__sfvwrite_r+0x170>
   44ccc:	b00b883a 	mov	r5,r22
   44cd0:	980d883a 	mov	r6,r19
   44cd4:	0045a780 	call	45a78 <memmove>
   44cd8:	80800017 	ldw	r2,0(r16)
   44cdc:	a809883a 	mov	r4,r21
   44ce0:	800b883a 	mov	r5,r16
   44ce4:	14c5883a 	add	r2,r2,r19
   44ce8:	80800015 	stw	r2,0(r16)
   44cec:	0043f400 	call	43f40 <_fflush_r>
   44cf0:	103f3926 	beq	r2,zero,449d8 <__sfvwrite_r+0x19c>
   44cf4:	003f5006 	br	44a38 <__sfvwrite_r+0x1fc>
   44cf8:	95800044 	addi	r22,r18,1
   44cfc:	00c00044 	movi	r3,1
   44d00:	003f5706 	br	44a60 <__sfvwrite_r+0x224>
   44d04:	80c0030b 	ldhu	r3,12(r16)
   44d08:	00bfffc4 	movi	r2,-1
   44d0c:	18c01014 	ori	r3,r3,64
   44d10:	80c0030d 	sth	r3,12(r16)
   44d14:	00c00244 	movi	r3,9
   44d18:	a8c00015 	stw	r3,0(r21)
   44d1c:	003ef906 	br	44904 <__sfvwrite_r+0xc8>

00044d20 <_fwalk>:
   44d20:	defff904 	addi	sp,sp,-28
   44d24:	dcc00315 	stw	r19,12(sp)
   44d28:	24c0b804 	addi	r19,r4,736
   44d2c:	dd400515 	stw	r21,20(sp)
   44d30:	dd000415 	stw	r20,16(sp)
   44d34:	dfc00615 	stw	ra,24(sp)
   44d38:	dc800215 	stw	r18,8(sp)
   44d3c:	dc400115 	stw	r17,4(sp)
   44d40:	dc000015 	stw	r16,0(sp)
   44d44:	282b883a 	mov	r21,r5
   44d48:	0029883a 	mov	r20,zero
   44d4c:	00443f00 	call	443f0 <__sfp_lock_acquire>
   44d50:	98001226 	beq	r19,zero,44d9c <_fwalk+0x7c>
   44d54:	04bfffc4 	movi	r18,-1
   44d58:	9c400117 	ldw	r17,4(r19)
   44d5c:	9c000217 	ldw	r16,8(r19)
   44d60:	8c7fffc4 	addi	r17,r17,-1
   44d64:	88000b16 	blt	r17,zero,44d94 <_fwalk+0x74>
   44d68:	84000304 	addi	r16,r16,12
   44d6c:	80c0000f 	ldh	r3,0(r16)
   44d70:	8c7fffc4 	addi	r17,r17,-1
   44d74:	813ffd04 	addi	r4,r16,-12
   44d78:	18000426 	beq	r3,zero,44d8c <_fwalk+0x6c>
   44d7c:	80c0008f 	ldh	r3,2(r16)
   44d80:	1c800226 	beq	r3,r18,44d8c <_fwalk+0x6c>
   44d84:	a83ee83a 	callr	r21
   44d88:	a0a8b03a 	or	r20,r20,r2
   44d8c:	84001704 	addi	r16,r16,92
   44d90:	8cbff61e 	bne	r17,r18,44d6c <_fwalk+0x4c>
   44d94:	9cc00017 	ldw	r19,0(r19)
   44d98:	983fef1e 	bne	r19,zero,44d58 <_fwalk+0x38>
   44d9c:	00443f40 	call	443f4 <__sfp_lock_release>
   44da0:	a005883a 	mov	r2,r20
   44da4:	dfc00617 	ldw	ra,24(sp)
   44da8:	dd400517 	ldw	r21,20(sp)
   44dac:	dd000417 	ldw	r20,16(sp)
   44db0:	dcc00317 	ldw	r19,12(sp)
   44db4:	dc800217 	ldw	r18,8(sp)
   44db8:	dc400117 	ldw	r17,4(sp)
   44dbc:	dc000017 	ldw	r16,0(sp)
   44dc0:	dec00704 	addi	sp,sp,28
   44dc4:	f800283a 	ret

00044dc8 <_fwalk_reent>:
   44dc8:	defff804 	addi	sp,sp,-32
   44dcc:	dcc00315 	stw	r19,12(sp)
   44dd0:	24c0b804 	addi	r19,r4,736
   44dd4:	dd800615 	stw	r22,24(sp)
   44dd8:	dd400515 	stw	r21,20(sp)
   44ddc:	dd000415 	stw	r20,16(sp)
   44de0:	dfc00715 	stw	ra,28(sp)
   44de4:	dc800215 	stw	r18,8(sp)
   44de8:	dc400115 	stw	r17,4(sp)
   44dec:	dc000015 	stw	r16,0(sp)
   44df0:	2029883a 	mov	r20,r4
   44df4:	282b883a 	mov	r21,r5
   44df8:	002d883a 	mov	r22,zero
   44dfc:	00443f00 	call	443f0 <__sfp_lock_acquire>
   44e00:	98001326 	beq	r19,zero,44e50 <_fwalk_reent+0x88>
   44e04:	04bfffc4 	movi	r18,-1
   44e08:	9c400117 	ldw	r17,4(r19)
   44e0c:	9c000217 	ldw	r16,8(r19)
   44e10:	8c7fffc4 	addi	r17,r17,-1
   44e14:	88000c16 	blt	r17,zero,44e48 <_fwalk_reent+0x80>
   44e18:	84000304 	addi	r16,r16,12
   44e1c:	80c0000f 	ldh	r3,0(r16)
   44e20:	8c7fffc4 	addi	r17,r17,-1
   44e24:	817ffd04 	addi	r5,r16,-12
   44e28:	18000526 	beq	r3,zero,44e40 <_fwalk_reent+0x78>
   44e2c:	80c0008f 	ldh	r3,2(r16)
   44e30:	a009883a 	mov	r4,r20
   44e34:	1c800226 	beq	r3,r18,44e40 <_fwalk_reent+0x78>
   44e38:	a83ee83a 	callr	r21
   44e3c:	b0acb03a 	or	r22,r22,r2
   44e40:	84001704 	addi	r16,r16,92
   44e44:	8cbff51e 	bne	r17,r18,44e1c <_fwalk_reent+0x54>
   44e48:	9cc00017 	ldw	r19,0(r19)
   44e4c:	983fee1e 	bne	r19,zero,44e08 <_fwalk_reent+0x40>
   44e50:	00443f40 	call	443f4 <__sfp_lock_release>
   44e54:	b005883a 	mov	r2,r22
   44e58:	dfc00717 	ldw	ra,28(sp)
   44e5c:	dd800617 	ldw	r22,24(sp)
   44e60:	dd400517 	ldw	r21,20(sp)
   44e64:	dd000417 	ldw	r20,16(sp)
   44e68:	dcc00317 	ldw	r19,12(sp)
   44e6c:	dc800217 	ldw	r18,8(sp)
   44e70:	dc400117 	ldw	r17,4(sp)
   44e74:	dc000017 	ldw	r16,0(sp)
   44e78:	dec00804 	addi	sp,sp,32
   44e7c:	f800283a 	ret

00044e80 <_setlocale_r>:
   44e80:	defffc04 	addi	sp,sp,-16
   44e84:	dc800215 	stw	r18,8(sp)
   44e88:	dc400115 	stw	r17,4(sp)
   44e8c:	dc000015 	stw	r16,0(sp)
   44e90:	dfc00315 	stw	ra,12(sp)
   44e94:	3021883a 	mov	r16,r6
   44e98:	2023883a 	mov	r17,r4
   44e9c:	2825883a 	mov	r18,r5
   44ea0:	30001626 	beq	r6,zero,44efc <_setlocale_r+0x7c>
   44ea4:	3009883a 	mov	r4,r6
   44ea8:	01400174 	movhi	r5,5
   44eac:	29717304 	addi	r5,r5,-14900
   44eb0:	00474280 	call	47428 <strcmp>
   44eb4:	10000a1e 	bne	r2,zero,44ee0 <_setlocale_r+0x60>
   44eb8:	8c800c15 	stw	r18,48(r17)
   44ebc:	8c000d15 	stw	r16,52(r17)
   44ec0:	00800174 	movhi	r2,5
   44ec4:	10b17304 	addi	r2,r2,-14900
   44ec8:	dfc00317 	ldw	ra,12(sp)
   44ecc:	dc800217 	ldw	r18,8(sp)
   44ed0:	dc400117 	ldw	r17,4(sp)
   44ed4:	dc000017 	ldw	r16,0(sp)
   44ed8:	dec00404 	addi	sp,sp,16
   44edc:	f800283a 	ret
   44ee0:	8009883a 	mov	r4,r16
   44ee4:	01400174 	movhi	r5,5
   44ee8:	29715e04 	addi	r5,r5,-14984
   44eec:	00474280 	call	47428 <strcmp>
   44ef0:	103ff126 	beq	r2,zero,44eb8 <_setlocale_r+0x38>
   44ef4:	0005883a 	mov	r2,zero
   44ef8:	003ff306 	br	44ec8 <_setlocale_r+0x48>
   44efc:	00800174 	movhi	r2,5
   44f00:	10b17304 	addi	r2,r2,-14900
   44f04:	dfc00317 	ldw	ra,12(sp)
   44f08:	dc800217 	ldw	r18,8(sp)
   44f0c:	dc400117 	ldw	r17,4(sp)
   44f10:	dc000017 	ldw	r16,0(sp)
   44f14:	dec00404 	addi	sp,sp,16
   44f18:	f800283a 	ret

00044f1c <__locale_charset>:
   44f1c:	00800174 	movhi	r2,5
   44f20:	10b17404 	addi	r2,r2,-14896
   44f24:	f800283a 	ret

00044f28 <_localeconv_r>:
   44f28:	00800174 	movhi	r2,5
   44f2c:	10b17804 	addi	r2,r2,-14880
   44f30:	f800283a 	ret

00044f34 <setlocale>:
   44f34:	00c00174 	movhi	r3,5
   44f38:	18f8a504 	addi	r3,r3,-7532
   44f3c:	2005883a 	mov	r2,r4
   44f40:	19000017 	ldw	r4,0(r3)
   44f44:	280d883a 	mov	r6,r5
   44f48:	100b883a 	mov	r5,r2
   44f4c:	0044e801 	jmpi	44e80 <_setlocale_r>

00044f50 <localeconv>:
   44f50:	00800174 	movhi	r2,5
   44f54:	10b17804 	addi	r2,r2,-14880
   44f58:	f800283a 	ret

00044f5c <__smakebuf_r>:
   44f5c:	2880030b 	ldhu	r2,12(r5)
   44f60:	deffed04 	addi	sp,sp,-76
   44f64:	dc401015 	stw	r17,64(sp)
   44f68:	10c0008c 	andi	r3,r2,2
   44f6c:	18ffffcc 	andi	r3,r3,65535
   44f70:	18e0001c 	xori	r3,r3,32768
   44f74:	dc000f15 	stw	r16,60(sp)
   44f78:	dfc01215 	stw	ra,72(sp)
   44f7c:	dc801115 	stw	r18,68(sp)
   44f80:	18e00004 	addi	r3,r3,-32768
   44f84:	2821883a 	mov	r16,r5
   44f88:	2023883a 	mov	r17,r4
   44f8c:	1800381e 	bne	r3,zero,45070 <__smakebuf_r+0x114>
   44f90:	2940038f 	ldh	r5,14(r5)
   44f94:	28002d16 	blt	r5,zero,4504c <__smakebuf_r+0xf0>
   44f98:	d80d883a 	mov	r6,sp
   44f9c:	00478340 	call	47834 <_fstat_r>
   44fa0:	10002916 	blt	r2,zero,45048 <__smakebuf_r+0xec>
   44fa4:	d8800117 	ldw	r2,4(sp)
   44fa8:	00e00014 	movui	r3,32768
   44fac:	10bc000c 	andi	r2,r2,61440
   44fb0:	10c03c26 	beq	r2,r3,450a4 <__smakebuf_r+0x148>
   44fb4:	80c0030b 	ldhu	r3,12(r16)
   44fb8:	18c20014 	ori	r3,r3,2048
   44fbc:	80c0030d 	sth	r3,12(r16)
   44fc0:	00c80004 	movi	r3,8192
   44fc4:	10c00c1e 	bne	r2,r3,44ff8 <__smakebuf_r+0x9c>
   44fc8:	8140038f 	ldh	r5,14(r16)
   44fcc:	8809883a 	mov	r4,r17
   44fd0:	004789c0 	call	4789c <_isatty_r>
   44fd4:	10000826 	beq	r2,zero,44ff8 <__smakebuf_r+0x9c>
   44fd8:	80c0030b 	ldhu	r3,12(r16)
   44fdc:	808010c4 	addi	r2,r16,67
   44fe0:	80800015 	stw	r2,0(r16)
   44fe4:	18c00054 	ori	r3,r3,1
   44fe8:	80800415 	stw	r2,16(r16)
   44fec:	00800044 	movi	r2,1
   44ff0:	80c0030d 	sth	r3,12(r16)
   44ff4:	80800515 	stw	r2,20(r16)
   44ff8:	04810004 	movi	r18,1024
   44ffc:	8809883a 	mov	r4,r17
   45000:	900b883a 	mov	r5,r18
   45004:	00451040 	call	45104 <_malloc_r>
   45008:	10003026 	beq	r2,zero,450cc <__smakebuf_r+0x170>
   4500c:	80c0030b 	ldhu	r3,12(r16)
   45010:	01000134 	movhi	r4,4
   45014:	21105a04 	addi	r4,r4,16744
   45018:	89000f15 	stw	r4,60(r17)
   4501c:	18c02014 	ori	r3,r3,128
   45020:	80c0030d 	sth	r3,12(r16)
   45024:	80800015 	stw	r2,0(r16)
   45028:	80800415 	stw	r2,16(r16)
   4502c:	84800515 	stw	r18,20(r16)
   45030:	dfc01217 	ldw	ra,72(sp)
   45034:	dc801117 	ldw	r18,68(sp)
   45038:	dc401017 	ldw	r17,64(sp)
   4503c:	dc000f17 	ldw	r16,60(sp)
   45040:	dec01304 	addi	sp,sp,76
   45044:	f800283a 	ret
   45048:	8080030b 	ldhu	r2,12(r16)
   4504c:	10c0200c 	andi	r3,r2,128
   45050:	18ffffcc 	andi	r3,r3,65535
   45054:	18e0001c 	xori	r3,r3,32768
   45058:	18e00004 	addi	r3,r3,-32768
   4505c:	18000f1e 	bne	r3,zero,4509c <__smakebuf_r+0x140>
   45060:	04810004 	movi	r18,1024
   45064:	10820014 	ori	r2,r2,2048
   45068:	8080030d 	sth	r2,12(r16)
   4506c:	003fe306 	br	44ffc <__smakebuf_r+0xa0>
   45070:	288010c4 	addi	r2,r5,67
   45074:	28800015 	stw	r2,0(r5)
   45078:	28800415 	stw	r2,16(r5)
   4507c:	00800044 	movi	r2,1
   45080:	28800515 	stw	r2,20(r5)
   45084:	dfc01217 	ldw	ra,72(sp)
   45088:	dc801117 	ldw	r18,68(sp)
   4508c:	dc401017 	ldw	r17,64(sp)
   45090:	dc000f17 	ldw	r16,60(sp)
   45094:	dec01304 	addi	sp,sp,76
   45098:	f800283a 	ret
   4509c:	04801004 	movi	r18,64
   450a0:	003ff006 	br	45064 <__smakebuf_r+0x108>
   450a4:	81000a17 	ldw	r4,40(r16)
   450a8:	00c00134 	movhi	r3,4
   450ac:	18dcf104 	addi	r3,r3,29636
   450b0:	20ffc01e 	bne	r4,r3,44fb4 <__smakebuf_r+0x58>
   450b4:	8080030b 	ldhu	r2,12(r16)
   450b8:	00c10004 	movi	r3,1024
   450bc:	80c01315 	stw	r3,76(r16)
   450c0:	10c4b03a 	or	r2,r2,r3
   450c4:	8080030d 	sth	r2,12(r16)
   450c8:	003fcb06 	br	44ff8 <__smakebuf_r+0x9c>
   450cc:	8080030b 	ldhu	r2,12(r16)
   450d0:	10c0800c 	andi	r3,r2,512
   450d4:	18ffffcc 	andi	r3,r3,65535
   450d8:	18e0001c 	xori	r3,r3,32768
   450dc:	18e00004 	addi	r3,r3,-32768
   450e0:	183fd31e 	bne	r3,zero,45030 <__smakebuf_r+0xd4>
   450e4:	10800094 	ori	r2,r2,2
   450e8:	80c010c4 	addi	r3,r16,67
   450ec:	8080030d 	sth	r2,12(r16)
   450f0:	00800044 	movi	r2,1
   450f4:	80c00015 	stw	r3,0(r16)
   450f8:	80c00415 	stw	r3,16(r16)
   450fc:	80800515 	stw	r2,20(r16)
   45100:	003fcb06 	br	45030 <__smakebuf_r+0xd4>

00045104 <_malloc_r>:
   45104:	defff604 	addi	sp,sp,-40
   45108:	dc800215 	stw	r18,8(sp)
   4510c:	dfc00915 	stw	ra,36(sp)
   45110:	df000815 	stw	fp,32(sp)
   45114:	ddc00715 	stw	r23,28(sp)
   45118:	dd800615 	stw	r22,24(sp)
   4511c:	dd400515 	stw	r21,20(sp)
   45120:	dd000415 	stw	r20,16(sp)
   45124:	dcc00315 	stw	r19,12(sp)
   45128:	dc400115 	stw	r17,4(sp)
   4512c:	dc000015 	stw	r16,0(sp)
   45130:	288002c4 	addi	r2,r5,11
   45134:	00c00584 	movi	r3,22
   45138:	2025883a 	mov	r18,r4
   4513c:	18802b2e 	bgeu	r3,r2,451ec <_malloc_r+0xe8>
   45140:	047ffe04 	movi	r17,-8
   45144:	1462703a 	and	r17,r2,r17
   45148:	88002a16 	blt	r17,zero,451f4 <_malloc_r+0xf0>
   4514c:	89402936 	bltu	r17,r5,451f4 <_malloc_r+0xf0>
   45150:	9009883a 	mov	r4,r18
   45154:	0049dac0 	call	49dac <__malloc_lock>
   45158:	00807dc4 	movi	r2,503
   4515c:	14402936 	bltu	r2,r17,45204 <_malloc_r+0x100>
   45160:	8808d0fa 	srli	r4,r17,3
   45164:	04c00174 	movhi	r19,5
   45168:	9cf32004 	addi	r19,r19,-13184
   4516c:	2105883a 	add	r2,r4,r4
   45170:	1085883a 	add	r2,r2,r2
   45174:	1085883a 	add	r2,r2,r2
   45178:	9885883a 	add	r2,r19,r2
   4517c:	14000317 	ldw	r16,12(r2)
   45180:	80815526 	beq	r16,r2,456d8 <_malloc_r+0x5d4>
   45184:	81000117 	ldw	r4,4(r16)
   45188:	00bfff04 	movi	r2,-4
   4518c:	80c00317 	ldw	r3,12(r16)
   45190:	2084703a 	and	r2,r4,r2
   45194:	8085883a 	add	r2,r16,r2
   45198:	11800117 	ldw	r6,4(r2)
   4519c:	81400217 	ldw	r5,8(r16)
   451a0:	9009883a 	mov	r4,r18
   451a4:	31800054 	ori	r6,r6,1
   451a8:	11800115 	stw	r6,4(r2)
   451ac:	28c00315 	stw	r3,12(r5)
   451b0:	19400215 	stw	r5,8(r3)
   451b4:	0049dcc0 	call	49dcc <__malloc_unlock>
   451b8:	80800204 	addi	r2,r16,8
   451bc:	dfc00917 	ldw	ra,36(sp)
   451c0:	df000817 	ldw	fp,32(sp)
   451c4:	ddc00717 	ldw	r23,28(sp)
   451c8:	dd800617 	ldw	r22,24(sp)
   451cc:	dd400517 	ldw	r21,20(sp)
   451d0:	dd000417 	ldw	r20,16(sp)
   451d4:	dcc00317 	ldw	r19,12(sp)
   451d8:	dc800217 	ldw	r18,8(sp)
   451dc:	dc400117 	ldw	r17,4(sp)
   451e0:	dc000017 	ldw	r16,0(sp)
   451e4:	dec00a04 	addi	sp,sp,40
   451e8:	f800283a 	ret
   451ec:	04400404 	movi	r17,16
   451f0:	897fd72e 	bgeu	r17,r5,45150 <_malloc_r+0x4c>
   451f4:	00800304 	movi	r2,12
   451f8:	90800015 	stw	r2,0(r18)
   451fc:	0005883a 	mov	r2,zero
   45200:	003fee06 	br	451bc <_malloc_r+0xb8>
   45204:	8808d27a 	srli	r4,r17,9
   45208:	20007126 	beq	r4,zero,453d0 <_malloc_r+0x2cc>
   4520c:	00800104 	movi	r2,4
   45210:	1100eb36 	bltu	r2,r4,455c0 <_malloc_r+0x4bc>
   45214:	8808d1ba 	srli	r4,r17,6
   45218:	21000e04 	addi	r4,r4,56
   4521c:	210b883a 	add	r5,r4,r4
   45220:	294b883a 	add	r5,r5,r5
   45224:	294b883a 	add	r5,r5,r5
   45228:	04c00174 	movhi	r19,5
   4522c:	9cf32004 	addi	r19,r19,-13184
   45230:	994b883a 	add	r5,r19,r5
   45234:	2c000317 	ldw	r16,12(r5)
   45238:	2c000e26 	beq	r5,r16,45274 <_malloc_r+0x170>
   4523c:	80c00117 	ldw	r3,4(r16)
   45240:	01ffff04 	movi	r7,-4
   45244:	018003c4 	movi	r6,15
   45248:	19c6703a 	and	r3,r3,r7
   4524c:	1c45c83a 	sub	r2,r3,r17
   45250:	30800716 	blt	r6,r2,45270 <_malloc_r+0x16c>
   45254:	1000610e 	bge	r2,zero,453dc <_malloc_r+0x2d8>
   45258:	84000317 	ldw	r16,12(r16)
   4525c:	2c000526 	beq	r5,r16,45274 <_malloc_r+0x170>
   45260:	80c00117 	ldw	r3,4(r16)
   45264:	19c6703a 	and	r3,r3,r7
   45268:	1c45c83a 	sub	r2,r3,r17
   4526c:	30bff90e 	bge	r6,r2,45254 <_malloc_r+0x150>
   45270:	213fffc4 	addi	r4,r4,-1
   45274:	21000044 	addi	r4,r4,1
   45278:	9c000417 	ldw	r16,16(r19)
   4527c:	00c00174 	movhi	r3,5
   45280:	18f32004 	addi	r3,r3,-13184
   45284:	1a400204 	addi	r9,r3,8
   45288:	8240ff26 	beq	r16,r9,45688 <_malloc_r+0x584>
   4528c:	81400117 	ldw	r5,4(r16)
   45290:	00bfff04 	movi	r2,-4
   45294:	018003c4 	movi	r6,15
   45298:	2884703a 	and	r2,r5,r2
   4529c:	144bc83a 	sub	r5,r2,r17
   452a0:	3140ea16 	blt	r6,r5,4564c <_malloc_r+0x548>
   452a4:	1a400515 	stw	r9,20(r3)
   452a8:	1a400415 	stw	r9,16(r3)
   452ac:	2800570e 	bge	r5,zero,4540c <_malloc_r+0x308>
   452b0:	01407fc4 	movi	r5,511
   452b4:	2880ca36 	bltu	r5,r2,455e0 <_malloc_r+0x4dc>
   452b8:	1004d0fa 	srli	r2,r2,3
   452bc:	02000044 	movi	r8,1
   452c0:	19c00117 	ldw	r7,4(r3)
   452c4:	108b883a 	add	r5,r2,r2
   452c8:	294b883a 	add	r5,r5,r5
   452cc:	1005d0ba 	srai	r2,r2,2
   452d0:	294b883a 	add	r5,r5,r5
   452d4:	28cb883a 	add	r5,r5,r3
   452d8:	29800217 	ldw	r6,8(r5)
   452dc:	4084983a 	sll	r2,r8,r2
   452e0:	81400315 	stw	r5,12(r16)
   452e4:	81800215 	stw	r6,8(r16)
   452e8:	11c4b03a 	or	r2,r2,r7
   452ec:	18800115 	stw	r2,4(r3)
   452f0:	2c000215 	stw	r16,8(r5)
   452f4:	34000315 	stw	r16,12(r6)
   452f8:	200bd0ba 	srai	r5,r4,2
   452fc:	00c00044 	movi	r3,1
   45300:	194a983a 	sll	r5,r3,r5
   45304:	11404936 	bltu	r2,r5,4542c <_malloc_r+0x328>
   45308:	1146703a 	and	r3,r2,r5
   4530c:	18000a1e 	bne	r3,zero,45338 <_malloc_r+0x234>
   45310:	00ffff04 	movi	r3,-4
   45314:	294b883a 	add	r5,r5,r5
   45318:	20c8703a 	and	r4,r4,r3
   4531c:	1146703a 	and	r3,r2,r5
   45320:	21000104 	addi	r4,r4,4
   45324:	1800041e 	bne	r3,zero,45338 <_malloc_r+0x234>
   45328:	294b883a 	add	r5,r5,r5
   4532c:	1146703a 	and	r3,r2,r5
   45330:	21000104 	addi	r4,r4,4
   45334:	183ffc26 	beq	r3,zero,45328 <_malloc_r+0x224>
   45338:	023fff04 	movi	r8,-4
   4533c:	01c003c4 	movi	r7,15
   45340:	2105883a 	add	r2,r4,r4
   45344:	1085883a 	add	r2,r2,r2
   45348:	1085883a 	add	r2,r2,r2
   4534c:	9899883a 	add	r12,r19,r2
   45350:	62800304 	addi	r10,r12,12
   45354:	2017883a 	mov	r11,r4
   45358:	54000017 	ldw	r16,0(r10)
   4535c:	51bffd04 	addi	r6,r10,-12
   45360:	8180041e 	bne	r16,r6,45374 <_malloc_r+0x270>
   45364:	0000ca06 	br	45690 <_malloc_r+0x58c>
   45368:	10001c0e 	bge	r2,zero,453dc <_malloc_r+0x2d8>
   4536c:	84000317 	ldw	r16,12(r16)
   45370:	8180c726 	beq	r16,r6,45690 <_malloc_r+0x58c>
   45374:	80c00117 	ldw	r3,4(r16)
   45378:	1a06703a 	and	r3,r3,r8
   4537c:	1c45c83a 	sub	r2,r3,r17
   45380:	38bff90e 	bge	r7,r2,45368 <_malloc_r+0x264>
   45384:	81000317 	ldw	r4,12(r16)
   45388:	81400217 	ldw	r5,8(r16)
   4538c:	8447883a 	add	r3,r16,r17
   45390:	8c400054 	ori	r17,r17,1
   45394:	29000315 	stw	r4,12(r5)
   45398:	21400215 	stw	r5,8(r4)
   4539c:	84400115 	stw	r17,4(r16)
   453a0:	1889883a 	add	r4,r3,r2
   453a4:	11400054 	ori	r5,r2,1
   453a8:	98c00515 	stw	r3,20(r19)
   453ac:	98c00415 	stw	r3,16(r19)
   453b0:	20800015 	stw	r2,0(r4)
   453b4:	1a400315 	stw	r9,12(r3)
   453b8:	1a400215 	stw	r9,8(r3)
   453bc:	19400115 	stw	r5,4(r3)
   453c0:	9009883a 	mov	r4,r18
   453c4:	0049dcc0 	call	49dcc <__malloc_unlock>
   453c8:	80800204 	addi	r2,r16,8
   453cc:	003f7b06 	br	451bc <_malloc_r+0xb8>
   453d0:	8808d0fa 	srli	r4,r17,3
   453d4:	210b883a 	add	r5,r4,r4
   453d8:	003f9106 	br	45220 <_malloc_r+0x11c>
   453dc:	80c7883a 	add	r3,r16,r3
   453e0:	19400117 	ldw	r5,4(r3)
   453e4:	80800317 	ldw	r2,12(r16)
   453e8:	81000217 	ldw	r4,8(r16)
   453ec:	29400054 	ori	r5,r5,1
   453f0:	19400115 	stw	r5,4(r3)
   453f4:	20800315 	stw	r2,12(r4)
   453f8:	11000215 	stw	r4,8(r2)
   453fc:	9009883a 	mov	r4,r18
   45400:	0049dcc0 	call	49dcc <__malloc_unlock>
   45404:	80800204 	addi	r2,r16,8
   45408:	003f6c06 	br	451bc <_malloc_r+0xb8>
   4540c:	8085883a 	add	r2,r16,r2
   45410:	10c00117 	ldw	r3,4(r2)
   45414:	9009883a 	mov	r4,r18
   45418:	18c00054 	ori	r3,r3,1
   4541c:	10c00115 	stw	r3,4(r2)
   45420:	0049dcc0 	call	49dcc <__malloc_unlock>
   45424:	80800204 	addi	r2,r16,8
   45428:	003f6406 	br	451bc <_malloc_r+0xb8>
   4542c:	9c000217 	ldw	r16,8(r19)
   45430:	00bfff04 	movi	r2,-4
   45434:	85400117 	ldw	r21,4(r16)
   45438:	a8aa703a 	and	r21,r21,r2
   4543c:	ac400336 	bltu	r21,r17,4544c <_malloc_r+0x348>
   45440:	ac45c83a 	sub	r2,r21,r17
   45444:	00c003c4 	movi	r3,15
   45448:	18805316 	blt	r3,r2,45598 <_malloc_r+0x494>
   4544c:	d5e6aa17 	ldw	r23,-25944(gp)
   45450:	d0e00317 	ldw	r3,-32756(gp)
   45454:	00bfffc4 	movi	r2,-1
   45458:	8579883a 	add	fp,r16,r21
   4545c:	8def883a 	add	r23,r17,r23
   45460:	1880d226 	beq	r3,r2,457ac <_malloc_r+0x6a8>
   45464:	bdc403c4 	addi	r23,r23,4111
   45468:	00bc0004 	movi	r2,-4096
   4546c:	b8ae703a 	and	r23,r23,r2
   45470:	9009883a 	mov	r4,r18
   45474:	b80b883a 	mov	r5,r23
   45478:	00472840 	call	47284 <_sbrk_r>
   4547c:	1029883a 	mov	r20,r2
   45480:	00bfffc4 	movi	r2,-1
   45484:	a080d126 	beq	r20,r2,457cc <_malloc_r+0x6c8>
   45488:	a7009f36 	bltu	r20,fp,45708 <_malloc_r+0x604>
   4548c:	05800174 	movhi	r22,5
   45490:	b5bf5604 	addi	r22,r22,-680
   45494:	b0800017 	ldw	r2,0(r22)
   45498:	b885883a 	add	r2,r23,r2
   4549c:	b0800015 	stw	r2,0(r22)
   454a0:	e500cf26 	beq	fp,r20,457e0 <_malloc_r+0x6dc>
   454a4:	d1200317 	ldw	r4,-32756(gp)
   454a8:	00ffffc4 	movi	r3,-1
   454ac:	20c0e026 	beq	r4,r3,45830 <_malloc_r+0x72c>
   454b0:	a739c83a 	sub	fp,r20,fp
   454b4:	1705883a 	add	r2,r2,fp
   454b8:	b0800015 	stw	r2,0(r22)
   454bc:	a08001cc 	andi	r2,r20,7
   454c0:	1000a526 	beq	r2,zero,45758 <_malloc_r+0x654>
   454c4:	a0a9c83a 	sub	r20,r20,r2
   454c8:	00c40204 	movi	r3,4104
   454cc:	a5000204 	addi	r20,r20,8
   454d0:	1885c83a 	sub	r2,r3,r2
   454d4:	a5c7883a 	add	r3,r20,r23
   454d8:	18c3ffcc 	andi	r3,r3,4095
   454dc:	10efc83a 	sub	r23,r2,r3
   454e0:	9009883a 	mov	r4,r18
   454e4:	b80b883a 	mov	r5,r23
   454e8:	00472840 	call	47284 <_sbrk_r>
   454ec:	00ffffc4 	movi	r3,-1
   454f0:	10c0cc26 	beq	r2,r3,45824 <_malloc_r+0x720>
   454f4:	1505c83a 	sub	r2,r2,r20
   454f8:	b887883a 	add	r3,r23,r2
   454fc:	18c00054 	ori	r3,r3,1
   45500:	b0800017 	ldw	r2,0(r22)
   45504:	9d000215 	stw	r20,8(r19)
   45508:	a0c00115 	stw	r3,4(r20)
   4550c:	b885883a 	add	r2,r23,r2
   45510:	b0800015 	stw	r2,0(r22)
   45514:	84c00e26 	beq	r16,r19,45550 <_malloc_r+0x44c>
   45518:	00c003c4 	movi	r3,15
   4551c:	1d40902e 	bgeu	r3,r21,45760 <_malloc_r+0x65c>
   45520:	ad7ffd04 	addi	r21,r21,-12
   45524:	013ffe04 	movi	r4,-8
   45528:	a908703a 	and	r4,r21,r4
   4552c:	810b883a 	add	r5,r16,r4
   45530:	01800144 	movi	r6,5
   45534:	29800115 	stw	r6,4(r5)
   45538:	29800215 	stw	r6,8(r5)
   4553c:	81400117 	ldw	r5,4(r16)
   45540:	2940004c 	andi	r5,r5,1
   45544:	214ab03a 	or	r5,r4,r5
   45548:	81400115 	stw	r5,4(r16)
   4554c:	1900ae36 	bltu	r3,r4,45808 <_malloc_r+0x704>
   45550:	d0e6a917 	ldw	r3,-25948(gp)
   45554:	1880012e 	bgeu	r3,r2,4555c <_malloc_r+0x458>
   45558:	d0a6a915 	stw	r2,-25948(gp)
   4555c:	d0e6a817 	ldw	r3,-25952(gp)
   45560:	9c000217 	ldw	r16,8(r19)
   45564:	1880012e 	bgeu	r3,r2,4556c <_malloc_r+0x468>
   45568:	d0a6a815 	stw	r2,-25952(gp)
   4556c:	80c00117 	ldw	r3,4(r16)
   45570:	00bfff04 	movi	r2,-4
   45574:	1886703a 	and	r3,r3,r2
   45578:	1c45c83a 	sub	r2,r3,r17
   4557c:	1c400236 	bltu	r3,r17,45588 <_malloc_r+0x484>
   45580:	00c003c4 	movi	r3,15
   45584:	18800416 	blt	r3,r2,45598 <_malloc_r+0x494>
   45588:	9009883a 	mov	r4,r18
   4558c:	0049dcc0 	call	49dcc <__malloc_unlock>
   45590:	0005883a 	mov	r2,zero
   45594:	003f0906 	br	451bc <_malloc_r+0xb8>
   45598:	88c00054 	ori	r3,r17,1
   4559c:	10800054 	ori	r2,r2,1
   455a0:	80c00115 	stw	r3,4(r16)
   455a4:	8463883a 	add	r17,r16,r17
   455a8:	88800115 	stw	r2,4(r17)
   455ac:	9009883a 	mov	r4,r18
   455b0:	9c400215 	stw	r17,8(r19)
   455b4:	0049dcc0 	call	49dcc <__malloc_unlock>
   455b8:	80800204 	addi	r2,r16,8
   455bc:	003eff06 	br	451bc <_malloc_r+0xb8>
   455c0:	00800504 	movi	r2,20
   455c4:	1100492e 	bgeu	r2,r4,456ec <_malloc_r+0x5e8>
   455c8:	00801504 	movi	r2,84
   455cc:	11005c36 	bltu	r2,r4,45740 <_malloc_r+0x63c>
   455d0:	8808d33a 	srli	r4,r17,12
   455d4:	21001b84 	addi	r4,r4,110
   455d8:	210b883a 	add	r5,r4,r4
   455dc:	003f1006 	br	45220 <_malloc_r+0x11c>
   455e0:	1006d27a 	srli	r3,r2,9
   455e4:	01400104 	movi	r5,4
   455e8:	28c0432e 	bgeu	r5,r3,456f8 <_malloc_r+0x5f4>
   455ec:	01400504 	movi	r5,20
   455f0:	28c07036 	bltu	r5,r3,457b4 <_malloc_r+0x6b0>
   455f4:	194016c4 	addi	r5,r3,91
   455f8:	294d883a 	add	r6,r5,r5
   455fc:	318d883a 	add	r6,r6,r6
   45600:	318d883a 	add	r6,r6,r6
   45604:	998d883a 	add	r6,r19,r6
   45608:	30c00217 	ldw	r3,8(r6)
   4560c:	01c00174 	movhi	r7,5
   45610:	39f32004 	addi	r7,r7,-13184
   45614:	19805726 	beq	r3,r6,45774 <_malloc_r+0x670>
   45618:	01ffff04 	movi	r7,-4
   4561c:	19400117 	ldw	r5,4(r3)
   45620:	29ca703a 	and	r5,r5,r7
   45624:	1140022e 	bgeu	r2,r5,45630 <_malloc_r+0x52c>
   45628:	18c00217 	ldw	r3,8(r3)
   4562c:	30fffb1e 	bne	r6,r3,4561c <_malloc_r+0x518>
   45630:	19400317 	ldw	r5,12(r3)
   45634:	98800117 	ldw	r2,4(r19)
   45638:	81400315 	stw	r5,12(r16)
   4563c:	80c00215 	stw	r3,8(r16)
   45640:	2c000215 	stw	r16,8(r5)
   45644:	1c000315 	stw	r16,12(r3)
   45648:	003f2b06 	br	452f8 <_malloc_r+0x1f4>
   4564c:	8445883a 	add	r2,r16,r17
   45650:	8c400054 	ori	r17,r17,1
   45654:	18800515 	stw	r2,20(r3)
   45658:	18800415 	stw	r2,16(r3)
   4565c:	29000054 	ori	r4,r5,1
   45660:	1147883a 	add	r3,r2,r5
   45664:	84400115 	stw	r17,4(r16)
   45668:	11000115 	stw	r4,4(r2)
   4566c:	12400315 	stw	r9,12(r2)
   45670:	12400215 	stw	r9,8(r2)
   45674:	19400015 	stw	r5,0(r3)
   45678:	9009883a 	mov	r4,r18
   4567c:	0049dcc0 	call	49dcc <__malloc_unlock>
   45680:	80800204 	addi	r2,r16,8
   45684:	003ecd06 	br	451bc <_malloc_r+0xb8>
   45688:	18800117 	ldw	r2,4(r3)
   4568c:	003f1a06 	br	452f8 <_malloc_r+0x1f4>
   45690:	5ac00044 	addi	r11,r11,1
   45694:	588000cc 	andi	r2,r11,3
   45698:	52800204 	addi	r10,r10,8
   4569c:	103f2e1e 	bne	r2,zero,45358 <_malloc_r+0x254>
   456a0:	20c000cc 	andi	r3,r4,3
   456a4:	60bffe04 	addi	r2,r12,-8
   456a8:	18006f26 	beq	r3,zero,45868 <_malloc_r+0x764>
   456ac:	63000017 	ldw	r12,0(r12)
   456b0:	213fffc4 	addi	r4,r4,-1
   456b4:	60bffa26 	beq	r12,r2,456a0 <_malloc_r+0x59c>
   456b8:	98800117 	ldw	r2,4(r19)
   456bc:	294b883a 	add	r5,r5,r5
   456c0:	117f5a36 	bltu	r2,r5,4542c <_malloc_r+0x328>
   456c4:	283f5926 	beq	r5,zero,4542c <_malloc_r+0x328>
   456c8:	1146703a 	and	r3,r2,r5
   456cc:	18001626 	beq	r3,zero,45728 <_malloc_r+0x624>
   456d0:	5809883a 	mov	r4,r11
   456d4:	003f1a06 	br	45340 <_malloc_r+0x23c>
   456d8:	80800204 	addi	r2,r16,8
   456dc:	84000517 	ldw	r16,20(r16)
   456e0:	143ea81e 	bne	r2,r16,45184 <_malloc_r+0x80>
   456e4:	21000084 	addi	r4,r4,2
   456e8:	003ee306 	br	45278 <_malloc_r+0x174>
   456ec:	210016c4 	addi	r4,r4,91
   456f0:	210b883a 	add	r5,r4,r4
   456f4:	003eca06 	br	45220 <_malloc_r+0x11c>
   456f8:	100ad1ba 	srli	r5,r2,6
   456fc:	29400e04 	addi	r5,r5,56
   45700:	294d883a 	add	r6,r5,r5
   45704:	003fbd06 	br	455fc <_malloc_r+0x4f8>
   45708:	84ff6026 	beq	r16,r19,4548c <_malloc_r+0x388>
   4570c:	00800174 	movhi	r2,5
   45710:	10b32004 	addi	r2,r2,-13184
   45714:	14000217 	ldw	r16,8(r2)
   45718:	00bfff04 	movi	r2,-4
   4571c:	80c00117 	ldw	r3,4(r16)
   45720:	1886703a 	and	r3,r3,r2
   45724:	003f9406 	br	45578 <_malloc_r+0x474>
   45728:	294b883a 	add	r5,r5,r5
   4572c:	1146703a 	and	r3,r2,r5
   45730:	5ac00104 	addi	r11,r11,4
   45734:	183ffc26 	beq	r3,zero,45728 <_malloc_r+0x624>
   45738:	5809883a 	mov	r4,r11
   4573c:	003f0006 	br	45340 <_malloc_r+0x23c>
   45740:	00805504 	movi	r2,340
   45744:	11001336 	bltu	r2,r4,45794 <_malloc_r+0x690>
   45748:	8808d3fa 	srli	r4,r17,15
   4574c:	21001dc4 	addi	r4,r4,119
   45750:	210b883a 	add	r5,r4,r4
   45754:	003eb206 	br	45220 <_malloc_r+0x11c>
   45758:	00840004 	movi	r2,4096
   4575c:	003f5d06 	br	454d4 <_malloc_r+0x3d0>
   45760:	00800044 	movi	r2,1
   45764:	a0800115 	stw	r2,4(r20)
   45768:	a021883a 	mov	r16,r20
   4576c:	0007883a 	mov	r3,zero
   45770:	003f8106 	br	45578 <_malloc_r+0x474>
   45774:	280bd0ba 	srai	r5,r5,2
   45778:	01800044 	movi	r6,1
   4577c:	38800117 	ldw	r2,4(r7)
   45780:	314c983a 	sll	r6,r6,r5
   45784:	180b883a 	mov	r5,r3
   45788:	3084b03a 	or	r2,r6,r2
   4578c:	38800115 	stw	r2,4(r7)
   45790:	003fa906 	br	45638 <_malloc_r+0x534>
   45794:	00815504 	movi	r2,1364
   45798:	11001836 	bltu	r2,r4,457fc <_malloc_r+0x6f8>
   4579c:	8808d4ba 	srli	r4,r17,18
   457a0:	21001f04 	addi	r4,r4,124
   457a4:	210b883a 	add	r5,r4,r4
   457a8:	003e9d06 	br	45220 <_malloc_r+0x11c>
   457ac:	bdc00404 	addi	r23,r23,16
   457b0:	003f2f06 	br	45470 <_malloc_r+0x36c>
   457b4:	01401504 	movi	r5,84
   457b8:	28c01f36 	bltu	r5,r3,45838 <_malloc_r+0x734>
   457bc:	100ad33a 	srli	r5,r2,12
   457c0:	29401b84 	addi	r5,r5,110
   457c4:	294d883a 	add	r6,r5,r5
   457c8:	003f8c06 	br	455fc <_malloc_r+0x4f8>
   457cc:	9c000217 	ldw	r16,8(r19)
   457d0:	00bfff04 	movi	r2,-4
   457d4:	80c00117 	ldw	r3,4(r16)
   457d8:	1886703a 	and	r3,r3,r2
   457dc:	003f6606 	br	45578 <_malloc_r+0x474>
   457e0:	e0c3ffcc 	andi	r3,fp,4095
   457e4:	183f2f1e 	bne	r3,zero,454a4 <_malloc_r+0x3a0>
   457e8:	98c00217 	ldw	r3,8(r19)
   457ec:	bd49883a 	add	r4,r23,r21
   457f0:	21000054 	ori	r4,r4,1
   457f4:	19000115 	stw	r4,4(r3)
   457f8:	003f5506 	br	45550 <_malloc_r+0x44c>
   457fc:	01403f04 	movi	r5,252
   45800:	01001f84 	movi	r4,126
   45804:	003e8606 	br	45220 <_malloc_r+0x11c>
   45808:	9009883a 	mov	r4,r18
   4580c:	81400204 	addi	r5,r16,8
   45810:	004456c0 	call	4456c <_free_r>
   45814:	00800174 	movhi	r2,5
   45818:	10bf5604 	addi	r2,r2,-680
   4581c:	10800017 	ldw	r2,0(r2)
   45820:	003f4b06 	br	45550 <_malloc_r+0x44c>
   45824:	00c00044 	movi	r3,1
   45828:	002f883a 	mov	r23,zero
   4582c:	003f3406 	br	45500 <_malloc_r+0x3fc>
   45830:	d5200315 	stw	r20,-32756(gp)
   45834:	003f2106 	br	454bc <_malloc_r+0x3b8>
   45838:	01405504 	movi	r5,340
   4583c:	28c00436 	bltu	r5,r3,45850 <_malloc_r+0x74c>
   45840:	100ad3fa 	srli	r5,r2,15
   45844:	29401dc4 	addi	r5,r5,119
   45848:	294d883a 	add	r6,r5,r5
   4584c:	003f6b06 	br	455fc <_malloc_r+0x4f8>
   45850:	01415504 	movi	r5,1364
   45854:	28c00936 	bltu	r5,r3,4587c <_malloc_r+0x778>
   45858:	100ad4ba 	srli	r5,r2,18
   4585c:	29401f04 	addi	r5,r5,124
   45860:	294d883a 	add	r6,r5,r5
   45864:	003f6506 	br	455fc <_malloc_r+0x4f8>
   45868:	98800117 	ldw	r2,4(r19)
   4586c:	0146303a 	nor	r3,zero,r5
   45870:	1884703a 	and	r2,r3,r2
   45874:	98800115 	stw	r2,4(r19)
   45878:	003f9006 	br	456bc <_malloc_r+0x5b8>
   4587c:	01803f04 	movi	r6,252
   45880:	01401f84 	movi	r5,126
   45884:	003f5d06 	br	455fc <_malloc_r+0x4f8>

00045888 <memchr>:
   45888:	008000c4 	movi	r2,3
   4588c:	29403fcc 	andi	r5,r5,255
   45890:	1180282e 	bgeu	r2,r6,45934 <memchr+0xac>
   45894:	2086703a 	and	r3,r4,r2
   45898:	1800351e 	bne	r3,zero,45970 <memchr+0xe8>
   4589c:	2816923a 	slli	r11,r5,8
   458a0:	2093883a 	add	r9,r4,r2
   458a4:	22000084 	addi	r8,r4,2
   458a8:	5957883a 	add	r11,r11,r5
   458ac:	5816923a 	slli	r11,r11,8
   458b0:	20c00044 	addi	r3,r4,1
   458b4:	037fbff4 	movhi	r13,65279
   458b8:	6b7fbfc4 	addi	r13,r13,-257
   458bc:	5957883a 	add	r11,r11,r5
   458c0:	5816923a 	slli	r11,r11,8
   458c4:	03202074 	movhi	r12,32897
   458c8:	63202004 	addi	r12,r12,-32640
   458cc:	101d883a 	mov	r14,r2
   458d0:	5957883a 	add	r11,r11,r5
   458d4:	21c00017 	ldw	r7,0(r4)
   458d8:	31bfff04 	addi	r6,r6,-4
   458dc:	1805883a 	mov	r2,r3
   458e0:	3acef03a 	xor	r7,r7,r11
   458e4:	3b55883a 	add	r10,r7,r13
   458e8:	01ce303a 	nor	r7,zero,r7
   458ec:	51ce703a 	and	r7,r10,r7
   458f0:	3b0e703a 	and	r7,r7,r12
   458f4:	38000a26 	beq	r7,zero,45920 <memchr+0x98>
   458f8:	21c00003 	ldbu	r7,0(r4)
   458fc:	39401e26 	beq	r7,r5,45978 <memchr+0xf0>
   45900:	19c00003 	ldbu	r7,0(r3)
   45904:	39401926 	beq	r7,r5,4596c <memchr+0xe4>
   45908:	41c00003 	ldbu	r7,0(r8)
   4590c:	4005883a 	mov	r2,r8
   45910:	39401626 	beq	r7,r5,4596c <memchr+0xe4>
   45914:	49c00003 	ldbu	r7,0(r9)
   45918:	4805883a 	mov	r2,r9
   4591c:	39401326 	beq	r7,r5,4596c <memchr+0xe4>
   45920:	21000104 	addi	r4,r4,4
   45924:	4a400104 	addi	r9,r9,4
   45928:	42000104 	addi	r8,r8,4
   4592c:	18c00104 	addi	r3,r3,4
   45930:	71bfe836 	bltu	r14,r6,458d4 <memchr+0x4c>
   45934:	2005883a 	mov	r2,r4
   45938:	30000a26 	beq	r6,zero,45964 <memchr+0xdc>
   4593c:	10c00003 	ldbu	r3,0(r2)
   45940:	19400a26 	beq	r3,r5,4596c <memchr+0xe4>
   45944:	10c00044 	addi	r3,r2,1
   45948:	118d883a 	add	r6,r2,r6
   4594c:	00000306 	br	4595c <memchr+0xd4>
   45950:	11000003 	ldbu	r4,0(r2)
   45954:	18c00044 	addi	r3,r3,1
   45958:	21400426 	beq	r4,r5,4596c <memchr+0xe4>
   4595c:	1805883a 	mov	r2,r3
   45960:	19bffb1e 	bne	r3,r6,45950 <memchr+0xc8>
   45964:	0005883a 	mov	r2,zero
   45968:	f800283a 	ret
   4596c:	f800283a 	ret
   45970:	2005883a 	mov	r2,r4
   45974:	003ff106 	br	4593c <memchr+0xb4>
   45978:	2005883a 	mov	r2,r4
   4597c:	f800283a 	ret

00045980 <memcpy>:
   45980:	00c003c4 	movi	r3,15
   45984:	2005883a 	mov	r2,r4
   45988:	3009883a 	mov	r4,r6
   4598c:	1980032e 	bgeu	r3,r6,4599c <memcpy+0x1c>
   45990:	2886b03a 	or	r3,r5,r2
   45994:	18c000cc 	andi	r3,r3,3
   45998:	18000926 	beq	r3,zero,459c0 <memcpy+0x40>
   4599c:	1007883a 	mov	r3,r2
   459a0:	290f883a 	add	r7,r5,r4
   459a4:	20000526 	beq	r4,zero,459bc <memcpy+0x3c>
   459a8:	29800003 	ldbu	r6,0(r5)
   459ac:	18c00044 	addi	r3,r3,1
   459b0:	29400044 	addi	r5,r5,1
   459b4:	19bfffc5 	stb	r6,-1(r3)
   459b8:	29fffb1e 	bne	r5,r7,459a8 <memcpy+0x28>
   459bc:	f800283a 	ret
   459c0:	327ffc04 	addi	r9,r6,-16
   459c4:	4812d13a 	srli	r9,r9,4
   459c8:	11000404 	addi	r4,r2,16
   459cc:	1007883a 	mov	r3,r2
   459d0:	4810913a 	slli	r8,r9,4
   459d4:	280f883a 	mov	r7,r5
   459d8:	2209883a 	add	r4,r4,r8
   459dc:	3a000017 	ldw	r8,0(r7)
   459e0:	18c00404 	addi	r3,r3,16
   459e4:	39c00404 	addi	r7,r7,16
   459e8:	1a3ffc15 	stw	r8,-16(r3)
   459ec:	3a3ffd17 	ldw	r8,-12(r7)
   459f0:	1a3ffd15 	stw	r8,-12(r3)
   459f4:	3a3ffe17 	ldw	r8,-8(r7)
   459f8:	1a3ffe15 	stw	r8,-8(r3)
   459fc:	3a3fff17 	ldw	r8,-4(r7)
   45a00:	1a3fff15 	stw	r8,-4(r3)
   45a04:	193ff51e 	bne	r3,r4,459dc <memcpy+0x5c>
   45a08:	49c00044 	addi	r7,r9,1
   45a0c:	380e913a 	slli	r7,r7,4
   45a10:	310003cc 	andi	r4,r6,15
   45a14:	018000c4 	movi	r6,3
   45a18:	11c7883a 	add	r3,r2,r7
   45a1c:	29cb883a 	add	r5,r5,r7
   45a20:	313fdf2e 	bgeu	r6,r4,459a0 <memcpy+0x20>
   45a24:	213fff04 	addi	r4,r4,-4
   45a28:	2014d0ba 	srli	r10,r4,2
   45a2c:	1a400104 	addi	r9,r3,4
   45a30:	180d883a 	mov	r6,r3
   45a34:	528f883a 	add	r7,r10,r10
   45a38:	39cf883a 	add	r7,r7,r7
   45a3c:	49d3883a 	add	r9,r9,r7
   45a40:	280f883a 	mov	r7,r5
   45a44:	3a000017 	ldw	r8,0(r7)
   45a48:	31800104 	addi	r6,r6,4
   45a4c:	39c00104 	addi	r7,r7,4
   45a50:	323fff15 	stw	r8,-4(r6)
   45a54:	327ffb1e 	bne	r6,r9,45a44 <memcpy+0xc4>
   45a58:	51800044 	addi	r6,r10,1
   45a5c:	52bfff24 	muli	r10,r10,-4
   45a60:	318d883a 	add	r6,r6,r6
   45a64:	318d883a 	add	r6,r6,r6
   45a68:	5109883a 	add	r4,r10,r4
   45a6c:	298b883a 	add	r5,r5,r6
   45a70:	1987883a 	add	r3,r3,r6
   45a74:	003fca06 	br	459a0 <memcpy+0x20>

00045a78 <memmove>:
   45a78:	2005883a 	mov	r2,r4
   45a7c:	300f883a 	mov	r7,r6
   45a80:	29000b2e 	bgeu	r5,r4,45ab0 <memmove+0x38>
   45a84:	2987883a 	add	r3,r5,r6
   45a88:	20c0092e 	bgeu	r4,r3,45ab0 <memmove+0x38>
   45a8c:	218b883a 	add	r5,r4,r6
   45a90:	198fc83a 	sub	r7,r3,r6
   45a94:	30003f26 	beq	r6,zero,45b94 <memmove+0x11c>
   45a98:	18ffffc4 	addi	r3,r3,-1
   45a9c:	19000003 	ldbu	r4,0(r3)
   45aa0:	297fffc4 	addi	r5,r5,-1
   45aa4:	29000005 	stb	r4,0(r5)
   45aa8:	19fffb1e 	bne	r3,r7,45a98 <memmove+0x20>
   45aac:	f800283a 	ret
   45ab0:	00c003c4 	movi	r3,15
   45ab4:	1980382e 	bgeu	r3,r6,45b98 <memmove+0x120>
   45ab8:	2886b03a 	or	r3,r5,r2
   45abc:	18c000cc 	andi	r3,r3,3
   45ac0:	1800351e 	bne	r3,zero,45b98 <memmove+0x120>
   45ac4:	327ffc04 	addi	r9,r6,-16
   45ac8:	4812d13a 	srli	r9,r9,4
   45acc:	12000404 	addi	r8,r2,16
   45ad0:	1007883a 	mov	r3,r2
   45ad4:	4808913a 	slli	r4,r9,4
   45ad8:	280f883a 	mov	r7,r5
   45adc:	4111883a 	add	r8,r8,r4
   45ae0:	39000017 	ldw	r4,0(r7)
   45ae4:	18c00404 	addi	r3,r3,16
   45ae8:	39c00404 	addi	r7,r7,16
   45aec:	193ffc15 	stw	r4,-16(r3)
   45af0:	393ffd17 	ldw	r4,-12(r7)
   45af4:	193ffd15 	stw	r4,-12(r3)
   45af8:	393ffe17 	ldw	r4,-8(r7)
   45afc:	193ffe15 	stw	r4,-8(r3)
   45b00:	393fff17 	ldw	r4,-4(r7)
   45b04:	193fff15 	stw	r4,-4(r3)
   45b08:	1a3ff51e 	bne	r3,r8,45ae0 <memmove+0x68>
   45b0c:	49000044 	addi	r4,r9,1
   45b10:	2008913a 	slli	r4,r4,4
   45b14:	31c003cc 	andi	r7,r6,15
   45b18:	1107883a 	add	r3,r2,r4
   45b1c:	290b883a 	add	r5,r5,r4
   45b20:	010000c4 	movi	r4,3
   45b24:	21c0142e 	bgeu	r4,r7,45b78 <memmove+0x100>
   45b28:	39ffff04 	addi	r7,r7,-4
   45b2c:	3814d0ba 	srli	r10,r7,2
   45b30:	1a400104 	addi	r9,r3,4
   45b34:	180d883a 	mov	r6,r3
   45b38:	5289883a 	add	r4,r10,r10
   45b3c:	2109883a 	add	r4,r4,r4
   45b40:	4913883a 	add	r9,r9,r4
   45b44:	2809883a 	mov	r4,r5
   45b48:	22000017 	ldw	r8,0(r4)
   45b4c:	31800104 	addi	r6,r6,4
   45b50:	21000104 	addi	r4,r4,4
   45b54:	323fff15 	stw	r8,-4(r6)
   45b58:	327ffb1e 	bne	r6,r9,45b48 <memmove+0xd0>
   45b5c:	51000044 	addi	r4,r10,1
   45b60:	52bfff24 	muli	r10,r10,-4
   45b64:	2109883a 	add	r4,r4,r4
   45b68:	2109883a 	add	r4,r4,r4
   45b6c:	51cf883a 	add	r7,r10,r7
   45b70:	290b883a 	add	r5,r5,r4
   45b74:	1907883a 	add	r3,r3,r4
   45b78:	38000626 	beq	r7,zero,45b94 <memmove+0x11c>
   45b7c:	19cf883a 	add	r7,r3,r7
   45b80:	29800003 	ldbu	r6,0(r5)
   45b84:	18c00044 	addi	r3,r3,1
   45b88:	29400044 	addi	r5,r5,1
   45b8c:	19bfffc5 	stb	r6,-1(r3)
   45b90:	19fffb1e 	bne	r3,r7,45b80 <memmove+0x108>
   45b94:	f800283a 	ret
   45b98:	1007883a 	mov	r3,r2
   45b9c:	003ff606 	br	45b78 <memmove+0x100>

00045ba0 <memset>:
   45ba0:	00c000c4 	movi	r3,3
   45ba4:	2005883a 	mov	r2,r4
   45ba8:	29403fcc 	andi	r5,r5,255
   45bac:	19802d2e 	bgeu	r3,r6,45c64 <memset+0xc4>
   45bb0:	20c6703a 	and	r3,r4,r3
   45bb4:	18002e1e 	bne	r3,zero,45c70 <memset+0xd0>
   45bb8:	2806923a 	slli	r3,r5,8
   45bbc:	010003c4 	movi	r4,15
   45bc0:	3011883a 	mov	r8,r6
   45bc4:	1946b03a 	or	r3,r3,r5
   45bc8:	180e943a 	slli	r7,r3,16
   45bcc:	38ceb03a 	or	r7,r7,r3
   45bd0:	1007883a 	mov	r3,r2
   45bd4:	21800f2e 	bgeu	r4,r6,45c14 <memset+0x74>
   45bd8:	19c00015 	stw	r7,0(r3)
   45bdc:	19c00115 	stw	r7,4(r3)
   45be0:	19c00215 	stw	r7,8(r3)
   45be4:	19c00315 	stw	r7,12(r3)
   45be8:	423ffc04 	addi	r8,r8,-16
   45bec:	18c00404 	addi	r3,r3,16
   45bf0:	223ff936 	bltu	r4,r8,45bd8 <memset+0x38>
   45bf4:	30fffc04 	addi	r3,r6,-16
   45bf8:	1806d13a 	srli	r3,r3,4
   45bfc:	318003cc 	andi	r6,r6,15
   45c00:	010000c4 	movi	r4,3
   45c04:	18c00044 	addi	r3,r3,1
   45c08:	1806913a 	slli	r3,r3,4
   45c0c:	10c7883a 	add	r3,r2,r3
   45c10:	21800e2e 	bgeu	r4,r6,45c4c <memset+0xac>
   45c14:	1813883a 	mov	r9,r3
   45c18:	3011883a 	mov	r8,r6
   45c1c:	010000c4 	movi	r4,3
   45c20:	49c00015 	stw	r7,0(r9)
   45c24:	423fff04 	addi	r8,r8,-4
   45c28:	4a400104 	addi	r9,r9,4
   45c2c:	223ffc36 	bltu	r4,r8,45c20 <memset+0x80>
   45c30:	313fff04 	addi	r4,r6,-4
   45c34:	2008d0ba 	srli	r4,r4,2
   45c38:	318000cc 	andi	r6,r6,3
   45c3c:	21000044 	addi	r4,r4,1
   45c40:	2109883a 	add	r4,r4,r4
   45c44:	2109883a 	add	r4,r4,r4
   45c48:	1907883a 	add	r3,r3,r4
   45c4c:	30000a26 	beq	r6,zero,45c78 <memset+0xd8>
   45c50:	198d883a 	add	r6,r3,r6
   45c54:	19400005 	stb	r5,0(r3)
   45c58:	18c00044 	addi	r3,r3,1
   45c5c:	19bffd1e 	bne	r3,r6,45c54 <memset+0xb4>
   45c60:	f800283a 	ret
   45c64:	2007883a 	mov	r3,r4
   45c68:	303ff91e 	bne	r6,zero,45c50 <memset+0xb0>
   45c6c:	00000206 	br	45c78 <memset+0xd8>
   45c70:	2007883a 	mov	r3,r4
   45c74:	003ff606 	br	45c50 <memset+0xb0>
   45c78:	f800283a 	ret

00045c7c <_Balloc>:
   45c7c:	20801317 	ldw	r2,76(r4)
   45c80:	defffc04 	addi	sp,sp,-16
   45c84:	dc400115 	stw	r17,4(sp)
   45c88:	dc000015 	stw	r16,0(sp)
   45c8c:	dfc00315 	stw	ra,12(sp)
   45c90:	dc800215 	stw	r18,8(sp)
   45c94:	2023883a 	mov	r17,r4
   45c98:	2821883a 	mov	r16,r5
   45c9c:	10000f26 	beq	r2,zero,45cdc <_Balloc+0x60>
   45ca0:	8407883a 	add	r3,r16,r16
   45ca4:	18c7883a 	add	r3,r3,r3
   45ca8:	10c7883a 	add	r3,r2,r3
   45cac:	18800017 	ldw	r2,0(r3)
   45cb0:	10001126 	beq	r2,zero,45cf8 <_Balloc+0x7c>
   45cb4:	11000017 	ldw	r4,0(r2)
   45cb8:	19000015 	stw	r4,0(r3)
   45cbc:	10000415 	stw	zero,16(r2)
   45cc0:	10000315 	stw	zero,12(r2)
   45cc4:	dfc00317 	ldw	ra,12(sp)
   45cc8:	dc800217 	ldw	r18,8(sp)
   45ccc:	dc400117 	ldw	r17,4(sp)
   45cd0:	dc000017 	ldw	r16,0(sp)
   45cd4:	dec00404 	addi	sp,sp,16
   45cd8:	f800283a 	ret
   45cdc:	01400104 	movi	r5,4
   45ce0:	01800404 	movi	r6,16
   45ce4:	00475c40 	call	475c4 <_calloc_r>
   45ce8:	88801315 	stw	r2,76(r17)
   45cec:	103fec1e 	bne	r2,zero,45ca0 <_Balloc+0x24>
   45cf0:	0005883a 	mov	r2,zero
   45cf4:	003ff306 	br	45cc4 <_Balloc+0x48>
   45cf8:	01400044 	movi	r5,1
   45cfc:	2c24983a 	sll	r18,r5,r16
   45d00:	8809883a 	mov	r4,r17
   45d04:	91800144 	addi	r6,r18,5
   45d08:	318d883a 	add	r6,r6,r6
   45d0c:	318d883a 	add	r6,r6,r6
   45d10:	00475c40 	call	475c4 <_calloc_r>
   45d14:	103ff626 	beq	r2,zero,45cf0 <_Balloc+0x74>
   45d18:	14000115 	stw	r16,4(r2)
   45d1c:	14800215 	stw	r18,8(r2)
   45d20:	003fe606 	br	45cbc <_Balloc+0x40>

00045d24 <_Bfree>:
   45d24:	28000826 	beq	r5,zero,45d48 <_Bfree+0x24>
   45d28:	28c00117 	ldw	r3,4(r5)
   45d2c:	20801317 	ldw	r2,76(r4)
   45d30:	18c7883a 	add	r3,r3,r3
   45d34:	18c7883a 	add	r3,r3,r3
   45d38:	10c5883a 	add	r2,r2,r3
   45d3c:	10c00017 	ldw	r3,0(r2)
   45d40:	28c00015 	stw	r3,0(r5)
   45d44:	11400015 	stw	r5,0(r2)
   45d48:	f800283a 	ret

00045d4c <__multadd>:
   45d4c:	defffa04 	addi	sp,sp,-24
   45d50:	dc000115 	stw	r16,4(sp)
   45d54:	2c000417 	ldw	r16,16(r5)
   45d58:	dc800315 	stw	r18,12(sp)
   45d5c:	dc400215 	stw	r17,8(sp)
   45d60:	dfc00515 	stw	ra,20(sp)
   45d64:	dcc00415 	stw	r19,16(sp)
   45d68:	2823883a 	mov	r17,r5
   45d6c:	2025883a 	mov	r18,r4
   45d70:	28c00504 	addi	r3,r5,20
   45d74:	0011883a 	mov	r8,zero
   45d78:	1a800017 	ldw	r10,0(r3)
   45d7c:	18c00104 	addi	r3,r3,4
   45d80:	42000044 	addi	r8,r8,1
   45d84:	527fffcc 	andi	r9,r10,65535
   45d88:	4993383a 	mul	r9,r9,r6
   45d8c:	5014d43a 	srli	r10,r10,16
   45d90:	49d3883a 	add	r9,r9,r7
   45d94:	480ed43a 	srli	r7,r9,16
   45d98:	5195383a 	mul	r10,r10,r6
   45d9c:	4a7fffcc 	andi	r9,r9,65535
   45da0:	3a8f883a 	add	r7,r7,r10
   45da4:	3814943a 	slli	r10,r7,16
   45da8:	380ed43a 	srli	r7,r7,16
   45dac:	5253883a 	add	r9,r10,r9
   45db0:	1a7fff15 	stw	r9,-4(r3)
   45db4:	443ff016 	blt	r8,r16,45d78 <__multadd+0x2c>
   45db8:	38000926 	beq	r7,zero,45de0 <__multadd+0x94>
   45dbc:	88800217 	ldw	r2,8(r17)
   45dc0:	80800f0e 	bge	r16,r2,45e00 <__multadd+0xb4>
   45dc4:	80800144 	addi	r2,r16,5
   45dc8:	1085883a 	add	r2,r2,r2
   45dcc:	1085883a 	add	r2,r2,r2
   45dd0:	8885883a 	add	r2,r17,r2
   45dd4:	84000044 	addi	r16,r16,1
   45dd8:	11c00015 	stw	r7,0(r2)
   45ddc:	8c000415 	stw	r16,16(r17)
   45de0:	8805883a 	mov	r2,r17
   45de4:	dfc00517 	ldw	ra,20(sp)
   45de8:	dcc00417 	ldw	r19,16(sp)
   45dec:	dc800317 	ldw	r18,12(sp)
   45df0:	dc400217 	ldw	r17,8(sp)
   45df4:	dc000117 	ldw	r16,4(sp)
   45df8:	dec00604 	addi	sp,sp,24
   45dfc:	f800283a 	ret
   45e00:	89400117 	ldw	r5,4(r17)
   45e04:	9009883a 	mov	r4,r18
   45e08:	d9c00015 	stw	r7,0(sp)
   45e0c:	29400044 	addi	r5,r5,1
   45e10:	0045c7c0 	call	45c7c <_Balloc>
   45e14:	89800417 	ldw	r6,16(r17)
   45e18:	89400304 	addi	r5,r17,12
   45e1c:	11000304 	addi	r4,r2,12
   45e20:	31800084 	addi	r6,r6,2
   45e24:	318d883a 	add	r6,r6,r6
   45e28:	318d883a 	add	r6,r6,r6
   45e2c:	1027883a 	mov	r19,r2
   45e30:	00459800 	call	45980 <memcpy>
   45e34:	88c00117 	ldw	r3,4(r17)
   45e38:	90801317 	ldw	r2,76(r18)
   45e3c:	d9c00017 	ldw	r7,0(sp)
   45e40:	18c7883a 	add	r3,r3,r3
   45e44:	18c7883a 	add	r3,r3,r3
   45e48:	10c5883a 	add	r2,r2,r3
   45e4c:	10c00017 	ldw	r3,0(r2)
   45e50:	88c00015 	stw	r3,0(r17)
   45e54:	14400015 	stw	r17,0(r2)
   45e58:	9823883a 	mov	r17,r19
   45e5c:	003fd906 	br	45dc4 <__multadd+0x78>

00045e60 <__s2b>:
   45e60:	defff904 	addi	sp,sp,-28
   45e64:	dd000415 	stw	r20,16(sp)
   45e68:	dc400115 	stw	r17,4(sp)
   45e6c:	2829883a 	mov	r20,r5
   45e70:	2023883a 	mov	r17,r4
   45e74:	01400244 	movi	r5,9
   45e78:	39000204 	addi	r4,r7,8
   45e7c:	dcc00315 	stw	r19,12(sp)
   45e80:	dc800215 	stw	r18,8(sp)
   45e84:	dfc00615 	stw	ra,24(sp)
   45e88:	dd400515 	stw	r21,20(sp)
   45e8c:	dc000015 	stw	r16,0(sp)
   45e90:	3825883a 	mov	r18,r7
   45e94:	3027883a 	mov	r19,r6
   45e98:	00406340 	call	40634 <__divsi3>
   45e9c:	00c00044 	movi	r3,1
   45ea0:	000b883a 	mov	r5,zero
   45ea4:	1880030e 	bge	r3,r2,45eb4 <__s2b+0x54>
   45ea8:	18c7883a 	add	r3,r3,r3
   45eac:	29400044 	addi	r5,r5,1
   45eb0:	18bffd16 	blt	r3,r2,45ea8 <__s2b+0x48>
   45eb4:	8809883a 	mov	r4,r17
   45eb8:	0045c7c0 	call	45c7c <_Balloc>
   45ebc:	d8c00717 	ldw	r3,28(sp)
   45ec0:	10c00515 	stw	r3,20(r2)
   45ec4:	00c00044 	movi	r3,1
   45ec8:	10c00415 	stw	r3,16(r2)
   45ecc:	00c00244 	movi	r3,9
   45ed0:	1cc0210e 	bge	r3,r19,45f58 <__s2b+0xf8>
   45ed4:	a0eb883a 	add	r21,r20,r3
   45ed8:	a821883a 	mov	r16,r21
   45edc:	a4e9883a 	add	r20,r20,r19
   45ee0:	81c00007 	ldb	r7,0(r16)
   45ee4:	8809883a 	mov	r4,r17
   45ee8:	84000044 	addi	r16,r16,1
   45eec:	100b883a 	mov	r5,r2
   45ef0:	01800284 	movi	r6,10
   45ef4:	39fff404 	addi	r7,r7,-48
   45ef8:	0045d4c0 	call	45d4c <__multadd>
   45efc:	853ff81e 	bne	r16,r20,45ee0 <__s2b+0x80>
   45f00:	ace1883a 	add	r16,r21,r19
   45f04:	843ffe04 	addi	r16,r16,-8
   45f08:	9c800a0e 	bge	r19,r18,45f34 <__s2b+0xd4>
   45f0c:	94e5c83a 	sub	r18,r18,r19
   45f10:	84a5883a 	add	r18,r16,r18
   45f14:	81c00007 	ldb	r7,0(r16)
   45f18:	8809883a 	mov	r4,r17
   45f1c:	84000044 	addi	r16,r16,1
   45f20:	100b883a 	mov	r5,r2
   45f24:	01800284 	movi	r6,10
   45f28:	39fff404 	addi	r7,r7,-48
   45f2c:	0045d4c0 	call	45d4c <__multadd>
   45f30:	84bff81e 	bne	r16,r18,45f14 <__s2b+0xb4>
   45f34:	dfc00617 	ldw	ra,24(sp)
   45f38:	dd400517 	ldw	r21,20(sp)
   45f3c:	dd000417 	ldw	r20,16(sp)
   45f40:	dcc00317 	ldw	r19,12(sp)
   45f44:	dc800217 	ldw	r18,8(sp)
   45f48:	dc400117 	ldw	r17,4(sp)
   45f4c:	dc000017 	ldw	r16,0(sp)
   45f50:	dec00704 	addi	sp,sp,28
   45f54:	f800283a 	ret
   45f58:	a4000284 	addi	r16,r20,10
   45f5c:	1827883a 	mov	r19,r3
   45f60:	003fe906 	br	45f08 <__s2b+0xa8>

00045f64 <__hi0bits>:
   45f64:	20bfffec 	andhi	r2,r4,65535
   45f68:	1000141e 	bne	r2,zero,45fbc <__hi0bits+0x58>
   45f6c:	2008943a 	slli	r4,r4,16
   45f70:	00800404 	movi	r2,16
   45f74:	20ffc02c 	andhi	r3,r4,65280
   45f78:	1800021e 	bne	r3,zero,45f84 <__hi0bits+0x20>
   45f7c:	2008923a 	slli	r4,r4,8
   45f80:	10800204 	addi	r2,r2,8
   45f84:	20fc002c 	andhi	r3,r4,61440
   45f88:	1800021e 	bne	r3,zero,45f94 <__hi0bits+0x30>
   45f8c:	2008913a 	slli	r4,r4,4
   45f90:	10800104 	addi	r2,r2,4
   45f94:	20f0002c 	andhi	r3,r4,49152
   45f98:	1800031e 	bne	r3,zero,45fa8 <__hi0bits+0x44>
   45f9c:	2109883a 	add	r4,r4,r4
   45fa0:	10800084 	addi	r2,r2,2
   45fa4:	2109883a 	add	r4,r4,r4
   45fa8:	20000316 	blt	r4,zero,45fb8 <__hi0bits+0x54>
   45fac:	2110002c 	andhi	r4,r4,16384
   45fb0:	2000041e 	bne	r4,zero,45fc4 <__hi0bits+0x60>
   45fb4:	00800804 	movi	r2,32
   45fb8:	f800283a 	ret
   45fbc:	0005883a 	mov	r2,zero
   45fc0:	003fec06 	br	45f74 <__hi0bits+0x10>
   45fc4:	10800044 	addi	r2,r2,1
   45fc8:	f800283a 	ret

00045fcc <__lo0bits>:
   45fcc:	20c00017 	ldw	r3,0(r4)
   45fd0:	188001cc 	andi	r2,r3,7
   45fd4:	10000826 	beq	r2,zero,45ff8 <__lo0bits+0x2c>
   45fd8:	1880004c 	andi	r2,r3,1
   45fdc:	1000211e 	bne	r2,zero,46064 <__lo0bits+0x98>
   45fe0:	1880008c 	andi	r2,r3,2
   45fe4:	1000211e 	bne	r2,zero,4606c <__lo0bits+0xa0>
   45fe8:	1806d0ba 	srli	r3,r3,2
   45fec:	00800084 	movi	r2,2
   45ff0:	20c00015 	stw	r3,0(r4)
   45ff4:	f800283a 	ret
   45ff8:	18bfffcc 	andi	r2,r3,65535
   45ffc:	10001326 	beq	r2,zero,4604c <__lo0bits+0x80>
   46000:	0005883a 	mov	r2,zero
   46004:	19403fcc 	andi	r5,r3,255
   46008:	2800021e 	bne	r5,zero,46014 <__lo0bits+0x48>
   4600c:	1806d23a 	srli	r3,r3,8
   46010:	10800204 	addi	r2,r2,8
   46014:	194003cc 	andi	r5,r3,15
   46018:	2800021e 	bne	r5,zero,46024 <__lo0bits+0x58>
   4601c:	1806d13a 	srli	r3,r3,4
   46020:	10800104 	addi	r2,r2,4
   46024:	194000cc 	andi	r5,r3,3
   46028:	2800021e 	bne	r5,zero,46034 <__lo0bits+0x68>
   4602c:	1806d0ba 	srli	r3,r3,2
   46030:	10800084 	addi	r2,r2,2
   46034:	1940004c 	andi	r5,r3,1
   46038:	2800081e 	bne	r5,zero,4605c <__lo0bits+0x90>
   4603c:	1806d07a 	srli	r3,r3,1
   46040:	1800051e 	bne	r3,zero,46058 <__lo0bits+0x8c>
   46044:	00800804 	movi	r2,32
   46048:	f800283a 	ret
   4604c:	1806d43a 	srli	r3,r3,16
   46050:	00800404 	movi	r2,16
   46054:	003feb06 	br	46004 <__lo0bits+0x38>
   46058:	10800044 	addi	r2,r2,1
   4605c:	20c00015 	stw	r3,0(r4)
   46060:	f800283a 	ret
   46064:	0005883a 	mov	r2,zero
   46068:	f800283a 	ret
   4606c:	1806d07a 	srli	r3,r3,1
   46070:	00800044 	movi	r2,1
   46074:	20c00015 	stw	r3,0(r4)
   46078:	f800283a 	ret

0004607c <__i2b>:
   4607c:	defffd04 	addi	sp,sp,-12
   46080:	dc000015 	stw	r16,0(sp)
   46084:	04000044 	movi	r16,1
   46088:	dc400115 	stw	r17,4(sp)
   4608c:	2823883a 	mov	r17,r5
   46090:	800b883a 	mov	r5,r16
   46094:	dfc00215 	stw	ra,8(sp)
   46098:	0045c7c0 	call	45c7c <_Balloc>
   4609c:	14400515 	stw	r17,20(r2)
   460a0:	14000415 	stw	r16,16(r2)
   460a4:	dfc00217 	ldw	ra,8(sp)
   460a8:	dc400117 	ldw	r17,4(sp)
   460ac:	dc000017 	ldw	r16,0(sp)
   460b0:	dec00304 	addi	sp,sp,12
   460b4:	f800283a 	ret

000460b8 <__multiply>:
   460b8:	defffa04 	addi	sp,sp,-24
   460bc:	dcc00315 	stw	r19,12(sp)
   460c0:	dc400115 	stw	r17,4(sp)
   460c4:	34c00417 	ldw	r19,16(r6)
   460c8:	2c400417 	ldw	r17,16(r5)
   460cc:	dd000415 	stw	r20,16(sp)
   460d0:	dc800215 	stw	r18,8(sp)
   460d4:	dfc00515 	stw	ra,20(sp)
   460d8:	dc000015 	stw	r16,0(sp)
   460dc:	2825883a 	mov	r18,r5
   460e0:	3029883a 	mov	r20,r6
   460e4:	8cc0050e 	bge	r17,r19,460fc <__multiply+0x44>
   460e8:	8807883a 	mov	r3,r17
   460ec:	3025883a 	mov	r18,r6
   460f0:	9823883a 	mov	r17,r19
   460f4:	2829883a 	mov	r20,r5
   460f8:	1827883a 	mov	r19,r3
   460fc:	90800217 	ldw	r2,8(r18)
   46100:	8ce1883a 	add	r16,r17,r19
   46104:	91400117 	ldw	r5,4(r18)
   46108:	1400010e 	bge	r2,r16,46110 <__multiply+0x58>
   4610c:	29400044 	addi	r5,r5,1
   46110:	0045c7c0 	call	45c7c <_Balloc>
   46114:	83c00144 	addi	r15,r16,5
   46118:	7bdf883a 	add	r15,r15,r15
   4611c:	7bdf883a 	add	r15,r15,r15
   46120:	13800504 	addi	r14,r2,20
   46124:	13df883a 	add	r15,r2,r15
   46128:	7007883a 	mov	r3,r14
   4612c:	73c0032e 	bgeu	r14,r15,4613c <__multiply+0x84>
   46130:	18000015 	stw	zero,0(r3)
   46134:	18c00104 	addi	r3,r3,4
   46138:	1bfffd36 	bltu	r3,r15,46130 <__multiply+0x78>
   4613c:	99800144 	addi	r6,r19,5
   46140:	8b000144 	addi	r12,r17,5
   46144:	318d883a 	add	r6,r6,r6
   46148:	6319883a 	add	r12,r12,r12
   4614c:	318d883a 	add	r6,r6,r6
   46150:	6319883a 	add	r12,r12,r12
   46154:	a3400504 	addi	r13,r20,20
   46158:	a18d883a 	add	r6,r20,r6
   4615c:	94400504 	addi	r17,r18,20
   46160:	9319883a 	add	r12,r18,r12
   46164:	6980392e 	bgeu	r13,r6,4624c <__multiply+0x194>
   46168:	6a800017 	ldw	r10,0(r13)
   4616c:	52ffffcc 	andi	r11,r10,65535
   46170:	58001826 	beq	r11,zero,461d4 <__multiply+0x11c>
   46174:	7007883a 	mov	r3,r14
   46178:	8809883a 	mov	r4,r17
   4617c:	000b883a 	mov	r5,zero
   46180:	22400017 	ldw	r9,0(r4)
   46184:	1a000017 	ldw	r8,0(r3)
   46188:	21000104 	addi	r4,r4,4
   4618c:	49ffffcc 	andi	r7,r9,65535
   46190:	3acf383a 	mul	r7,r7,r11
   46194:	4812d43a 	srli	r9,r9,16
   46198:	42bfffcc 	andi	r10,r8,65535
   4619c:	3a8f883a 	add	r7,r7,r10
   461a0:	394f883a 	add	r7,r7,r5
   461a4:	4010d43a 	srli	r8,r8,16
   461a8:	4acb383a 	mul	r5,r9,r11
   461ac:	3814d43a 	srli	r10,r7,16
   461b0:	19c0000d 	sth	r7,0(r3)
   461b4:	2a0b883a 	add	r5,r5,r8
   461b8:	2a8b883a 	add	r5,r5,r10
   461bc:	1940008d 	sth	r5,2(r3)
   461c0:	280ad43a 	srli	r5,r5,16
   461c4:	18c00104 	addi	r3,r3,4
   461c8:	233fed36 	bltu	r4,r12,46180 <__multiply+0xc8>
   461cc:	19400015 	stw	r5,0(r3)
   461d0:	6a800017 	ldw	r10,0(r13)
   461d4:	5014d43a 	srli	r10,r10,16
   461d8:	50001926 	beq	r10,zero,46240 <__multiply+0x188>
   461dc:	71400017 	ldw	r5,0(r14)
   461e0:	7007883a 	mov	r3,r14
   461e4:	8809883a 	mov	r4,r17
   461e8:	280f883a 	mov	r7,r5
   461ec:	0017883a 	mov	r11,zero
   461f0:	22400017 	ldw	r9,0(r4)
   461f4:	380ed43a 	srli	r7,r7,16
   461f8:	1940000d 	sth	r5,0(r3)
   461fc:	4a3fffcc 	andi	r8,r9,65535
   46200:	4291383a 	mul	r8,r8,r10
   46204:	4812d43a 	srli	r9,r9,16
   46208:	18c00104 	addi	r3,r3,4
   4620c:	41d1883a 	add	r8,r8,r7
   46210:	19c00017 	ldw	r7,0(r3)
   46214:	42d1883a 	add	r8,r8,r11
   46218:	4a93383a 	mul	r9,r9,r10
   4621c:	1a3fff8d 	sth	r8,-2(r3)
   46220:	4010d43a 	srli	r8,r8,16
   46224:	397fffcc 	andi	r5,r7,65535
   46228:	2a4b883a 	add	r5,r5,r9
   4622c:	2a0b883a 	add	r5,r5,r8
   46230:	21000104 	addi	r4,r4,4
   46234:	2816d43a 	srli	r11,r5,16
   46238:	233fed36 	bltu	r4,r12,461f0 <__multiply+0x138>
   4623c:	19400015 	stw	r5,0(r3)
   46240:	6b400104 	addi	r13,r13,4
   46244:	73800104 	addi	r14,r14,4
   46248:	69bfc736 	bltu	r13,r6,46168 <__multiply+0xb0>
   4624c:	0400090e 	bge	zero,r16,46274 <__multiply+0x1bc>
   46250:	78ffff17 	ldw	r3,-4(r15)
   46254:	7bffff04 	addi	r15,r15,-4
   46258:	18000326 	beq	r3,zero,46268 <__multiply+0x1b0>
   4625c:	00000506 	br	46274 <__multiply+0x1bc>
   46260:	78c00017 	ldw	r3,0(r15)
   46264:	1800031e 	bne	r3,zero,46274 <__multiply+0x1bc>
   46268:	843fffc4 	addi	r16,r16,-1
   4626c:	7bffff04 	addi	r15,r15,-4
   46270:	803ffb1e 	bne	r16,zero,46260 <__multiply+0x1a8>
   46274:	14000415 	stw	r16,16(r2)
   46278:	dfc00517 	ldw	ra,20(sp)
   4627c:	dd000417 	ldw	r20,16(sp)
   46280:	dcc00317 	ldw	r19,12(sp)
   46284:	dc800217 	ldw	r18,8(sp)
   46288:	dc400117 	ldw	r17,4(sp)
   4628c:	dc000017 	ldw	r16,0(sp)
   46290:	dec00604 	addi	sp,sp,24
   46294:	f800283a 	ret

00046298 <__pow5mult>:
   46298:	defffb04 	addi	sp,sp,-20
   4629c:	dcc00315 	stw	r19,12(sp)
   462a0:	dc800215 	stw	r18,8(sp)
   462a4:	dc000015 	stw	r16,0(sp)
   462a8:	dfc00415 	stw	ra,16(sp)
   462ac:	dc400115 	stw	r17,4(sp)
   462b0:	308000cc 	andi	r2,r6,3
   462b4:	3021883a 	mov	r16,r6
   462b8:	2027883a 	mov	r19,r4
   462bc:	2825883a 	mov	r18,r5
   462c0:	10002e1e 	bne	r2,zero,4637c <__pow5mult+0xe4>
   462c4:	8021d0ba 	srai	r16,r16,2
   462c8:	80001a26 	beq	r16,zero,46334 <__pow5mult+0x9c>
   462cc:	9c401217 	ldw	r17,72(r19)
   462d0:	8800061e 	bne	r17,zero,462ec <__pow5mult+0x54>
   462d4:	00003406 	br	463a8 <__pow5mult+0x110>
   462d8:	8021d07a 	srai	r16,r16,1
   462dc:	80001526 	beq	r16,zero,46334 <__pow5mult+0x9c>
   462e0:	88c00017 	ldw	r3,0(r17)
   462e4:	18001b26 	beq	r3,zero,46354 <__pow5mult+0xbc>
   462e8:	1823883a 	mov	r17,r3
   462ec:	80c0004c 	andi	r3,r16,1
   462f0:	183ff926 	beq	r3,zero,462d8 <__pow5mult+0x40>
   462f4:	900b883a 	mov	r5,r18
   462f8:	880d883a 	mov	r6,r17
   462fc:	9809883a 	mov	r4,r19
   46300:	00460b80 	call	460b8 <__multiply>
   46304:	90001b26 	beq	r18,zero,46374 <__pow5mult+0xdc>
   46308:	91000117 	ldw	r4,4(r18)
   4630c:	98c01317 	ldw	r3,76(r19)
   46310:	8021d07a 	srai	r16,r16,1
   46314:	2109883a 	add	r4,r4,r4
   46318:	2109883a 	add	r4,r4,r4
   4631c:	1907883a 	add	r3,r3,r4
   46320:	19000017 	ldw	r4,0(r3)
   46324:	91000015 	stw	r4,0(r18)
   46328:	1c800015 	stw	r18,0(r3)
   4632c:	1025883a 	mov	r18,r2
   46330:	803feb1e 	bne	r16,zero,462e0 <__pow5mult+0x48>
   46334:	9005883a 	mov	r2,r18
   46338:	dfc00417 	ldw	ra,16(sp)
   4633c:	dcc00317 	ldw	r19,12(sp)
   46340:	dc800217 	ldw	r18,8(sp)
   46344:	dc400117 	ldw	r17,4(sp)
   46348:	dc000017 	ldw	r16,0(sp)
   4634c:	dec00504 	addi	sp,sp,20
   46350:	f800283a 	ret
   46354:	880b883a 	mov	r5,r17
   46358:	880d883a 	mov	r6,r17
   4635c:	9809883a 	mov	r4,r19
   46360:	00460b80 	call	460b8 <__multiply>
   46364:	88800015 	stw	r2,0(r17)
   46368:	10000015 	stw	zero,0(r2)
   4636c:	1023883a 	mov	r17,r2
   46370:	003fde06 	br	462ec <__pow5mult+0x54>
   46374:	1025883a 	mov	r18,r2
   46378:	003fd706 	br	462d8 <__pow5mult+0x40>
   4637c:	10bfffc4 	addi	r2,r2,-1
   46380:	1085883a 	add	r2,r2,r2
   46384:	00c00174 	movhi	r3,5
   46388:	18f1ca04 	addi	r3,r3,-14552
   4638c:	1085883a 	add	r2,r2,r2
   46390:	1885883a 	add	r2,r3,r2
   46394:	11800017 	ldw	r6,0(r2)
   46398:	000f883a 	mov	r7,zero
   4639c:	0045d4c0 	call	45d4c <__multadd>
   463a0:	1025883a 	mov	r18,r2
   463a4:	003fc706 	br	462c4 <__pow5mult+0x2c>
   463a8:	9809883a 	mov	r4,r19
   463ac:	01409c44 	movi	r5,625
   463b0:	004607c0 	call	4607c <__i2b>
   463b4:	98801215 	stw	r2,72(r19)
   463b8:	1023883a 	mov	r17,r2
   463bc:	10000015 	stw	zero,0(r2)
   463c0:	003fca06 	br	462ec <__pow5mult+0x54>

000463c4 <__lshift>:
   463c4:	defff904 	addi	sp,sp,-28
   463c8:	dd400515 	stw	r21,20(sp)
   463cc:	dc400115 	stw	r17,4(sp)
   463d0:	2d400417 	ldw	r21,16(r5)
   463d4:	3023d17a 	srai	r17,r6,5
   463d8:	28800217 	ldw	r2,8(r5)
   463dc:	dd000415 	stw	r20,16(sp)
   463e0:	8d6b883a 	add	r21,r17,r21
   463e4:	dcc00315 	stw	r19,12(sp)
   463e8:	dc800215 	stw	r18,8(sp)
   463ec:	dc000015 	stw	r16,0(sp)
   463f0:	dfc00615 	stw	ra,24(sp)
   463f4:	ac000044 	addi	r16,r21,1
   463f8:	2825883a 	mov	r18,r5
   463fc:	3029883a 	mov	r20,r6
   46400:	2027883a 	mov	r19,r4
   46404:	29400117 	ldw	r5,4(r5)
   46408:	1400030e 	bge	r2,r16,46418 <__lshift+0x54>
   4640c:	1085883a 	add	r2,r2,r2
   46410:	29400044 	addi	r5,r5,1
   46414:	143ffd16 	blt	r2,r16,4640c <__lshift+0x48>
   46418:	9809883a 	mov	r4,r19
   4641c:	0045c7c0 	call	45c7c <_Balloc>
   46420:	10c00504 	addi	r3,r2,20
   46424:	0440090e 	bge	zero,r17,4644c <__lshift+0x88>
   46428:	000f883a 	mov	r7,zero
   4642c:	18000015 	stw	zero,0(r3)
   46430:	39c00044 	addi	r7,r7,1
   46434:	18c00104 	addi	r3,r3,4
   46438:	3c7ffc1e 	bne	r7,r17,4642c <__lshift+0x68>
   4643c:	38c00144 	addi	r3,r7,5
   46440:	18c7883a 	add	r3,r3,r3
   46444:	18c7883a 	add	r3,r3,r3
   46448:	10c7883a 	add	r3,r2,r3
   4644c:	92000417 	ldw	r8,16(r18)
   46450:	a18007cc 	andi	r6,r20,31
   46454:	91c00504 	addi	r7,r18,20
   46458:	42000144 	addi	r8,r8,5
   4645c:	4211883a 	add	r8,r8,r8
   46460:	4211883a 	add	r8,r8,r8
   46464:	9211883a 	add	r8,r18,r8
   46468:	30002226 	beq	r6,zero,464f4 <__lshift+0x130>
   4646c:	02800804 	movi	r10,32
   46470:	5195c83a 	sub	r10,r10,r6
   46474:	000b883a 	mov	r5,zero
   46478:	3a400017 	ldw	r9,0(r7)
   4647c:	18c00104 	addi	r3,r3,4
   46480:	39c00104 	addi	r7,r7,4
   46484:	4992983a 	sll	r9,r9,r6
   46488:	2a4ab03a 	or	r5,r5,r9
   4648c:	197fff15 	stw	r5,-4(r3)
   46490:	397fff17 	ldw	r5,-4(r7)
   46494:	2a8ad83a 	srl	r5,r5,r10
   46498:	3a3ff736 	bltu	r7,r8,46478 <__lshift+0xb4>
   4649c:	19400015 	stw	r5,0(r3)
   464a0:	28000126 	beq	r5,zero,464a8 <__lshift+0xe4>
   464a4:	ac000084 	addi	r16,r21,2
   464a8:	91000117 	ldw	r4,4(r18)
   464ac:	98c01317 	ldw	r3,76(r19)
   464b0:	843fffc4 	addi	r16,r16,-1
   464b4:	2109883a 	add	r4,r4,r4
   464b8:	2109883a 	add	r4,r4,r4
   464bc:	1907883a 	add	r3,r3,r4
   464c0:	19000017 	ldw	r4,0(r3)
   464c4:	14000415 	stw	r16,16(r2)
   464c8:	91000015 	stw	r4,0(r18)
   464cc:	1c800015 	stw	r18,0(r3)
   464d0:	dfc00617 	ldw	ra,24(sp)
   464d4:	dd400517 	ldw	r21,20(sp)
   464d8:	dd000417 	ldw	r20,16(sp)
   464dc:	dcc00317 	ldw	r19,12(sp)
   464e0:	dc800217 	ldw	r18,8(sp)
   464e4:	dc400117 	ldw	r17,4(sp)
   464e8:	dc000017 	ldw	r16,0(sp)
   464ec:	dec00704 	addi	sp,sp,28
   464f0:	f800283a 	ret
   464f4:	39400017 	ldw	r5,0(r7)
   464f8:	18c00104 	addi	r3,r3,4
   464fc:	39c00104 	addi	r7,r7,4
   46500:	197fff15 	stw	r5,-4(r3)
   46504:	3a3fe82e 	bgeu	r7,r8,464a8 <__lshift+0xe4>
   46508:	39400017 	ldw	r5,0(r7)
   4650c:	18c00104 	addi	r3,r3,4
   46510:	39c00104 	addi	r7,r7,4
   46514:	197fff15 	stw	r5,-4(r3)
   46518:	3a3ff636 	bltu	r7,r8,464f4 <__lshift+0x130>
   4651c:	003fe206 	br	464a8 <__lshift+0xe4>

00046520 <__mcmp>:
   46520:	20800417 	ldw	r2,16(r4)
   46524:	28c00417 	ldw	r3,16(r5)
   46528:	10c5c83a 	sub	r2,r2,r3
   4652c:	10000f1e 	bne	r2,zero,4656c <__mcmp+0x4c>
   46530:	18c00144 	addi	r3,r3,5
   46534:	18c7883a 	add	r3,r3,r3
   46538:	18c7883a 	add	r3,r3,r3
   4653c:	21c00504 	addi	r7,r4,20
   46540:	28cb883a 	add	r5,r5,r3
   46544:	20c9883a 	add	r4,r4,r3
   46548:	213fff04 	addi	r4,r4,-4
   4654c:	297fff04 	addi	r5,r5,-4
   46550:	21800017 	ldw	r6,0(r4)
   46554:	28c00017 	ldw	r3,0(r5)
   46558:	30c0021e 	bne	r6,r3,46564 <__mcmp+0x44>
   4655c:	393ffa36 	bltu	r7,r4,46548 <__mcmp+0x28>
   46560:	f800283a 	ret
   46564:	30c00236 	bltu	r6,r3,46570 <__mcmp+0x50>
   46568:	00800044 	movi	r2,1
   4656c:	f800283a 	ret
   46570:	00bfffc4 	movi	r2,-1
   46574:	f800283a 	ret

00046578 <__mdiff>:
   46578:	defffb04 	addi	sp,sp,-20
   4657c:	dc000015 	stw	r16,0(sp)
   46580:	2821883a 	mov	r16,r5
   46584:	dc800215 	stw	r18,8(sp)
   46588:	300b883a 	mov	r5,r6
   4658c:	2025883a 	mov	r18,r4
   46590:	8009883a 	mov	r4,r16
   46594:	dc400115 	stw	r17,4(sp)
   46598:	dfc00415 	stw	ra,16(sp)
   4659c:	dcc00315 	stw	r19,12(sp)
   465a0:	3023883a 	mov	r17,r6
   465a4:	00465200 	call	46520 <__mcmp>
   465a8:	10005026 	beq	r2,zero,466ec <__mdiff+0x174>
   465ac:	10004a16 	blt	r2,zero,466d8 <__mdiff+0x160>
   465b0:	0027883a 	mov	r19,zero
   465b4:	81400117 	ldw	r5,4(r16)
   465b8:	9009883a 	mov	r4,r18
   465bc:	0045c7c0 	call	45c7c <_Balloc>
   465c0:	82400417 	ldw	r9,16(r16)
   465c4:	89800417 	ldw	r6,16(r17)
   465c8:	14c00315 	stw	r19,12(r2)
   465cc:	4b800144 	addi	r14,r9,5
   465d0:	31800144 	addi	r6,r6,5
   465d4:	739d883a 	add	r14,r14,r14
   465d8:	318d883a 	add	r6,r6,r6
   465dc:	739d883a 	add	r14,r14,r14
   465e0:	318d883a 	add	r6,r6,r6
   465e4:	81c00504 	addi	r7,r16,20
   465e8:	839d883a 	add	r14,r16,r14
   465ec:	8a000504 	addi	r8,r17,20
   465f0:	898d883a 	add	r6,r17,r6
   465f4:	10c00504 	addi	r3,r2,20
   465f8:	0009883a 	mov	r4,zero
   465fc:	3b000017 	ldw	r12,0(r7)
   46600:	42c00017 	ldw	r11,0(r8)
   46604:	42000104 	addi	r8,r8,4
   46608:	62bfffcc 	andi	r10,r12,65535
   4660c:	5b7fffcc 	andi	r13,r11,65535
   46610:	5109883a 	add	r4,r10,r4
   46614:	2355c83a 	sub	r10,r4,r13
   46618:	5816d43a 	srli	r11,r11,16
   4661c:	6008d43a 	srli	r4,r12,16
   46620:	501bd43a 	srai	r13,r10,16
   46624:	1a80000d 	sth	r10,0(r3)
   46628:	22c9c83a 	sub	r4,r4,r11
   4662c:	2349883a 	add	r4,r4,r13
   46630:	1900008d 	sth	r4,2(r3)
   46634:	39c00104 	addi	r7,r7,4
   46638:	2009d43a 	srai	r4,r4,16
   4663c:	18c00104 	addi	r3,r3,4
   46640:	41bfee36 	bltu	r8,r6,465fc <__mdiff+0x84>
   46644:	180b883a 	mov	r5,r3
   46648:	3815883a 	mov	r10,r7
   4664c:	3b80132e 	bgeu	r7,r14,4669c <__mdiff+0x124>
   46650:	3a000017 	ldw	r8,0(r7)
   46654:	18c00104 	addi	r3,r3,4
   46658:	39c00104 	addi	r7,r7,4
   4665c:	41bfffcc 	andi	r6,r8,65535
   46660:	310d883a 	add	r6,r6,r4
   46664:	3009d43a 	srai	r4,r6,16
   46668:	4010d43a 	srli	r8,r8,16
   4666c:	19bfff0d 	sth	r6,-4(r3)
   46670:	2209883a 	add	r4,r4,r8
   46674:	193fff8d 	sth	r4,-2(r3)
   46678:	2009d43a 	srai	r4,r4,16
   4667c:	3bbff436 	bltu	r7,r14,46650 <__mdiff+0xd8>
   46680:	0286303a 	nor	r3,zero,r10
   46684:	1b87883a 	add	r3,r3,r14
   46688:	1806d0ba 	srli	r3,r3,2
   4668c:	18c00044 	addi	r3,r3,1
   46690:	18c7883a 	add	r3,r3,r3
   46694:	18c7883a 	add	r3,r3,r3
   46698:	28c7883a 	add	r3,r5,r3
   4669c:	193fff17 	ldw	r4,-4(r3)
   466a0:	18ffff04 	addi	r3,r3,-4
   466a4:	2000041e 	bne	r4,zero,466b8 <__mdiff+0x140>
   466a8:	18ffff04 	addi	r3,r3,-4
   466ac:	19000017 	ldw	r4,0(r3)
   466b0:	4a7fffc4 	addi	r9,r9,-1
   466b4:	203ffc26 	beq	r4,zero,466a8 <__mdiff+0x130>
   466b8:	12400415 	stw	r9,16(r2)
   466bc:	dfc00417 	ldw	ra,16(sp)
   466c0:	dcc00317 	ldw	r19,12(sp)
   466c4:	dc800217 	ldw	r18,8(sp)
   466c8:	dc400117 	ldw	r17,4(sp)
   466cc:	dc000017 	ldw	r16,0(sp)
   466d0:	dec00504 	addi	sp,sp,20
   466d4:	f800283a 	ret
   466d8:	8005883a 	mov	r2,r16
   466dc:	04c00044 	movi	r19,1
   466e0:	8821883a 	mov	r16,r17
   466e4:	1023883a 	mov	r17,r2
   466e8:	003fb206 	br	465b4 <__mdiff+0x3c>
   466ec:	9009883a 	mov	r4,r18
   466f0:	000b883a 	mov	r5,zero
   466f4:	0045c7c0 	call	45c7c <_Balloc>
   466f8:	00c00044 	movi	r3,1
   466fc:	10c00415 	stw	r3,16(r2)
   46700:	10000515 	stw	zero,20(r2)
   46704:	dfc00417 	ldw	ra,16(sp)
   46708:	dcc00317 	ldw	r19,12(sp)
   4670c:	dc800217 	ldw	r18,8(sp)
   46710:	dc400117 	ldw	r17,4(sp)
   46714:	dc000017 	ldw	r16,0(sp)
   46718:	dec00504 	addi	sp,sp,20
   4671c:	f800283a 	ret

00046720 <__ulp>:
   46720:	295ffc2c 	andhi	r5,r5,32752
   46724:	00bf3034 	movhi	r2,64704
   46728:	2887883a 	add	r3,r5,r2
   4672c:	00c0020e 	bge	zero,r3,46738 <__ulp+0x18>
   46730:	0005883a 	mov	r2,zero
   46734:	f800283a 	ret
   46738:	00c7c83a 	sub	r3,zero,r3
   4673c:	1805d53a 	srai	r2,r3,20
   46740:	00c004c4 	movi	r3,19
   46744:	18800a0e 	bge	r3,r2,46770 <__ulp+0x50>
   46748:	01000c84 	movi	r4,50
   4674c:	0007883a 	mov	r3,zero
   46750:	20800516 	blt	r4,r2,46768 <__ulp+0x48>
   46754:	01000cc4 	movi	r4,51
   46758:	2085c83a 	sub	r2,r4,r2
   4675c:	01000044 	movi	r4,1
   46760:	2084983a 	sll	r2,r4,r2
   46764:	f800283a 	ret
   46768:	00800044 	movi	r2,1
   4676c:	f800283a 	ret
   46770:	00c00234 	movhi	r3,8
   46774:	1887d83a 	sra	r3,r3,r2
   46778:	0005883a 	mov	r2,zero
   4677c:	f800283a 	ret

00046780 <__b2d>:
   46780:	defffa04 	addi	sp,sp,-24
   46784:	dc000015 	stw	r16,0(sp)
   46788:	24000417 	ldw	r16,16(r4)
   4678c:	dc400115 	stw	r17,4(sp)
   46790:	dcc00315 	stw	r19,12(sp)
   46794:	84000144 	addi	r16,r16,5
   46798:	8421883a 	add	r16,r16,r16
   4679c:	8421883a 	add	r16,r16,r16
   467a0:	2421883a 	add	r16,r4,r16
   467a4:	847fff17 	ldw	r17,-4(r16)
   467a8:	24c00504 	addi	r19,r4,20
   467ac:	dd000415 	stw	r20,16(sp)
   467b0:	8809883a 	mov	r4,r17
   467b4:	dc800215 	stw	r18,8(sp)
   467b8:	2829883a 	mov	r20,r5
   467bc:	dfc00515 	stw	ra,20(sp)
   467c0:	0045f640 	call	45f64 <__hi0bits>
   467c4:	00c00804 	movi	r3,32
   467c8:	1887c83a 	sub	r3,r3,r2
   467cc:	a0c00015 	stw	r3,0(r20)
   467d0:	00c00284 	movi	r3,10
   467d4:	84bfff04 	addi	r18,r16,-4
   467d8:	18801216 	blt	r3,r2,46824 <__b2d+0xa4>
   467dc:	010002c4 	movi	r4,11
   467e0:	2089c83a 	sub	r4,r4,r2
   467e4:	8906d83a 	srl	r3,r17,r4
   467e8:	18cffc34 	orhi	r3,r3,16368
   467ec:	9c80322e 	bgeu	r19,r18,468b8 <__b2d+0x138>
   467f0:	817ffe17 	ldw	r5,-8(r16)
   467f4:	2908d83a 	srl	r4,r5,r4
   467f8:	10800544 	addi	r2,r2,21
   467fc:	88a2983a 	sll	r17,r17,r2
   46800:	2444b03a 	or	r2,r4,r17
   46804:	dfc00517 	ldw	ra,20(sp)
   46808:	dd000417 	ldw	r20,16(sp)
   4680c:	dcc00317 	ldw	r19,12(sp)
   46810:	dc800217 	ldw	r18,8(sp)
   46814:	dc400117 	ldw	r17,4(sp)
   46818:	dc000017 	ldw	r16,0(sp)
   4681c:	dec00604 	addi	sp,sp,24
   46820:	f800283a 	ret
   46824:	9c801636 	bltu	r19,r18,46880 <__b2d+0x100>
   46828:	113ffd44 	addi	r4,r2,-11
   4682c:	000b883a 	mov	r5,zero
   46830:	20001726 	beq	r4,zero,46890 <__b2d+0x110>
   46834:	00c00ac4 	movi	r3,43
   46838:	1885c83a 	sub	r2,r3,r2
   4683c:	8906983a 	sll	r3,r17,r4
   46840:	288cd83a 	srl	r6,r5,r2
   46844:	18cffc34 	orhi	r3,r3,16368
   46848:	1986b03a 	or	r3,r3,r6
   4684c:	9c801c2e 	bgeu	r19,r18,468c0 <__b2d+0x140>
   46850:	91bfff17 	ldw	r6,-4(r18)
   46854:	3084d83a 	srl	r2,r6,r2
   46858:	2908983a 	sll	r4,r5,r4
   4685c:	1104b03a 	or	r2,r2,r4
   46860:	dfc00517 	ldw	ra,20(sp)
   46864:	dd000417 	ldw	r20,16(sp)
   46868:	dcc00317 	ldw	r19,12(sp)
   4686c:	dc800217 	ldw	r18,8(sp)
   46870:	dc400117 	ldw	r17,4(sp)
   46874:	dc000017 	ldw	r16,0(sp)
   46878:	dec00604 	addi	sp,sp,24
   4687c:	f800283a 	ret
   46880:	113ffd44 	addi	r4,r2,-11
   46884:	84bffe04 	addi	r18,r16,-8
   46888:	817ffe17 	ldw	r5,-8(r16)
   4688c:	203fe91e 	bne	r4,zero,46834 <__b2d+0xb4>
   46890:	88cffc34 	orhi	r3,r17,16368
   46894:	2805883a 	mov	r2,r5
   46898:	dfc00517 	ldw	ra,20(sp)
   4689c:	dd000417 	ldw	r20,16(sp)
   468a0:	dcc00317 	ldw	r19,12(sp)
   468a4:	dc800217 	ldw	r18,8(sp)
   468a8:	dc400117 	ldw	r17,4(sp)
   468ac:	dc000017 	ldw	r16,0(sp)
   468b0:	dec00604 	addi	sp,sp,24
   468b4:	f800283a 	ret
   468b8:	0009883a 	mov	r4,zero
   468bc:	003fce06 	br	467f8 <__b2d+0x78>
   468c0:	0005883a 	mov	r2,zero
   468c4:	003fe406 	br	46858 <__b2d+0xd8>

000468c8 <__d2b>:
   468c8:	defff804 	addi	sp,sp,-32
   468cc:	dc400315 	stw	r17,12(sp)
   468d0:	3023883a 	mov	r17,r6
   468d4:	dc800415 	stw	r18,16(sp)
   468d8:	8824907a 	slli	r18,r17,1
   468dc:	dcc00515 	stw	r19,20(sp)
   468e0:	2827883a 	mov	r19,r5
   468e4:	9024d57a 	srli	r18,r18,21
   468e8:	01400044 	movi	r5,1
   468ec:	dd000615 	stw	r20,24(sp)
   468f0:	dc000215 	stw	r16,8(sp)
   468f4:	dfc00715 	stw	ra,28(sp)
   468f8:	3829883a 	mov	r20,r7
   468fc:	0045c7c0 	call	45c7c <_Balloc>
   46900:	1021883a 	mov	r16,r2
   46904:	00800434 	movhi	r2,16
   46908:	10bfffc4 	addi	r2,r2,-1
   4690c:	88a2703a 	and	r17,r17,r2
   46910:	90000126 	beq	r18,zero,46918 <__d2b+0x50>
   46914:	8c400434 	orhi	r17,r17,16
   46918:	dc400015 	stw	r17,0(sp)
   4691c:	98002226 	beq	r19,zero,469a8 <__d2b+0xe0>
   46920:	d9000104 	addi	r4,sp,4
   46924:	dcc00115 	stw	r19,4(sp)
   46928:	0045fcc0 	call	45fcc <__lo0bits>
   4692c:	d8c00017 	ldw	r3,0(sp)
   46930:	10002d1e 	bne	r2,zero,469e8 <__d2b+0x120>
   46934:	d9000117 	ldw	r4,4(sp)
   46938:	81000515 	stw	r4,20(r16)
   4693c:	1823003a 	cmpeq	r17,r3,zero
   46940:	01000084 	movi	r4,2
   46944:	2463c83a 	sub	r17,r4,r17
   46948:	80c00615 	stw	r3,24(r16)
   4694c:	84400415 	stw	r17,16(r16)
   46950:	90001d1e 	bne	r18,zero,469c8 <__d2b+0x100>
   46954:	88c00104 	addi	r3,r17,4
   46958:	18c7883a 	add	r3,r3,r3
   4695c:	18c7883a 	add	r3,r3,r3
   46960:	80c7883a 	add	r3,r16,r3
   46964:	19000017 	ldw	r4,0(r3)
   46968:	10bef384 	addi	r2,r2,-1074
   4696c:	a0800015 	stw	r2,0(r20)
   46970:	0045f640 	call	45f64 <__hi0bits>
   46974:	8822917a 	slli	r17,r17,5
   46978:	d8c00817 	ldw	r3,32(sp)
   4697c:	8885c83a 	sub	r2,r17,r2
   46980:	18800015 	stw	r2,0(r3)
   46984:	8005883a 	mov	r2,r16
   46988:	dfc00717 	ldw	ra,28(sp)
   4698c:	dd000617 	ldw	r20,24(sp)
   46990:	dcc00517 	ldw	r19,20(sp)
   46994:	dc800417 	ldw	r18,16(sp)
   46998:	dc400317 	ldw	r17,12(sp)
   4699c:	dc000217 	ldw	r16,8(sp)
   469a0:	dec00804 	addi	sp,sp,32
   469a4:	f800283a 	ret
   469a8:	d809883a 	mov	r4,sp
   469ac:	0045fcc0 	call	45fcc <__lo0bits>
   469b0:	d8c00017 	ldw	r3,0(sp)
   469b4:	04400044 	movi	r17,1
   469b8:	84400415 	stw	r17,16(r16)
   469bc:	80c00515 	stw	r3,20(r16)
   469c0:	10800804 	addi	r2,r2,32
   469c4:	903fe326 	beq	r18,zero,46954 <__d2b+0x8c>
   469c8:	00c00d44 	movi	r3,53
   469cc:	94bef344 	addi	r18,r18,-1075
   469d0:	90a5883a 	add	r18,r18,r2
   469d4:	1885c83a 	sub	r2,r3,r2
   469d8:	d8c00817 	ldw	r3,32(sp)
   469dc:	a4800015 	stw	r18,0(r20)
   469e0:	18800015 	stw	r2,0(r3)
   469e4:	003fe706 	br	46984 <__d2b+0xbc>
   469e8:	01000804 	movi	r4,32
   469ec:	2089c83a 	sub	r4,r4,r2
   469f0:	1908983a 	sll	r4,r3,r4
   469f4:	d9400117 	ldw	r5,4(sp)
   469f8:	1886d83a 	srl	r3,r3,r2
   469fc:	2148b03a 	or	r4,r4,r5
   46a00:	81000515 	stw	r4,20(r16)
   46a04:	d8c00015 	stw	r3,0(sp)
   46a08:	003fcc06 	br	4693c <__d2b+0x74>

00046a0c <__ratio>:
   46a0c:	defff904 	addi	sp,sp,-28
   46a10:	dc400315 	stw	r17,12(sp)
   46a14:	2823883a 	mov	r17,r5
   46a18:	d9400104 	addi	r5,sp,4
   46a1c:	dfc00615 	stw	ra,24(sp)
   46a20:	dcc00515 	stw	r19,20(sp)
   46a24:	dc800415 	stw	r18,16(sp)
   46a28:	2027883a 	mov	r19,r4
   46a2c:	dc000215 	stw	r16,8(sp)
   46a30:	00467800 	call	46780 <__b2d>
   46a34:	8809883a 	mov	r4,r17
   46a38:	d80b883a 	mov	r5,sp
   46a3c:	1025883a 	mov	r18,r2
   46a40:	1821883a 	mov	r16,r3
   46a44:	00467800 	call	46780 <__b2d>
   46a48:	99400417 	ldw	r5,16(r19)
   46a4c:	89000417 	ldw	r4,16(r17)
   46a50:	d9800117 	ldw	r6,4(sp)
   46a54:	2909c83a 	sub	r4,r5,r4
   46a58:	d9400017 	ldw	r5,0(sp)
   46a5c:	2008917a 	slli	r4,r4,5
   46a60:	314bc83a 	sub	r5,r6,r5
   46a64:	290b883a 	add	r5,r5,r4
   46a68:	01400e0e 	bge	zero,r5,46aa4 <__ratio+0x98>
   46a6c:	280a953a 	slli	r5,r5,20
   46a70:	2c21883a 	add	r16,r5,r16
   46a74:	9009883a 	mov	r4,r18
   46a78:	800b883a 	mov	r5,r16
   46a7c:	100d883a 	mov	r6,r2
   46a80:	180f883a 	mov	r7,r3
   46a84:	0048c180 	call	48c18 <__divdf3>
   46a88:	dfc00617 	ldw	ra,24(sp)
   46a8c:	dcc00517 	ldw	r19,20(sp)
   46a90:	dc800417 	ldw	r18,16(sp)
   46a94:	dc400317 	ldw	r17,12(sp)
   46a98:	dc000217 	ldw	r16,8(sp)
   46a9c:	dec00704 	addi	sp,sp,28
   46aa0:	f800283a 	ret
   46aa4:	280a953a 	slli	r5,r5,20
   46aa8:	1947c83a 	sub	r3,r3,r5
   46aac:	003ff106 	br	46a74 <__ratio+0x68>

00046ab0 <_mprec_log10>:
   46ab0:	defffe04 	addi	sp,sp,-8
   46ab4:	dc000015 	stw	r16,0(sp)
   46ab8:	dfc00115 	stw	ra,4(sp)
   46abc:	008005c4 	movi	r2,23
   46ac0:	2021883a 	mov	r16,r4
   46ac4:	11000d0e 	bge	r2,r4,46afc <_mprec_log10+0x4c>
   46ac8:	0005883a 	mov	r2,zero
   46acc:	00cffc34 	movhi	r3,16368
   46ad0:	843fffc4 	addi	r16,r16,-1
   46ad4:	1009883a 	mov	r4,r2
   46ad8:	180b883a 	mov	r5,r3
   46adc:	000d883a 	mov	r6,zero
   46ae0:	01d00934 	movhi	r7,16420
   46ae4:	00489340 	call	48934 <__muldf3>
   46ae8:	803ff91e 	bne	r16,zero,46ad0 <_mprec_log10+0x20>
   46aec:	dfc00117 	ldw	ra,4(sp)
   46af0:	dc000017 	ldw	r16,0(sp)
   46af4:	dec00204 	addi	sp,sp,8
   46af8:	f800283a 	ret
   46afc:	202090fa 	slli	r16,r4,3
   46b00:	00800174 	movhi	r2,5
   46b04:	10b19804 	addi	r2,r2,-14752
   46b08:	1421883a 	add	r16,r2,r16
   46b0c:	80800017 	ldw	r2,0(r16)
   46b10:	80c00117 	ldw	r3,4(r16)
   46b14:	dfc00117 	ldw	ra,4(sp)
   46b18:	dc000017 	ldw	r16,0(sp)
   46b1c:	dec00204 	addi	sp,sp,8
   46b20:	f800283a 	ret

00046b24 <__copybits>:
   46b24:	297fffc4 	addi	r5,r5,-1
   46b28:	31c00417 	ldw	r7,16(r6)
   46b2c:	2811d17a 	srai	r8,r5,5
   46b30:	30800504 	addi	r2,r6,20
   46b34:	39c00144 	addi	r7,r7,5
   46b38:	42000044 	addi	r8,r8,1
   46b3c:	39cf883a 	add	r7,r7,r7
   46b40:	4211883a 	add	r8,r8,r8
   46b44:	39cf883a 	add	r7,r7,r7
   46b48:	4211883a 	add	r8,r8,r8
   46b4c:	31cf883a 	add	r7,r6,r7
   46b50:	2211883a 	add	r8,r4,r8
   46b54:	11c00d2e 	bgeu	r2,r7,46b8c <__copybits+0x68>
   46b58:	2007883a 	mov	r3,r4
   46b5c:	11400017 	ldw	r5,0(r2)
   46b60:	18c00104 	addi	r3,r3,4
   46b64:	10800104 	addi	r2,r2,4
   46b68:	197fff15 	stw	r5,-4(r3)
   46b6c:	11fffb36 	bltu	r2,r7,46b5c <__copybits+0x38>
   46b70:	3985c83a 	sub	r2,r7,r6
   46b74:	10bffac4 	addi	r2,r2,-21
   46b78:	1004d0ba 	srli	r2,r2,2
   46b7c:	10800044 	addi	r2,r2,1
   46b80:	1085883a 	add	r2,r2,r2
   46b84:	1085883a 	add	r2,r2,r2
   46b88:	2089883a 	add	r4,r4,r2
   46b8c:	2200032e 	bgeu	r4,r8,46b9c <__copybits+0x78>
   46b90:	20000015 	stw	zero,0(r4)
   46b94:	21000104 	addi	r4,r4,4
   46b98:	223ffd36 	bltu	r4,r8,46b90 <__copybits+0x6c>
   46b9c:	f800283a 	ret

00046ba0 <__any_on>:
   46ba0:	21800417 	ldw	r6,16(r4)
   46ba4:	2805d17a 	srai	r2,r5,5
   46ba8:	20c00504 	addi	r3,r4,20
   46bac:	30800f0e 	bge	r6,r2,46bec <__any_on+0x4c>
   46bb0:	3005883a 	mov	r2,r6
   46bb4:	10800144 	addi	r2,r2,5
   46bb8:	1085883a 	add	r2,r2,r2
   46bbc:	1085883a 	add	r2,r2,r2
   46bc0:	2089883a 	add	r4,r4,r2
   46bc4:	1900152e 	bgeu	r3,r4,46c1c <__any_on+0x7c>
   46bc8:	20bfff17 	ldw	r2,-4(r4)
   46bcc:	213fff04 	addi	r4,r4,-4
   46bd0:	1000041e 	bne	r2,zero,46be4 <__any_on+0x44>
   46bd4:	1900112e 	bgeu	r3,r4,46c1c <__any_on+0x7c>
   46bd8:	213fff04 	addi	r4,r4,-4
   46bdc:	20800017 	ldw	r2,0(r4)
   46be0:	103ffc26 	beq	r2,zero,46bd4 <__any_on+0x34>
   46be4:	00800044 	movi	r2,1
   46be8:	f800283a 	ret
   46bec:	11bff10e 	bge	r2,r6,46bb4 <__any_on+0x14>
   46bf0:	294007cc 	andi	r5,r5,31
   46bf4:	283fef26 	beq	r5,zero,46bb4 <__any_on+0x14>
   46bf8:	11800144 	addi	r6,r2,5
   46bfc:	318d883a 	add	r6,r6,r6
   46c00:	318d883a 	add	r6,r6,r6
   46c04:	218d883a 	add	r6,r4,r6
   46c08:	31800017 	ldw	r6,0(r6)
   46c0c:	314ed83a 	srl	r7,r6,r5
   46c10:	394a983a 	sll	r5,r7,r5
   46c14:	29bff31e 	bne	r5,r6,46be4 <__any_on+0x44>
   46c18:	003fe606 	br	46bb4 <__any_on+0x14>
   46c1c:	0005883a 	mov	r2,zero
   46c20:	f800283a 	ret

00046c24 <_realloc_r>:
   46c24:	defff504 	addi	sp,sp,-44
   46c28:	dd400615 	stw	r21,24(sp)
   46c2c:	dc800315 	stw	r18,12(sp)
   46c30:	dc000115 	stw	r16,4(sp)
   46c34:	dfc00a15 	stw	ra,40(sp)
   46c38:	df000915 	stw	fp,36(sp)
   46c3c:	ddc00815 	stw	r23,32(sp)
   46c40:	dd800715 	stw	r22,28(sp)
   46c44:	dd000515 	stw	r20,20(sp)
   46c48:	dcc00415 	stw	r19,16(sp)
   46c4c:	dc400215 	stw	r17,8(sp)
   46c50:	2821883a 	mov	r16,r5
   46c54:	202b883a 	mov	r21,r4
   46c58:	3025883a 	mov	r18,r6
   46c5c:	28009626 	beq	r5,zero,46eb8 <_realloc_r+0x294>
   46c60:	0049dac0 	call	49dac <__malloc_lock>
   46c64:	80bfff17 	ldw	r2,-4(r16)
   46c68:	04ffff04 	movi	r19,-4
   46c6c:	90c002c4 	addi	r3,r18,11
   46c70:	01000584 	movi	r4,22
   46c74:	85bffe04 	addi	r22,r16,-8
   46c78:	14e6703a 	and	r19,r2,r19
   46c7c:	20c0372e 	bgeu	r4,r3,46d5c <_realloc_r+0x138>
   46c80:	047ffe04 	movi	r17,-8
   46c84:	1c62703a 	and	r17,r3,r17
   46c88:	8807883a 	mov	r3,r17
   46c8c:	88005a16 	blt	r17,zero,46df8 <_realloc_r+0x1d4>
   46c90:	8c805936 	bltu	r17,r18,46df8 <_realloc_r+0x1d4>
   46c94:	98c0340e 	bge	r19,r3,46d68 <_realloc_r+0x144>
   46c98:	07000174 	movhi	fp,5
   46c9c:	e7332004 	addi	fp,fp,-13184
   46ca0:	e1400217 	ldw	r5,8(fp)
   46ca4:	b4c9883a 	add	r4,r22,r19
   46ca8:	29009026 	beq	r5,r4,46eec <_realloc_r+0x2c8>
   46cac:	21800117 	ldw	r6,4(r4)
   46cb0:	01ffff84 	movi	r7,-2
   46cb4:	31ce703a 	and	r7,r6,r7
   46cb8:	21cf883a 	add	r7,r4,r7
   46cbc:	39c00117 	ldw	r7,4(r7)
   46cc0:	39c0004c 	andi	r7,r7,1
   46cc4:	38004326 	beq	r7,zero,46dd4 <_realloc_r+0x1b0>
   46cc8:	000d883a 	mov	r6,zero
   46ccc:	0009883a 	mov	r4,zero
   46cd0:	1080004c 	andi	r2,r2,1
   46cd4:	10005a1e 	bne	r2,zero,46e40 <_realloc_r+0x21c>
   46cd8:	85fffe17 	ldw	r23,-8(r16)
   46cdc:	00bfff04 	movi	r2,-4
   46ce0:	b5efc83a 	sub	r23,r22,r23
   46ce4:	b9c00117 	ldw	r7,4(r23)
   46ce8:	388e703a 	and	r7,r7,r2
   46cec:	3ccf883a 	add	r7,r7,r19
   46cf0:	20005226 	beq	r4,zero,46e3c <_realloc_r+0x218>
   46cf4:	31e9883a 	add	r20,r6,r7
   46cf8:	2140c726 	beq	r4,r5,47018 <_realloc_r+0x3f4>
   46cfc:	a0c04f16 	blt	r20,r3,46e3c <_realloc_r+0x218>
   46d00:	20800317 	ldw	r2,12(r4)
   46d04:	20c00217 	ldw	r3,8(r4)
   46d08:	99bfff04 	addi	r6,r19,-4
   46d0c:	01000904 	movi	r4,36
   46d10:	18800315 	stw	r2,12(r3)
   46d14:	10c00215 	stw	r3,8(r2)
   46d18:	b8c00217 	ldw	r3,8(r23)
   46d1c:	b8800317 	ldw	r2,12(r23)
   46d20:	bc800204 	addi	r18,r23,8
   46d24:	18800315 	stw	r2,12(r3)
   46d28:	10c00215 	stw	r3,8(r2)
   46d2c:	2180ed36 	bltu	r4,r6,470e4 <_realloc_r+0x4c0>
   46d30:	008004c4 	movi	r2,19
   46d34:	11809b2e 	bgeu	r2,r6,46fa4 <_realloc_r+0x380>
   46d38:	80800017 	ldw	r2,0(r16)
   46d3c:	b8800215 	stw	r2,8(r23)
   46d40:	80800117 	ldw	r2,4(r16)
   46d44:	b8800315 	stw	r2,12(r23)
   46d48:	008006c4 	movi	r2,27
   46d4c:	1180f936 	bltu	r2,r6,47134 <_realloc_r+0x510>
   46d50:	b8800404 	addi	r2,r23,16
   46d54:	80c00204 	addi	r3,r16,8
   46d58:	00009406 	br	46fac <_realloc_r+0x388>
   46d5c:	00c00404 	movi	r3,16
   46d60:	1823883a 	mov	r17,r3
   46d64:	003fca06 	br	46c90 <_realloc_r+0x6c>
   46d68:	9829883a 	mov	r20,r19
   46d6c:	a447c83a 	sub	r3,r20,r17
   46d70:	010003c4 	movi	r4,15
   46d74:	1080004c 	andi	r2,r2,1
   46d78:	20c02336 	bltu	r4,r3,46e08 <_realloc_r+0x1e4>
   46d7c:	1504b03a 	or	r2,r2,r20
   46d80:	b0800115 	stw	r2,4(r22)
   46d84:	b52d883a 	add	r22,r22,r20
   46d88:	b0800117 	ldw	r2,4(r22)
   46d8c:	10800054 	ori	r2,r2,1
   46d90:	b0800115 	stw	r2,4(r22)
   46d94:	a809883a 	mov	r4,r21
   46d98:	0049dcc0 	call	49dcc <__malloc_unlock>
   46d9c:	8025883a 	mov	r18,r16
   46da0:	9005883a 	mov	r2,r18
   46da4:	dfc00a17 	ldw	ra,40(sp)
   46da8:	df000917 	ldw	fp,36(sp)
   46dac:	ddc00817 	ldw	r23,32(sp)
   46db0:	dd800717 	ldw	r22,28(sp)
   46db4:	dd400617 	ldw	r21,24(sp)
   46db8:	dd000517 	ldw	r20,20(sp)
   46dbc:	dcc00417 	ldw	r19,16(sp)
   46dc0:	dc800317 	ldw	r18,12(sp)
   46dc4:	dc400217 	ldw	r17,8(sp)
   46dc8:	dc000117 	ldw	r16,4(sp)
   46dcc:	dec00b04 	addi	sp,sp,44
   46dd0:	f800283a 	ret
   46dd4:	01ffff04 	movi	r7,-4
   46dd8:	31cc703a 	and	r6,r6,r7
   46ddc:	34e9883a 	add	r20,r6,r19
   46de0:	a0ffbb16 	blt	r20,r3,46cd0 <_realloc_r+0xac>
   46de4:	20c00317 	ldw	r3,12(r4)
   46de8:	21000217 	ldw	r4,8(r4)
   46dec:	20c00315 	stw	r3,12(r4)
   46df0:	19000215 	stw	r4,8(r3)
   46df4:	003fdd06 	br	46d6c <_realloc_r+0x148>
   46df8:	00800304 	movi	r2,12
   46dfc:	a8800015 	stw	r2,0(r21)
   46e00:	0025883a 	mov	r18,zero
   46e04:	003fe606 	br	46da0 <_realloc_r+0x17c>
   46e08:	1444b03a 	or	r2,r2,r17
   46e0c:	b0800115 	stw	r2,4(r22)
   46e10:	b44b883a 	add	r5,r22,r17
   46e14:	18800054 	ori	r2,r3,1
   46e18:	28800115 	stw	r2,4(r5)
   46e1c:	28c7883a 	add	r3,r5,r3
   46e20:	18800117 	ldw	r2,4(r3)
   46e24:	a809883a 	mov	r4,r21
   46e28:	29400204 	addi	r5,r5,8
   46e2c:	10800054 	ori	r2,r2,1
   46e30:	18800115 	stw	r2,4(r3)
   46e34:	004456c0 	call	4456c <_free_r>
   46e38:	003fd606 	br	46d94 <_realloc_r+0x170>
   46e3c:	38c0330e 	bge	r7,r3,46f0c <_realloc_r+0x2e8>
   46e40:	900b883a 	mov	r5,r18
   46e44:	a809883a 	mov	r4,r21
   46e48:	00451040 	call	45104 <_malloc_r>
   46e4c:	1025883a 	mov	r18,r2
   46e50:	10001626 	beq	r2,zero,46eac <_realloc_r+0x288>
   46e54:	80bfff17 	ldw	r2,-4(r16)
   46e58:	00ffff84 	movi	r3,-2
   46e5c:	913ffe04 	addi	r4,r18,-8
   46e60:	10c6703a 	and	r3,r2,r3
   46e64:	b0c7883a 	add	r3,r22,r3
   46e68:	20c09926 	beq	r4,r3,470d0 <_realloc_r+0x4ac>
   46e6c:	99bfff04 	addi	r6,r19,-4
   46e70:	00800904 	movi	r2,36
   46e74:	11806436 	bltu	r2,r6,47008 <_realloc_r+0x3e4>
   46e78:	00c004c4 	movi	r3,19
   46e7c:	19804036 	bltu	r3,r6,46f80 <_realloc_r+0x35c>
   46e80:	9005883a 	mov	r2,r18
   46e84:	8007883a 	mov	r3,r16
   46e88:	19000017 	ldw	r4,0(r3)
   46e8c:	11000015 	stw	r4,0(r2)
   46e90:	19000117 	ldw	r4,4(r3)
   46e94:	11000115 	stw	r4,4(r2)
   46e98:	18c00217 	ldw	r3,8(r3)
   46e9c:	10c00215 	stw	r3,8(r2)
   46ea0:	a809883a 	mov	r4,r21
   46ea4:	800b883a 	mov	r5,r16
   46ea8:	004456c0 	call	4456c <_free_r>
   46eac:	a809883a 	mov	r4,r21
   46eb0:	0049dcc0 	call	49dcc <__malloc_unlock>
   46eb4:	003fba06 	br	46da0 <_realloc_r+0x17c>
   46eb8:	300b883a 	mov	r5,r6
   46ebc:	dfc00a17 	ldw	ra,40(sp)
   46ec0:	df000917 	ldw	fp,36(sp)
   46ec4:	ddc00817 	ldw	r23,32(sp)
   46ec8:	dd800717 	ldw	r22,28(sp)
   46ecc:	dd400617 	ldw	r21,24(sp)
   46ed0:	dd000517 	ldw	r20,20(sp)
   46ed4:	dcc00417 	ldw	r19,16(sp)
   46ed8:	dc800317 	ldw	r18,12(sp)
   46edc:	dc400217 	ldw	r17,8(sp)
   46ee0:	dc000117 	ldw	r16,4(sp)
   46ee4:	dec00b04 	addi	sp,sp,44
   46ee8:	00451041 	jmpi	45104 <_malloc_r>
   46eec:	29800117 	ldw	r6,4(r5)
   46ef0:	013fff04 	movi	r4,-4
   46ef4:	89c00404 	addi	r7,r17,16
   46ef8:	310c703a 	and	r6,r6,r4
   46efc:	34c9883a 	add	r4,r6,r19
   46f00:	21c0340e 	bge	r4,r7,46fd4 <_realloc_r+0x3b0>
   46f04:	2809883a 	mov	r4,r5
   46f08:	003f7106 	br	46cd0 <_realloc_r+0xac>
   46f0c:	b8800317 	ldw	r2,12(r23)
   46f10:	b8c00217 	ldw	r3,8(r23)
   46f14:	99bfff04 	addi	r6,r19,-4
   46f18:	01000904 	movi	r4,36
   46f1c:	18800315 	stw	r2,12(r3)
   46f20:	10c00215 	stw	r3,8(r2)
   46f24:	bc800204 	addi	r18,r23,8
   46f28:	21807836 	bltu	r4,r6,4710c <_realloc_r+0x4e8>
   46f2c:	008004c4 	movi	r2,19
   46f30:	1180732e 	bgeu	r2,r6,47100 <_realloc_r+0x4dc>
   46f34:	80800017 	ldw	r2,0(r16)
   46f38:	b8800215 	stw	r2,8(r23)
   46f3c:	80800117 	ldw	r2,4(r16)
   46f40:	b8800315 	stw	r2,12(r23)
   46f44:	008006c4 	movi	r2,27
   46f48:	11808936 	bltu	r2,r6,47170 <_realloc_r+0x54c>
   46f4c:	b8800404 	addi	r2,r23,16
   46f50:	80c00204 	addi	r3,r16,8
   46f54:	19000017 	ldw	r4,0(r3)
   46f58:	9021883a 	mov	r16,r18
   46f5c:	3829883a 	mov	r20,r7
   46f60:	11000015 	stw	r4,0(r2)
   46f64:	19000117 	ldw	r4,4(r3)
   46f68:	b82d883a 	mov	r22,r23
   46f6c:	11000115 	stw	r4,4(r2)
   46f70:	18c00217 	ldw	r3,8(r3)
   46f74:	10c00215 	stw	r3,8(r2)
   46f78:	b8800117 	ldw	r2,4(r23)
   46f7c:	003f7b06 	br	46d6c <_realloc_r+0x148>
   46f80:	80c00017 	ldw	r3,0(r16)
   46f84:	90c00015 	stw	r3,0(r18)
   46f88:	80c00117 	ldw	r3,4(r16)
   46f8c:	90c00115 	stw	r3,4(r18)
   46f90:	00c006c4 	movi	r3,27
   46f94:	19804636 	bltu	r3,r6,470b0 <_realloc_r+0x48c>
   46f98:	90800204 	addi	r2,r18,8
   46f9c:	80c00204 	addi	r3,r16,8
   46fa0:	003fb906 	br	46e88 <_realloc_r+0x264>
   46fa4:	9005883a 	mov	r2,r18
   46fa8:	8007883a 	mov	r3,r16
   46fac:	19000017 	ldw	r4,0(r3)
   46fb0:	9021883a 	mov	r16,r18
   46fb4:	b82d883a 	mov	r22,r23
   46fb8:	11000015 	stw	r4,0(r2)
   46fbc:	19000117 	ldw	r4,4(r3)
   46fc0:	11000115 	stw	r4,4(r2)
   46fc4:	18c00217 	ldw	r3,8(r3)
   46fc8:	10c00215 	stw	r3,8(r2)
   46fcc:	b8800117 	ldw	r2,4(r23)
   46fd0:	003f6606 	br	46d6c <_realloc_r+0x148>
   46fd4:	2445c83a 	sub	r2,r4,r17
   46fd8:	b46d883a 	add	r22,r22,r17
   46fdc:	10800054 	ori	r2,r2,1
   46fe0:	b0800115 	stw	r2,4(r22)
   46fe4:	80bfff17 	ldw	r2,-4(r16)
   46fe8:	a809883a 	mov	r4,r21
   46fec:	e5800215 	stw	r22,8(fp)
   46ff0:	1080004c 	andi	r2,r2,1
   46ff4:	88a2b03a 	or	r17,r17,r2
   46ff8:	847fff15 	stw	r17,-4(r16)
   46ffc:	0049dcc0 	call	49dcc <__malloc_unlock>
   47000:	8025883a 	mov	r18,r16
   47004:	003f6606 	br	46da0 <_realloc_r+0x17c>
   47008:	9009883a 	mov	r4,r18
   4700c:	800b883a 	mov	r5,r16
   47010:	0045a780 	call	45a78 <memmove>
   47014:	003fa206 	br	46ea0 <_realloc_r+0x27c>
   47018:	88800404 	addi	r2,r17,16
   4701c:	a0bf8716 	blt	r20,r2,46e3c <_realloc_r+0x218>
   47020:	b8800317 	ldw	r2,12(r23)
   47024:	b8c00217 	ldw	r3,8(r23)
   47028:	99bfff04 	addi	r6,r19,-4
   4702c:	01000904 	movi	r4,36
   47030:	18800315 	stw	r2,12(r3)
   47034:	10c00215 	stw	r3,8(r2)
   47038:	bc800204 	addi	r18,r23,8
   4703c:	21806536 	bltu	r4,r6,471d4 <_realloc_r+0x5b0>
   47040:	008004c4 	movi	r2,19
   47044:	1180592e 	bgeu	r2,r6,471ac <_realloc_r+0x588>
   47048:	80800017 	ldw	r2,0(r16)
   4704c:	b8800215 	stw	r2,8(r23)
   47050:	80800117 	ldw	r2,4(r16)
   47054:	b8800315 	stw	r2,12(r23)
   47058:	008006c4 	movi	r2,27
   4705c:	11806136 	bltu	r2,r6,471e4 <_realloc_r+0x5c0>
   47060:	b8800404 	addi	r2,r23,16
   47064:	80c00204 	addi	r3,r16,8
   47068:	19000017 	ldw	r4,0(r3)
   4706c:	11000015 	stw	r4,0(r2)
   47070:	19000117 	ldw	r4,4(r3)
   47074:	11000115 	stw	r4,4(r2)
   47078:	18c00217 	ldw	r3,8(r3)
   4707c:	10c00215 	stw	r3,8(r2)
   47080:	a447c83a 	sub	r3,r20,r17
   47084:	bc45883a 	add	r2,r23,r17
   47088:	18c00054 	ori	r3,r3,1
   4708c:	10c00115 	stw	r3,4(r2)
   47090:	b8c00117 	ldw	r3,4(r23)
   47094:	e0800215 	stw	r2,8(fp)
   47098:	a809883a 	mov	r4,r21
   4709c:	1880004c 	andi	r2,r3,1
   470a0:	88a2b03a 	or	r17,r17,r2
   470a4:	bc400115 	stw	r17,4(r23)
   470a8:	0049dcc0 	call	49dcc <__malloc_unlock>
   470ac:	003f3c06 	br	46da0 <_realloc_r+0x17c>
   470b0:	80c00217 	ldw	r3,8(r16)
   470b4:	90c00215 	stw	r3,8(r18)
   470b8:	80c00317 	ldw	r3,12(r16)
   470bc:	90c00315 	stw	r3,12(r18)
   470c0:	30802426 	beq	r6,r2,47154 <_realloc_r+0x530>
   470c4:	90800404 	addi	r2,r18,16
   470c8:	80c00404 	addi	r3,r16,16
   470cc:	003f6e06 	br	46e88 <_realloc_r+0x264>
   470d0:	953fff17 	ldw	r20,-4(r18)
   470d4:	00ffff04 	movi	r3,-4
   470d8:	a0e8703a 	and	r20,r20,r3
   470dc:	a4e9883a 	add	r20,r20,r19
   470e0:	003f2206 	br	46d6c <_realloc_r+0x148>
   470e4:	800b883a 	mov	r5,r16
   470e8:	9009883a 	mov	r4,r18
   470ec:	0045a780 	call	45a78 <memmove>
   470f0:	9021883a 	mov	r16,r18
   470f4:	b8800117 	ldw	r2,4(r23)
   470f8:	b82d883a 	mov	r22,r23
   470fc:	003f1b06 	br	46d6c <_realloc_r+0x148>
   47100:	9005883a 	mov	r2,r18
   47104:	8007883a 	mov	r3,r16
   47108:	003f9206 	br	46f54 <_realloc_r+0x330>
   4710c:	800b883a 	mov	r5,r16
   47110:	9009883a 	mov	r4,r18
   47114:	d9c00015 	stw	r7,0(sp)
   47118:	0045a780 	call	45a78 <memmove>
   4711c:	d9c00017 	ldw	r7,0(sp)
   47120:	9021883a 	mov	r16,r18
   47124:	b8800117 	ldw	r2,4(r23)
   47128:	3829883a 	mov	r20,r7
   4712c:	b82d883a 	mov	r22,r23
   47130:	003f0e06 	br	46d6c <_realloc_r+0x148>
   47134:	80800217 	ldw	r2,8(r16)
   47138:	b8800415 	stw	r2,16(r23)
   4713c:	80800317 	ldw	r2,12(r16)
   47140:	b8800515 	stw	r2,20(r23)
   47144:	31001226 	beq	r6,r4,47190 <_realloc_r+0x56c>
   47148:	b8800604 	addi	r2,r23,24
   4714c:	80c00404 	addi	r3,r16,16
   47150:	003f9606 	br	46fac <_realloc_r+0x388>
   47154:	81000417 	ldw	r4,16(r16)
   47158:	90800604 	addi	r2,r18,24
   4715c:	80c00604 	addi	r3,r16,24
   47160:	91000415 	stw	r4,16(r18)
   47164:	81000517 	ldw	r4,20(r16)
   47168:	91000515 	stw	r4,20(r18)
   4716c:	003f4606 	br	46e88 <_realloc_r+0x264>
   47170:	80800217 	ldw	r2,8(r16)
   47174:	b8800415 	stw	r2,16(r23)
   47178:	80800317 	ldw	r2,12(r16)
   4717c:	b8800515 	stw	r2,20(r23)
   47180:	31000d26 	beq	r6,r4,471b8 <_realloc_r+0x594>
   47184:	b8800604 	addi	r2,r23,24
   47188:	80c00404 	addi	r3,r16,16
   4718c:	003f7106 	br	46f54 <_realloc_r+0x330>
   47190:	81000417 	ldw	r4,16(r16)
   47194:	b8800804 	addi	r2,r23,32
   47198:	80c00604 	addi	r3,r16,24
   4719c:	b9000615 	stw	r4,24(r23)
   471a0:	81000517 	ldw	r4,20(r16)
   471a4:	b9000715 	stw	r4,28(r23)
   471a8:	003f8006 	br	46fac <_realloc_r+0x388>
   471ac:	9005883a 	mov	r2,r18
   471b0:	8007883a 	mov	r3,r16
   471b4:	003fac06 	br	47068 <_realloc_r+0x444>
   471b8:	81000417 	ldw	r4,16(r16)
   471bc:	b8800804 	addi	r2,r23,32
   471c0:	80c00604 	addi	r3,r16,24
   471c4:	b9000615 	stw	r4,24(r23)
   471c8:	81000517 	ldw	r4,20(r16)
   471cc:	b9000715 	stw	r4,28(r23)
   471d0:	003f6006 	br	46f54 <_realloc_r+0x330>
   471d4:	9009883a 	mov	r4,r18
   471d8:	800b883a 	mov	r5,r16
   471dc:	0045a780 	call	45a78 <memmove>
   471e0:	003fa706 	br	47080 <_realloc_r+0x45c>
   471e4:	80800217 	ldw	r2,8(r16)
   471e8:	b8800415 	stw	r2,16(r23)
   471ec:	80800317 	ldw	r2,12(r16)
   471f0:	b8800515 	stw	r2,20(r23)
   471f4:	31000326 	beq	r6,r4,47204 <_realloc_r+0x5e0>
   471f8:	b8800604 	addi	r2,r23,24
   471fc:	80c00404 	addi	r3,r16,16
   47200:	003f9906 	br	47068 <_realloc_r+0x444>
   47204:	81000417 	ldw	r4,16(r16)
   47208:	b8800804 	addi	r2,r23,32
   4720c:	80c00604 	addi	r3,r16,24
   47210:	b9000615 	stw	r4,24(r23)
   47214:	81000517 	ldw	r4,20(r16)
   47218:	b9000715 	stw	r4,28(r23)
   4721c:	003f9206 	br	47068 <_realloc_r+0x444>

00047220 <__isinfd>:
   47220:	0105c83a 	sub	r2,zero,r4
   47224:	1108b03a 	or	r4,r2,r4
   47228:	2004d7fa 	srli	r2,r4,31
   4722c:	00e00034 	movhi	r3,32768
   47230:	18ffffc4 	addi	r3,r3,-1
   47234:	28ca703a 	and	r5,r5,r3
   47238:	1144b03a 	or	r2,r2,r5
   4723c:	00dffc34 	movhi	r3,32752
   47240:	1885c83a 	sub	r2,r3,r2
   47244:	0087c83a 	sub	r3,zero,r2
   47248:	1884b03a 	or	r2,r3,r2
   4724c:	1005d7fa 	srai	r2,r2,31
   47250:	10800044 	addi	r2,r2,1
   47254:	f800283a 	ret

00047258 <__isnand>:
   47258:	0105c83a 	sub	r2,zero,r4
   4725c:	1108b03a 	or	r4,r2,r4
   47260:	2004d7fa 	srli	r2,r4,31
   47264:	00e00034 	movhi	r3,32768
   47268:	18ffffc4 	addi	r3,r3,-1
   4726c:	28ca703a 	and	r5,r5,r3
   47270:	1144b03a 	or	r2,r2,r5
   47274:	00dffc34 	movhi	r3,32752
   47278:	1885c83a 	sub	r2,r3,r2
   4727c:	1004d7fa 	srli	r2,r2,31
   47280:	f800283a 	ret

00047284 <_sbrk_r>:
   47284:	defffd04 	addi	sp,sp,-12
   47288:	dc400115 	stw	r17,4(sp)
   4728c:	dc000015 	stw	r16,0(sp)
   47290:	2023883a 	mov	r17,r4
   47294:	04000174 	movhi	r16,5
   47298:	843f4f04 	addi	r16,r16,-708
   4729c:	2809883a 	mov	r4,r5
   472a0:	dfc00215 	stw	ra,8(sp)
   472a4:	80000015 	stw	zero,0(r16)
   472a8:	0049f8c0 	call	49f8c <sbrk>
   472ac:	00ffffc4 	movi	r3,-1
   472b0:	10c00526 	beq	r2,r3,472c8 <_sbrk_r+0x44>
   472b4:	dfc00217 	ldw	ra,8(sp)
   472b8:	dc400117 	ldw	r17,4(sp)
   472bc:	dc000017 	ldw	r16,0(sp)
   472c0:	dec00304 	addi	sp,sp,12
   472c4:	f800283a 	ret
   472c8:	80c00017 	ldw	r3,0(r16)
   472cc:	183ff926 	beq	r3,zero,472b4 <_sbrk_r+0x30>
   472d0:	88c00015 	stw	r3,0(r17)
   472d4:	dfc00217 	ldw	ra,8(sp)
   472d8:	dc400117 	ldw	r17,4(sp)
   472dc:	dc000017 	ldw	r16,0(sp)
   472e0:	dec00304 	addi	sp,sp,12
   472e4:	f800283a 	ret

000472e8 <__sread>:
   472e8:	defffe04 	addi	sp,sp,-8
   472ec:	dc000015 	stw	r16,0(sp)
   472f0:	2821883a 	mov	r16,r5
   472f4:	2940038f 	ldh	r5,14(r5)
   472f8:	dfc00115 	stw	ra,4(sp)
   472fc:	004796c0 	call	4796c <_read_r>
   47300:	10000716 	blt	r2,zero,47320 <__sread+0x38>
   47304:	80c01417 	ldw	r3,80(r16)
   47308:	1887883a 	add	r3,r3,r2
   4730c:	80c01415 	stw	r3,80(r16)
   47310:	dfc00117 	ldw	ra,4(sp)
   47314:	dc000017 	ldw	r16,0(sp)
   47318:	dec00204 	addi	sp,sp,8
   4731c:	f800283a 	ret
   47320:	80c0030b 	ldhu	r3,12(r16)
   47324:	18fbffcc 	andi	r3,r3,61439
   47328:	80c0030d 	sth	r3,12(r16)
   4732c:	dfc00117 	ldw	ra,4(sp)
   47330:	dc000017 	ldw	r16,0(sp)
   47334:	dec00204 	addi	sp,sp,8
   47338:	f800283a 	ret

0004733c <__swrite>:
   4733c:	2880030b 	ldhu	r2,12(r5)
   47340:	defffb04 	addi	sp,sp,-20
   47344:	dcc00315 	stw	r19,12(sp)
   47348:	10c0400c 	andi	r3,r2,256
   4734c:	18ffffcc 	andi	r3,r3,65535
   47350:	18e0001c 	xori	r3,r3,32768
   47354:	dc800215 	stw	r18,8(sp)
   47358:	dc400115 	stw	r17,4(sp)
   4735c:	dc000015 	stw	r16,0(sp)
   47360:	dfc00415 	stw	ra,16(sp)
   47364:	18e00004 	addi	r3,r3,-32768
   47368:	2821883a 	mov	r16,r5
   4736c:	2027883a 	mov	r19,r4
   47370:	3025883a 	mov	r18,r6
   47374:	3823883a 	mov	r17,r7
   47378:	18000526 	beq	r3,zero,47390 <__swrite+0x54>
   4737c:	2940038f 	ldh	r5,14(r5)
   47380:	000d883a 	mov	r6,zero
   47384:	01c00084 	movi	r7,2
   47388:	00479000 	call	47900 <_lseek_r>
   4738c:	8080030b 	ldhu	r2,12(r16)
   47390:	8140038f 	ldh	r5,14(r16)
   47394:	10bbffcc 	andi	r2,r2,61439
   47398:	9809883a 	mov	r4,r19
   4739c:	900d883a 	mov	r6,r18
   473a0:	880f883a 	mov	r7,r17
   473a4:	8080030d 	sth	r2,12(r16)
   473a8:	dfc00417 	ldw	ra,16(sp)
   473ac:	dcc00317 	ldw	r19,12(sp)
   473b0:	dc800217 	ldw	r18,8(sp)
   473b4:	dc400117 	ldw	r17,4(sp)
   473b8:	dc000017 	ldw	r16,0(sp)
   473bc:	dec00504 	addi	sp,sp,20
   473c0:	00475581 	jmpi	47558 <_write_r>

000473c4 <__sseek>:
   473c4:	defffe04 	addi	sp,sp,-8
   473c8:	dc000015 	stw	r16,0(sp)
   473cc:	2821883a 	mov	r16,r5
   473d0:	2940038f 	ldh	r5,14(r5)
   473d4:	dfc00115 	stw	ra,4(sp)
   473d8:	00479000 	call	47900 <_lseek_r>
   473dc:	00ffffc4 	movi	r3,-1
   473e0:	10c00826 	beq	r2,r3,47404 <__sseek+0x40>
   473e4:	80c0030b 	ldhu	r3,12(r16)
   473e8:	80801415 	stw	r2,80(r16)
   473ec:	18c40014 	ori	r3,r3,4096
   473f0:	80c0030d 	sth	r3,12(r16)
   473f4:	dfc00117 	ldw	ra,4(sp)
   473f8:	dc000017 	ldw	r16,0(sp)
   473fc:	dec00204 	addi	sp,sp,8
   47400:	f800283a 	ret
   47404:	80c0030b 	ldhu	r3,12(r16)
   47408:	18fbffcc 	andi	r3,r3,61439
   4740c:	80c0030d 	sth	r3,12(r16)
   47410:	dfc00117 	ldw	ra,4(sp)
   47414:	dc000017 	ldw	r16,0(sp)
   47418:	dec00204 	addi	sp,sp,8
   4741c:	f800283a 	ret

00047420 <__sclose>:
   47420:	2940038f 	ldh	r5,14(r5)
   47424:	00476801 	jmpi	47680 <_close_r>

00047428 <strcmp>:
   47428:	2904b03a 	or	r2,r5,r4
   4742c:	108000cc 	andi	r2,r2,3
   47430:	1000171e 	bne	r2,zero,47490 <strcmp+0x68>
   47434:	20800017 	ldw	r2,0(r4)
   47438:	28c00017 	ldw	r3,0(r5)
   4743c:	10c0141e 	bne	r2,r3,47490 <strcmp+0x68>
   47440:	027fbff4 	movhi	r9,65279
   47444:	4a7fbfc4 	addi	r9,r9,-257
   47448:	1247883a 	add	r3,r2,r9
   4744c:	0084303a 	nor	r2,zero,r2
   47450:	1884703a 	and	r2,r3,r2
   47454:	02202074 	movhi	r8,32897
   47458:	42202004 	addi	r8,r8,-32640
   4745c:	1204703a 	and	r2,r2,r8
   47460:	10000226 	beq	r2,zero,4746c <strcmp+0x44>
   47464:	00001706 	br	474c4 <strcmp+0x9c>
   47468:	3000161e 	bne	r6,zero,474c4 <strcmp+0x9c>
   4746c:	21000104 	addi	r4,r4,4
   47470:	20800017 	ldw	r2,0(r4)
   47474:	29400104 	addi	r5,r5,4
   47478:	28c00017 	ldw	r3,0(r5)
   4747c:	124f883a 	add	r7,r2,r9
   47480:	008c303a 	nor	r6,zero,r2
   47484:	398c703a 	and	r6,r7,r6
   47488:	320c703a 	and	r6,r6,r8
   4748c:	10fff626 	beq	r2,r3,47468 <strcmp+0x40>
   47490:	20800007 	ldb	r2,0(r4)
   47494:	1000051e 	bne	r2,zero,474ac <strcmp+0x84>
   47498:	00000606 	br	474b4 <strcmp+0x8c>
   4749c:	21000044 	addi	r4,r4,1
   474a0:	20800007 	ldb	r2,0(r4)
   474a4:	29400044 	addi	r5,r5,1
   474a8:	10000226 	beq	r2,zero,474b4 <strcmp+0x8c>
   474ac:	28c00007 	ldb	r3,0(r5)
   474b0:	10fffa26 	beq	r2,r3,4749c <strcmp+0x74>
   474b4:	20c00003 	ldbu	r3,0(r4)
   474b8:	28800003 	ldbu	r2,0(r5)
   474bc:	1885c83a 	sub	r2,r3,r2
   474c0:	f800283a 	ret
   474c4:	0005883a 	mov	r2,zero
   474c8:	f800283a 	ret

000474cc <strlen>:
   474cc:	208000cc 	andi	r2,r4,3
   474d0:	10001f1e 	bne	r2,zero,47550 <strlen+0x84>
   474d4:	20800017 	ldw	r2,0(r4)
   474d8:	01ffbff4 	movhi	r7,65279
   474dc:	39ffbfc4 	addi	r7,r7,-257
   474e0:	01a02074 	movhi	r6,32897
   474e4:	31a02004 	addi	r6,r6,-32640
   474e8:	11c7883a 	add	r3,r2,r7
   474ec:	0084303a 	nor	r2,zero,r2
   474f0:	1886703a 	and	r3,r3,r2
   474f4:	1986703a 	and	r3,r3,r6
   474f8:	2005883a 	mov	r2,r4
   474fc:	1800101e 	bne	r3,zero,47540 <strlen+0x74>
   47500:	10800104 	addi	r2,r2,4
   47504:	10c00017 	ldw	r3,0(r2)
   47508:	19cb883a 	add	r5,r3,r7
   4750c:	00c6303a 	nor	r3,zero,r3
   47510:	28c6703a 	and	r3,r5,r3
   47514:	1986703a 	and	r3,r3,r6
   47518:	1800091e 	bne	r3,zero,47540 <strlen+0x74>
   4751c:	10800104 	addi	r2,r2,4
   47520:	10c00017 	ldw	r3,0(r2)
   47524:	19cb883a 	add	r5,r3,r7
   47528:	00c6303a 	nor	r3,zero,r3
   4752c:	28c6703a 	and	r3,r5,r3
   47530:	1986703a 	and	r3,r3,r6
   47534:	183ff226 	beq	r3,zero,47500 <strlen+0x34>
   47538:	00000106 	br	47540 <strlen+0x74>
   4753c:	10800044 	addi	r2,r2,1
   47540:	10c00007 	ldb	r3,0(r2)
   47544:	183ffd1e 	bne	r3,zero,4753c <strlen+0x70>
   47548:	1105c83a 	sub	r2,r2,r4
   4754c:	f800283a 	ret
   47550:	2005883a 	mov	r2,r4
   47554:	003ffa06 	br	47540 <strlen+0x74>

00047558 <_write_r>:
   47558:	defffd04 	addi	sp,sp,-12
   4755c:	dc400115 	stw	r17,4(sp)
   47560:	dc000015 	stw	r16,0(sp)
   47564:	2023883a 	mov	r17,r4
   47568:	04000174 	movhi	r16,5
   4756c:	843f4f04 	addi	r16,r16,-708
   47570:	2809883a 	mov	r4,r5
   47574:	300b883a 	mov	r5,r6
   47578:	380d883a 	mov	r6,r7
   4757c:	dfc00215 	stw	ra,8(sp)
   47580:	80000015 	stw	zero,0(r16)
   47584:	004a0bc0 	call	4a0bc <write>
   47588:	00ffffc4 	movi	r3,-1
   4758c:	10c00526 	beq	r2,r3,475a4 <_write_r+0x4c>
   47590:	dfc00217 	ldw	ra,8(sp)
   47594:	dc400117 	ldw	r17,4(sp)
   47598:	dc000017 	ldw	r16,0(sp)
   4759c:	dec00304 	addi	sp,sp,12
   475a0:	f800283a 	ret
   475a4:	80c00017 	ldw	r3,0(r16)
   475a8:	183ff926 	beq	r3,zero,47590 <_write_r+0x38>
   475ac:	88c00015 	stw	r3,0(r17)
   475b0:	dfc00217 	ldw	ra,8(sp)
   475b4:	dc400117 	ldw	r17,4(sp)
   475b8:	dc000017 	ldw	r16,0(sp)
   475bc:	dec00304 	addi	sp,sp,12
   475c0:	f800283a 	ret

000475c4 <_calloc_r>:
   475c4:	314b383a 	mul	r5,r6,r5
   475c8:	defffe04 	addi	sp,sp,-8
   475cc:	dc000015 	stw	r16,0(sp)
   475d0:	dfc00115 	stw	ra,4(sp)
   475d4:	00451040 	call	45104 <_malloc_r>
   475d8:	1021883a 	mov	r16,r2
   475dc:	10000c26 	beq	r2,zero,47610 <_calloc_r+0x4c>
   475e0:	11bfff17 	ldw	r6,-4(r2)
   475e4:	00ffff04 	movi	r3,-4
   475e8:	00800904 	movi	r2,36
   475ec:	30cc703a 	and	r6,r6,r3
   475f0:	30cd883a 	add	r6,r6,r3
   475f4:	11801436 	bltu	r2,r6,47648 <_calloc_r+0x84>
   475f8:	00c004c4 	movi	r3,19
   475fc:	19800936 	bltu	r3,r6,47624 <_calloc_r+0x60>
   47600:	8005883a 	mov	r2,r16
   47604:	10000015 	stw	zero,0(r2)
   47608:	10000115 	stw	zero,4(r2)
   4760c:	10000215 	stw	zero,8(r2)
   47610:	8005883a 	mov	r2,r16
   47614:	dfc00117 	ldw	ra,4(sp)
   47618:	dc000017 	ldw	r16,0(sp)
   4761c:	dec00204 	addi	sp,sp,8
   47620:	f800283a 	ret
   47624:	80000015 	stw	zero,0(r16)
   47628:	80000115 	stw	zero,4(r16)
   4762c:	00c006c4 	movi	r3,27
   47630:	19800d2e 	bgeu	r3,r6,47668 <_calloc_r+0xa4>
   47634:	80000215 	stw	zero,8(r16)
   47638:	80000315 	stw	zero,12(r16)
   4763c:	30800c26 	beq	r6,r2,47670 <_calloc_r+0xac>
   47640:	80800404 	addi	r2,r16,16
   47644:	003fef06 	br	47604 <_calloc_r+0x40>
   47648:	8009883a 	mov	r4,r16
   4764c:	000b883a 	mov	r5,zero
   47650:	0045ba00 	call	45ba0 <memset>
   47654:	8005883a 	mov	r2,r16
   47658:	dfc00117 	ldw	ra,4(sp)
   4765c:	dc000017 	ldw	r16,0(sp)
   47660:	dec00204 	addi	sp,sp,8
   47664:	f800283a 	ret
   47668:	80800204 	addi	r2,r16,8
   4766c:	003fe506 	br	47604 <_calloc_r+0x40>
   47670:	80000415 	stw	zero,16(r16)
   47674:	80000515 	stw	zero,20(r16)
   47678:	80800604 	addi	r2,r16,24
   4767c:	003fe106 	br	47604 <_calloc_r+0x40>

00047680 <_close_r>:
   47680:	defffd04 	addi	sp,sp,-12
   47684:	dc400115 	stw	r17,4(sp)
   47688:	dc000015 	stw	r16,0(sp)
   4768c:	2023883a 	mov	r17,r4
   47690:	04000174 	movhi	r16,5
   47694:	843f4f04 	addi	r16,r16,-708
   47698:	2809883a 	mov	r4,r5
   4769c:	dfc00215 	stw	ra,8(sp)
   476a0:	80000015 	stw	zero,0(r16)
   476a4:	00498480 	call	49848 <close>
   476a8:	00ffffc4 	movi	r3,-1
   476ac:	10c00526 	beq	r2,r3,476c4 <_close_r+0x44>
   476b0:	dfc00217 	ldw	ra,8(sp)
   476b4:	dc400117 	ldw	r17,4(sp)
   476b8:	dc000017 	ldw	r16,0(sp)
   476bc:	dec00304 	addi	sp,sp,12
   476c0:	f800283a 	ret
   476c4:	80c00017 	ldw	r3,0(r16)
   476c8:	183ff926 	beq	r3,zero,476b0 <_close_r+0x30>
   476cc:	88c00015 	stw	r3,0(r17)
   476d0:	dfc00217 	ldw	ra,8(sp)
   476d4:	dc400117 	ldw	r17,4(sp)
   476d8:	dc000017 	ldw	r16,0(sp)
   476dc:	dec00304 	addi	sp,sp,12
   476e0:	f800283a 	ret

000476e4 <_fclose_r>:
   476e4:	defffc04 	addi	sp,sp,-16
   476e8:	dc400115 	stw	r17,4(sp)
   476ec:	dc000015 	stw	r16,0(sp)
   476f0:	dfc00315 	stw	ra,12(sp)
   476f4:	dc800215 	stw	r18,8(sp)
   476f8:	2821883a 	mov	r16,r5
   476fc:	2023883a 	mov	r17,r4
   47700:	28003426 	beq	r5,zero,477d4 <_fclose_r+0xf0>
   47704:	00443f00 	call	443f0 <__sfp_lock_acquire>
   47708:	88000226 	beq	r17,zero,47714 <_fclose_r+0x30>
   4770c:	88800e17 	ldw	r2,56(r17)
   47710:	10003826 	beq	r2,zero,477f4 <_fclose_r+0x110>
   47714:	8080030f 	ldh	r2,12(r16)
   47718:	10002526 	beq	r2,zero,477b0 <_fclose_r+0xcc>
   4771c:	8809883a 	mov	r4,r17
   47720:	800b883a 	mov	r5,r16
   47724:	0043f400 	call	43f40 <_fflush_r>
   47728:	1025883a 	mov	r18,r2
   4772c:	80800b17 	ldw	r2,44(r16)
   47730:	10000426 	beq	r2,zero,47744 <_fclose_r+0x60>
   47734:	81400717 	ldw	r5,28(r16)
   47738:	8809883a 	mov	r4,r17
   4773c:	103ee83a 	callr	r2
   47740:	10003516 	blt	r2,zero,47818 <_fclose_r+0x134>
   47744:	8080030b 	ldhu	r2,12(r16)
   47748:	1080200c 	andi	r2,r2,128
   4774c:	10bfffcc 	andi	r2,r2,65535
   47750:	10a0001c 	xori	r2,r2,32768
   47754:	10a00004 	addi	r2,r2,-32768
   47758:	10002b1e 	bne	r2,zero,47808 <_fclose_r+0x124>
   4775c:	81400c17 	ldw	r5,48(r16)
   47760:	28000526 	beq	r5,zero,47778 <_fclose_r+0x94>
   47764:	80801004 	addi	r2,r16,64
   47768:	28800226 	beq	r5,r2,47774 <_fclose_r+0x90>
   4776c:	8809883a 	mov	r4,r17
   47770:	004456c0 	call	4456c <_free_r>
   47774:	80000c15 	stw	zero,48(r16)
   47778:	81401117 	ldw	r5,68(r16)
   4777c:	28000326 	beq	r5,zero,4778c <_fclose_r+0xa8>
   47780:	8809883a 	mov	r4,r17
   47784:	004456c0 	call	4456c <_free_r>
   47788:	80001115 	stw	zero,68(r16)
   4778c:	8000030d 	sth	zero,12(r16)
   47790:	00443f40 	call	443f4 <__sfp_lock_release>
   47794:	9005883a 	mov	r2,r18
   47798:	dfc00317 	ldw	ra,12(sp)
   4779c:	dc800217 	ldw	r18,8(sp)
   477a0:	dc400117 	ldw	r17,4(sp)
   477a4:	dc000017 	ldw	r16,0(sp)
   477a8:	dec00404 	addi	sp,sp,16
   477ac:	f800283a 	ret
   477b0:	00443f40 	call	443f4 <__sfp_lock_release>
   477b4:	0025883a 	mov	r18,zero
   477b8:	9005883a 	mov	r2,r18
   477bc:	dfc00317 	ldw	ra,12(sp)
   477c0:	dc800217 	ldw	r18,8(sp)
   477c4:	dc400117 	ldw	r17,4(sp)
   477c8:	dc000017 	ldw	r16,0(sp)
   477cc:	dec00404 	addi	sp,sp,16
   477d0:	f800283a 	ret
   477d4:	0025883a 	mov	r18,zero
   477d8:	9005883a 	mov	r2,r18
   477dc:	dfc00317 	ldw	ra,12(sp)
   477e0:	dc800217 	ldw	r18,8(sp)
   477e4:	dc400117 	ldw	r17,4(sp)
   477e8:	dc000017 	ldw	r16,0(sp)
   477ec:	dec00404 	addi	sp,sp,16
   477f0:	f800283a 	ret
   477f4:	8809883a 	mov	r4,r17
   477f8:	00441e80 	call	441e8 <__sinit>
   477fc:	8080030f 	ldh	r2,12(r16)
   47800:	103fc61e 	bne	r2,zero,4771c <_fclose_r+0x38>
   47804:	003fea06 	br	477b0 <_fclose_r+0xcc>
   47808:	81400417 	ldw	r5,16(r16)
   4780c:	8809883a 	mov	r4,r17
   47810:	004456c0 	call	4456c <_free_r>
   47814:	003fd106 	br	4775c <_fclose_r+0x78>
   47818:	04bfffc4 	movi	r18,-1
   4781c:	003fc906 	br	47744 <_fclose_r+0x60>

00047820 <fclose>:
   47820:	00800174 	movhi	r2,5
   47824:	10b8a504 	addi	r2,r2,-7532
   47828:	200b883a 	mov	r5,r4
   4782c:	11000017 	ldw	r4,0(r2)
   47830:	00476e41 	jmpi	476e4 <_fclose_r>

00047834 <_fstat_r>:
   47834:	defffd04 	addi	sp,sp,-12
   47838:	dc400115 	stw	r17,4(sp)
   4783c:	dc000015 	stw	r16,0(sp)
   47840:	2023883a 	mov	r17,r4
   47844:	04000174 	movhi	r16,5
   47848:	843f4f04 	addi	r16,r16,-708
   4784c:	2809883a 	mov	r4,r5
   47850:	300b883a 	mov	r5,r6
   47854:	dfc00215 	stw	ra,8(sp)
   47858:	80000015 	stw	zero,0(r16)
   4785c:	004998c0 	call	4998c <fstat>
   47860:	00ffffc4 	movi	r3,-1
   47864:	10c00526 	beq	r2,r3,4787c <_fstat_r+0x48>
   47868:	dfc00217 	ldw	ra,8(sp)
   4786c:	dc400117 	ldw	r17,4(sp)
   47870:	dc000017 	ldw	r16,0(sp)
   47874:	dec00304 	addi	sp,sp,12
   47878:	f800283a 	ret
   4787c:	80c00017 	ldw	r3,0(r16)
   47880:	183ff926 	beq	r3,zero,47868 <_fstat_r+0x34>
   47884:	88c00015 	stw	r3,0(r17)
   47888:	dfc00217 	ldw	ra,8(sp)
   4788c:	dc400117 	ldw	r17,4(sp)
   47890:	dc000017 	ldw	r16,0(sp)
   47894:	dec00304 	addi	sp,sp,12
   47898:	f800283a 	ret

0004789c <_isatty_r>:
   4789c:	defffd04 	addi	sp,sp,-12
   478a0:	dc400115 	stw	r17,4(sp)
   478a4:	dc000015 	stw	r16,0(sp)
   478a8:	2023883a 	mov	r17,r4
   478ac:	04000174 	movhi	r16,5
   478b0:	843f4f04 	addi	r16,r16,-708
   478b4:	2809883a 	mov	r4,r5
   478b8:	dfc00215 	stw	ra,8(sp)
   478bc:	80000015 	stw	zero,0(r16)
   478c0:	0049a880 	call	49a88 <isatty>
   478c4:	00ffffc4 	movi	r3,-1
   478c8:	10c00526 	beq	r2,r3,478e0 <_isatty_r+0x44>
   478cc:	dfc00217 	ldw	ra,8(sp)
   478d0:	dc400117 	ldw	r17,4(sp)
   478d4:	dc000017 	ldw	r16,0(sp)
   478d8:	dec00304 	addi	sp,sp,12
   478dc:	f800283a 	ret
   478e0:	80c00017 	ldw	r3,0(r16)
   478e4:	183ff926 	beq	r3,zero,478cc <_isatty_r+0x30>
   478e8:	88c00015 	stw	r3,0(r17)
   478ec:	dfc00217 	ldw	ra,8(sp)
   478f0:	dc400117 	ldw	r17,4(sp)
   478f4:	dc000017 	ldw	r16,0(sp)
   478f8:	dec00304 	addi	sp,sp,12
   478fc:	f800283a 	ret

00047900 <_lseek_r>:
   47900:	defffd04 	addi	sp,sp,-12
   47904:	dc400115 	stw	r17,4(sp)
   47908:	dc000015 	stw	r16,0(sp)
   4790c:	2023883a 	mov	r17,r4
   47910:	04000174 	movhi	r16,5
   47914:	843f4f04 	addi	r16,r16,-708
   47918:	2809883a 	mov	r4,r5
   4791c:	300b883a 	mov	r5,r6
   47920:	380d883a 	mov	r6,r7
   47924:	dfc00215 	stw	ra,8(sp)
   47928:	80000015 	stw	zero,0(r16)
   4792c:	0049c640 	call	49c64 <lseek>
   47930:	00ffffc4 	movi	r3,-1
   47934:	10c00526 	beq	r2,r3,4794c <_lseek_r+0x4c>
   47938:	dfc00217 	ldw	ra,8(sp)
   4793c:	dc400117 	ldw	r17,4(sp)
   47940:	dc000017 	ldw	r16,0(sp)
   47944:	dec00304 	addi	sp,sp,12
   47948:	f800283a 	ret
   4794c:	80c00017 	ldw	r3,0(r16)
   47950:	183ff926 	beq	r3,zero,47938 <_lseek_r+0x38>
   47954:	88c00015 	stw	r3,0(r17)
   47958:	dfc00217 	ldw	ra,8(sp)
   4795c:	dc400117 	ldw	r17,4(sp)
   47960:	dc000017 	ldw	r16,0(sp)
   47964:	dec00304 	addi	sp,sp,12
   47968:	f800283a 	ret

0004796c <_read_r>:
   4796c:	defffd04 	addi	sp,sp,-12
   47970:	dc400115 	stw	r17,4(sp)
   47974:	dc000015 	stw	r16,0(sp)
   47978:	2023883a 	mov	r17,r4
   4797c:	04000174 	movhi	r16,5
   47980:	843f4f04 	addi	r16,r16,-708
   47984:	2809883a 	mov	r4,r5
   47988:	300b883a 	mov	r5,r6
   4798c:	380d883a 	mov	r6,r7
   47990:	dfc00215 	stw	ra,8(sp)
   47994:	80000015 	stw	zero,0(r16)
   47998:	0049e3c0 	call	49e3c <read>
   4799c:	00ffffc4 	movi	r3,-1
   479a0:	10c00526 	beq	r2,r3,479b8 <_read_r+0x4c>
   479a4:	dfc00217 	ldw	ra,8(sp)
   479a8:	dc400117 	ldw	r17,4(sp)
   479ac:	dc000017 	ldw	r16,0(sp)
   479b0:	dec00304 	addi	sp,sp,12
   479b4:	f800283a 	ret
   479b8:	80c00017 	ldw	r3,0(r16)
   479bc:	183ff926 	beq	r3,zero,479a4 <_read_r+0x38>
   479c0:	88c00015 	stw	r3,0(r17)
   479c4:	dfc00217 	ldw	ra,8(sp)
   479c8:	dc400117 	ldw	r17,4(sp)
   479cc:	dc000017 	ldw	r16,0(sp)
   479d0:	dec00304 	addi	sp,sp,12
   479d4:	f800283a 	ret

000479d8 <__udivdi3>:
   479d8:	defff504 	addi	sp,sp,-44
   479dc:	dd000515 	stw	r20,20(sp)
   479e0:	dcc00415 	stw	r19,16(sp)
   479e4:	dc800315 	stw	r18,12(sp)
   479e8:	dc400215 	stw	r17,8(sp)
   479ec:	dc000115 	stw	r16,4(sp)
   479f0:	dfc00a15 	stw	ra,40(sp)
   479f4:	df000915 	stw	fp,36(sp)
   479f8:	ddc00815 	stw	r23,32(sp)
   479fc:	dd800715 	stw	r22,28(sp)
   47a00:	dd400615 	stw	r21,24(sp)
   47a04:	2025883a 	mov	r18,r4
   47a08:	2823883a 	mov	r17,r5
   47a0c:	3021883a 	mov	r16,r6
   47a10:	2027883a 	mov	r19,r4
   47a14:	2829883a 	mov	r20,r5
   47a18:	3800401e 	bne	r7,zero,47b1c <__udivdi3+0x144>
   47a1c:	2980602e 	bgeu	r5,r6,47ba0 <__udivdi3+0x1c8>
   47a20:	00bfffd4 	movui	r2,65535
   47a24:	1180aa36 	bltu	r2,r6,47cd0 <__udivdi3+0x2f8>
   47a28:	00803fc4 	movi	r2,255
   47a2c:	11814436 	bltu	r2,r6,47f40 <__udivdi3+0x568>
   47a30:	0005883a 	mov	r2,zero
   47a34:	0007883a 	mov	r3,zero
   47a38:	3084d83a 	srl	r2,r6,r2
   47a3c:	01000174 	movhi	r4,5
   47a40:	2131d204 	addi	r4,r4,-14520
   47a44:	2085883a 	add	r2,r4,r2
   47a48:	10800003 	ldbu	r2,0(r2)
   47a4c:	10c7883a 	add	r3,r2,r3
   47a50:	00800804 	movi	r2,32
   47a54:	10c5c83a 	sub	r2,r2,r3
   47a58:	10000526 	beq	r2,zero,47a70 <__udivdi3+0x98>
   47a5c:	88a2983a 	sll	r17,r17,r2
   47a60:	90c6d83a 	srl	r3,r18,r3
   47a64:	30a0983a 	sll	r16,r6,r2
   47a68:	90a6983a 	sll	r19,r18,r2
   47a6c:	88e8b03a 	or	r20,r17,r3
   47a70:	8022d43a 	srli	r17,r16,16
   47a74:	a009883a 	mov	r4,r20
   47a78:	857fffcc 	andi	r21,r16,65535
   47a7c:	880b883a 	mov	r5,r17
   47a80:	00406e80 	call	406e8 <__umodsi3>
   47a84:	a009883a 	mov	r4,r20
   47a88:	880b883a 	mov	r5,r17
   47a8c:	102d883a 	mov	r22,r2
   47a90:	00406e00 	call	406e0 <__udivsi3>
   47a94:	b02c943a 	slli	r22,r22,16
   47a98:	9806d43a 	srli	r3,r19,16
   47a9c:	1549383a 	mul	r4,r2,r21
   47aa0:	1025883a 	mov	r18,r2
   47aa4:	b0c6b03a 	or	r3,r22,r3
   47aa8:	1900052e 	bgeu	r3,r4,47ac0 <__udivdi3+0xe8>
   47aac:	1c07883a 	add	r3,r3,r16
   47ab0:	10bfffc4 	addi	r2,r2,-1
   47ab4:	1c000136 	bltu	r3,r16,47abc <__udivdi3+0xe4>
   47ab8:	19013636 	bltu	r3,r4,47f94 <__udivdi3+0x5bc>
   47abc:	1025883a 	mov	r18,r2
   47ac0:	1929c83a 	sub	r20,r3,r4
   47ac4:	a009883a 	mov	r4,r20
   47ac8:	880b883a 	mov	r5,r17
   47acc:	00406e80 	call	406e8 <__umodsi3>
   47ad0:	102d883a 	mov	r22,r2
   47ad4:	a009883a 	mov	r4,r20
   47ad8:	880b883a 	mov	r5,r17
   47adc:	00406e00 	call	406e0 <__udivsi3>
   47ae0:	b02c943a 	slli	r22,r22,16
   47ae4:	156b383a 	mul	r21,r2,r21
   47ae8:	9cffffcc 	andi	r19,r19,65535
   47aec:	b4e6b03a 	or	r19,r22,r19
   47af0:	1009883a 	mov	r4,r2
   47af4:	9d40052e 	bgeu	r19,r21,47b0c <__udivdi3+0x134>
   47af8:	9c27883a 	add	r19,r19,r16
   47afc:	10bfffc4 	addi	r2,r2,-1
   47b00:	9c00f736 	bltu	r19,r16,47ee0 <__udivdi3+0x508>
   47b04:	9d40f62e 	bgeu	r19,r21,47ee0 <__udivdi3+0x508>
   47b08:	213fff84 	addi	r4,r4,-2
   47b0c:	9004943a 	slli	r2,r18,16
   47b10:	0007883a 	mov	r3,zero
   47b14:	2084b03a 	or	r2,r4,r2
   47b18:	00001506 	br	47b70 <__udivdi3+0x198>
   47b1c:	29c06536 	bltu	r5,r7,47cb4 <__udivdi3+0x2dc>
   47b20:	00bfffd4 	movui	r2,65535
   47b24:	11c0652e 	bgeu	r2,r7,47cbc <__udivdi3+0x2e4>
   47b28:	00804034 	movhi	r2,256
   47b2c:	10bfffc4 	addi	r2,r2,-1
   47b30:	11c0f736 	bltu	r2,r7,47f10 <__udivdi3+0x538>
   47b34:	00c00404 	movi	r3,16
   47b38:	180b883a 	mov	r5,r3
   47b3c:	38c6d83a 	srl	r3,r7,r3
   47b40:	01000174 	movhi	r4,5
   47b44:	2131d204 	addi	r4,r4,-14520
   47b48:	04000804 	movi	r16,32
   47b4c:	20c7883a 	add	r3,r4,r3
   47b50:	18800003 	ldbu	r2,0(r3)
   47b54:	1145883a 	add	r2,r2,r5
   47b58:	80a1c83a 	sub	r16,r16,r2
   47b5c:	8000691e 	bne	r16,zero,47d04 <__udivdi3+0x32c>
   47b60:	0007883a 	mov	r3,zero
   47b64:	3c406536 	bltu	r7,r17,47cfc <__udivdi3+0x324>
   47b68:	9180642e 	bgeu	r18,r6,47cfc <__udivdi3+0x324>
   47b6c:	0005883a 	mov	r2,zero
   47b70:	dfc00a17 	ldw	ra,40(sp)
   47b74:	df000917 	ldw	fp,36(sp)
   47b78:	ddc00817 	ldw	r23,32(sp)
   47b7c:	dd800717 	ldw	r22,28(sp)
   47b80:	dd400617 	ldw	r21,24(sp)
   47b84:	dd000517 	ldw	r20,20(sp)
   47b88:	dcc00417 	ldw	r19,16(sp)
   47b8c:	dc800317 	ldw	r18,12(sp)
   47b90:	dc400217 	ldw	r17,8(sp)
   47b94:	dc000117 	ldw	r16,4(sp)
   47b98:	dec00b04 	addi	sp,sp,44
   47b9c:	f800283a 	ret
   47ba0:	3000041e 	bne	r6,zero,47bb4 <__udivdi3+0x1dc>
   47ba4:	01000044 	movi	r4,1
   47ba8:	000b883a 	mov	r5,zero
   47bac:	00406e00 	call	406e0 <__udivsi3>
   47bb0:	1021883a 	mov	r16,r2
   47bb4:	00bfffd4 	movui	r2,65535
   47bb8:	14004b2e 	bgeu	r2,r16,47ce8 <__udivdi3+0x310>
   47bbc:	00804034 	movhi	r2,256
   47bc0:	10bfffc4 	addi	r2,r2,-1
   47bc4:	1400d836 	bltu	r2,r16,47f28 <__udivdi3+0x550>
   47bc8:	00800404 	movi	r2,16
   47bcc:	1007883a 	mov	r3,r2
   47bd0:	8084d83a 	srl	r2,r16,r2
   47bd4:	01000174 	movhi	r4,5
   47bd8:	2131d204 	addi	r4,r4,-14520
   47bdc:	2085883a 	add	r2,r4,r2
   47be0:	10800003 	ldbu	r2,0(r2)
   47be4:	10c7883a 	add	r3,r2,r3
   47be8:	00800804 	movi	r2,32
   47bec:	10c5c83a 	sub	r2,r2,r3
   47bf0:	1000891e 	bne	r2,zero,47e18 <__udivdi3+0x440>
   47bf4:	8028d43a 	srli	r20,r16,16
   47bf8:	8c23c83a 	sub	r17,r17,r16
   47bfc:	84bfffcc 	andi	r18,r16,65535
   47c00:	00c00044 	movi	r3,1
   47c04:	8809883a 	mov	r4,r17
   47c08:	a00b883a 	mov	r5,r20
   47c0c:	d8c00015 	stw	r3,0(sp)
   47c10:	00406e80 	call	406e8 <__umodsi3>
   47c14:	8809883a 	mov	r4,r17
   47c18:	a00b883a 	mov	r5,r20
   47c1c:	102b883a 	mov	r21,r2
   47c20:	00406e00 	call	406e0 <__udivsi3>
   47c24:	a82a943a 	slli	r21,r21,16
   47c28:	9808d43a 	srli	r4,r19,16
   47c2c:	148b383a 	mul	r5,r2,r18
   47c30:	1023883a 	mov	r17,r2
   47c34:	a908b03a 	or	r4,r21,r4
   47c38:	d8c00017 	ldw	r3,0(sp)
   47c3c:	2140052e 	bgeu	r4,r5,47c54 <__udivdi3+0x27c>
   47c40:	2409883a 	add	r4,r4,r16
   47c44:	10bfffc4 	addi	r2,r2,-1
   47c48:	24000136 	bltu	r4,r16,47c50 <__udivdi3+0x278>
   47c4c:	2140ce36 	bltu	r4,r5,47f88 <__udivdi3+0x5b0>
   47c50:	1023883a 	mov	r17,r2
   47c54:	216bc83a 	sub	r21,r4,r5
   47c58:	a809883a 	mov	r4,r21
   47c5c:	a00b883a 	mov	r5,r20
   47c60:	d8c00015 	stw	r3,0(sp)
   47c64:	00406e80 	call	406e8 <__umodsi3>
   47c68:	102d883a 	mov	r22,r2
   47c6c:	a809883a 	mov	r4,r21
   47c70:	a00b883a 	mov	r5,r20
   47c74:	00406e00 	call	406e0 <__udivsi3>
   47c78:	b02c943a 	slli	r22,r22,16
   47c7c:	14a5383a 	mul	r18,r2,r18
   47c80:	9cffffcc 	andi	r19,r19,65535
   47c84:	b4e6b03a 	or	r19,r22,r19
   47c88:	1009883a 	mov	r4,r2
   47c8c:	d8c00017 	ldw	r3,0(sp)
   47c90:	9c80052e 	bgeu	r19,r18,47ca8 <__udivdi3+0x2d0>
   47c94:	9c27883a 	add	r19,r19,r16
   47c98:	10bfffc4 	addi	r2,r2,-1
   47c9c:	9c009236 	bltu	r19,r16,47ee8 <__udivdi3+0x510>
   47ca0:	9c80912e 	bgeu	r19,r18,47ee8 <__udivdi3+0x510>
   47ca4:	213fff84 	addi	r4,r4,-2
   47ca8:	8804943a 	slli	r2,r17,16
   47cac:	2084b03a 	or	r2,r4,r2
   47cb0:	003faf06 	br	47b70 <__udivdi3+0x198>
   47cb4:	0007883a 	mov	r3,zero
   47cb8:	003fac06 	br	47b6c <__udivdi3+0x194>
   47cbc:	00803fc4 	movi	r2,255
   47cc0:	11c09636 	bltu	r2,r7,47f1c <__udivdi3+0x544>
   47cc4:	0007883a 	mov	r3,zero
   47cc8:	000b883a 	mov	r5,zero
   47ccc:	003f9b06 	br	47b3c <__udivdi3+0x164>
   47cd0:	00804034 	movhi	r2,256
   47cd4:	10bfffc4 	addi	r2,r2,-1
   47cd8:	11809636 	bltu	r2,r6,47f34 <__udivdi3+0x55c>
   47cdc:	00800404 	movi	r2,16
   47ce0:	1007883a 	mov	r3,r2
   47ce4:	003f5406 	br	47a38 <__udivdi3+0x60>
   47ce8:	00803fc4 	movi	r2,255
   47cec:	14009736 	bltu	r2,r16,47f4c <__udivdi3+0x574>
   47cf0:	0005883a 	mov	r2,zero
   47cf4:	0007883a 	mov	r3,zero
   47cf8:	003fb506 	br	47bd0 <__udivdi3+0x1f8>
   47cfc:	00800044 	movi	r2,1
   47d00:	003f9b06 	br	47b70 <__udivdi3+0x198>
   47d04:	3086d83a 	srl	r3,r6,r2
   47d08:	3c0e983a 	sll	r7,r7,r16
   47d0c:	88aad83a 	srl	r21,r17,r2
   47d10:	9084d83a 	srl	r2,r18,r2
   47d14:	38e6b03a 	or	r19,r7,r3
   47d18:	9828d43a 	srli	r20,r19,16
   47d1c:	8c22983a 	sll	r17,r17,r16
   47d20:	a809883a 	mov	r4,r21
   47d24:	a00b883a 	mov	r5,r20
   47d28:	342c983a 	sll	r22,r6,r16
   47d2c:	88a2b03a 	or	r17,r17,r2
   47d30:	00406e80 	call	406e8 <__umodsi3>
   47d34:	a809883a 	mov	r4,r21
   47d38:	a00b883a 	mov	r5,r20
   47d3c:	1039883a 	mov	fp,r2
   47d40:	00406e00 	call	406e0 <__udivsi3>
   47d44:	102b883a 	mov	r21,r2
   47d48:	9dffffcc 	andi	r23,r19,65535
   47d4c:	e008943a 	slli	r4,fp,16
   47d50:	8804d43a 	srli	r2,r17,16
   47d54:	adcd383a 	mul	r6,r21,r23
   47d58:	2088b03a 	or	r4,r4,r2
   47d5c:	2180042e 	bgeu	r4,r6,47d70 <__udivdi3+0x398>
   47d60:	24c9883a 	add	r4,r4,r19
   47d64:	a8bfffc4 	addi	r2,r21,-1
   47d68:	24c07f2e 	bgeu	r4,r19,47f68 <__udivdi3+0x590>
   47d6c:	102b883a 	mov	r21,r2
   47d70:	21b9c83a 	sub	fp,r4,r6
   47d74:	e009883a 	mov	r4,fp
   47d78:	a00b883a 	mov	r5,r20
   47d7c:	00406e80 	call	406e8 <__umodsi3>
   47d80:	e009883a 	mov	r4,fp
   47d84:	a00b883a 	mov	r5,r20
   47d88:	d8800015 	stw	r2,0(sp)
   47d8c:	00406e00 	call	406e0 <__udivsi3>
   47d90:	d8c00017 	ldw	r3,0(sp)
   47d94:	15cb383a 	mul	r5,r2,r23
   47d98:	8c7fffcc 	andi	r17,r17,65535
   47d9c:	1806943a 	slli	r3,r3,16
   47da0:	1009883a 	mov	r4,r2
   47da4:	1c46b03a 	or	r3,r3,r17
   47da8:	1940042e 	bgeu	r3,r5,47dbc <__udivdi3+0x3e4>
   47dac:	1cc7883a 	add	r3,r3,r19
   47db0:	10bfffc4 	addi	r2,r2,-1
   47db4:	1cc0682e 	bgeu	r3,r19,47f58 <__udivdi3+0x580>
   47db8:	1009883a 	mov	r4,r2
   47dbc:	a804943a 	slli	r2,r21,16
   47dc0:	b1ffffcc 	andi	r7,r22,65535
   47dc4:	b02cd43a 	srli	r22,r22,16
   47dc8:	2084b03a 	or	r2,r4,r2
   47dcc:	113fffcc 	andi	r4,r2,65535
   47dd0:	100cd43a 	srli	r6,r2,16
   47dd4:	21d1383a 	mul	r8,r4,r7
   47dd8:	2589383a 	mul	r4,r4,r22
   47ddc:	31cf383a 	mul	r7,r6,r7
   47de0:	4012d43a 	srli	r9,r8,16
   47de4:	1947c83a 	sub	r3,r3,r5
   47de8:	3909883a 	add	r4,r7,r4
   47dec:	2249883a 	add	r4,r4,r9
   47df0:	35ad383a 	mul	r22,r6,r22
   47df4:	21c0022e 	bgeu	r4,r7,47e00 <__udivdi3+0x428>
   47df8:	01400074 	movhi	r5,1
   47dfc:	b16d883a 	add	r22,r22,r5
   47e00:	200ad43a 	srli	r5,r4,16
   47e04:	b16d883a 	add	r22,r22,r5
   47e08:	1d803e36 	bltu	r3,r22,47f04 <__udivdi3+0x52c>
   47e0c:	1d803826 	beq	r3,r22,47ef0 <__udivdi3+0x518>
   47e10:	0007883a 	mov	r3,zero
   47e14:	003f5606 	br	47b70 <__udivdi3+0x198>
   47e18:	80a0983a 	sll	r16,r16,r2
   47e1c:	88ead83a 	srl	r21,r17,r3
   47e20:	90c6d83a 	srl	r3,r18,r3
   47e24:	8028d43a 	srli	r20,r16,16
   47e28:	88a2983a 	sll	r17,r17,r2
   47e2c:	a809883a 	mov	r4,r21
   47e30:	a00b883a 	mov	r5,r20
   47e34:	88ecb03a 	or	r22,r17,r3
   47e38:	90a6983a 	sll	r19,r18,r2
   47e3c:	00406e80 	call	406e8 <__umodsi3>
   47e40:	a809883a 	mov	r4,r21
   47e44:	a00b883a 	mov	r5,r20
   47e48:	1023883a 	mov	r17,r2
   47e4c:	00406e00 	call	406e0 <__udivsi3>
   47e50:	102b883a 	mov	r21,r2
   47e54:	84bfffcc 	andi	r18,r16,65535
   47e58:	8808943a 	slli	r4,r17,16
   47e5c:	b004d43a 	srli	r2,r22,16
   47e60:	ac87383a 	mul	r3,r21,r18
   47e64:	2088b03a 	or	r4,r4,r2
   47e68:	20c0062e 	bgeu	r4,r3,47e84 <__udivdi3+0x4ac>
   47e6c:	2409883a 	add	r4,r4,r16
   47e70:	a8bfffc4 	addi	r2,r21,-1
   47e74:	24004236 	bltu	r4,r16,47f80 <__udivdi3+0x5a8>
   47e78:	20c0412e 	bgeu	r4,r3,47f80 <__udivdi3+0x5a8>
   47e7c:	ad7fff84 	addi	r21,r21,-2
   47e80:	2409883a 	add	r4,r4,r16
   47e84:	20efc83a 	sub	r23,r4,r3
   47e88:	b809883a 	mov	r4,r23
   47e8c:	a00b883a 	mov	r5,r20
   47e90:	00406e80 	call	406e8 <__umodsi3>
   47e94:	1023883a 	mov	r17,r2
   47e98:	a00b883a 	mov	r5,r20
   47e9c:	b809883a 	mov	r4,r23
   47ea0:	00406e00 	call	406e0 <__udivsi3>
   47ea4:	8822943a 	slli	r17,r17,16
   47ea8:	148b383a 	mul	r5,r2,r18
   47eac:	b5bfffcc 	andi	r22,r22,65535
   47eb0:	8da2b03a 	or	r17,r17,r22
   47eb4:	8940062e 	bgeu	r17,r5,47ed0 <__udivdi3+0x4f8>
   47eb8:	8c23883a 	add	r17,r17,r16
   47ebc:	10ffffc4 	addi	r3,r2,-1
   47ec0:	8c002d36 	bltu	r17,r16,47f78 <__udivdi3+0x5a0>
   47ec4:	89402c2e 	bgeu	r17,r5,47f78 <__udivdi3+0x5a0>
   47ec8:	10bfff84 	addi	r2,r2,-2
   47ecc:	8c23883a 	add	r17,r17,r16
   47ed0:	a806943a 	slli	r3,r21,16
   47ed4:	8963c83a 	sub	r17,r17,r5
   47ed8:	10c6b03a 	or	r3,r2,r3
   47edc:	003f4906 	br	47c04 <__udivdi3+0x22c>
   47ee0:	1009883a 	mov	r4,r2
   47ee4:	003f0906 	br	47b0c <__udivdi3+0x134>
   47ee8:	1009883a 	mov	r4,r2
   47eec:	003f6e06 	br	47ca8 <__udivdi3+0x2d0>
   47ef0:	2008943a 	slli	r4,r4,16
   47ef4:	9420983a 	sll	r16,r18,r16
   47ef8:	423fffcc 	andi	r8,r8,65535
   47efc:	2209883a 	add	r4,r4,r8
   47f00:	813fc32e 	bgeu	r16,r4,47e10 <__udivdi3+0x438>
   47f04:	10bfffc4 	addi	r2,r2,-1
   47f08:	0007883a 	mov	r3,zero
   47f0c:	003f1806 	br	47b70 <__udivdi3+0x198>
   47f10:	00c00604 	movi	r3,24
   47f14:	180b883a 	mov	r5,r3
   47f18:	003f0806 	br	47b3c <__udivdi3+0x164>
   47f1c:	00c00204 	movi	r3,8
   47f20:	180b883a 	mov	r5,r3
   47f24:	003f0506 	br	47b3c <__udivdi3+0x164>
   47f28:	00800604 	movi	r2,24
   47f2c:	1007883a 	mov	r3,r2
   47f30:	003f2706 	br	47bd0 <__udivdi3+0x1f8>
   47f34:	00800604 	movi	r2,24
   47f38:	1007883a 	mov	r3,r2
   47f3c:	003ebe06 	br	47a38 <__udivdi3+0x60>
   47f40:	00800204 	movi	r2,8
   47f44:	1007883a 	mov	r3,r2
   47f48:	003ebb06 	br	47a38 <__udivdi3+0x60>
   47f4c:	00800204 	movi	r2,8
   47f50:	1007883a 	mov	r3,r2
   47f54:	003f1e06 	br	47bd0 <__udivdi3+0x1f8>
   47f58:	197f972e 	bgeu	r3,r5,47db8 <__udivdi3+0x3e0>
   47f5c:	213fff84 	addi	r4,r4,-2
   47f60:	1cc7883a 	add	r3,r3,r19
   47f64:	003f9506 	br	47dbc <__udivdi3+0x3e4>
   47f68:	21bf802e 	bgeu	r4,r6,47d6c <__udivdi3+0x394>
   47f6c:	ad7fff84 	addi	r21,r21,-2
   47f70:	24c9883a 	add	r4,r4,r19
   47f74:	003f7e06 	br	47d70 <__udivdi3+0x398>
   47f78:	1805883a 	mov	r2,r3
   47f7c:	003fd406 	br	47ed0 <__udivdi3+0x4f8>
   47f80:	102b883a 	mov	r21,r2
   47f84:	003fbf06 	br	47e84 <__udivdi3+0x4ac>
   47f88:	8c7fff84 	addi	r17,r17,-2
   47f8c:	2409883a 	add	r4,r4,r16
   47f90:	003f3006 	br	47c54 <__udivdi3+0x27c>
   47f94:	94bfff84 	addi	r18,r18,-2
   47f98:	1c07883a 	add	r3,r3,r16
   47f9c:	003ec806 	br	47ac0 <__udivdi3+0xe8>

00047fa0 <__umoddi3>:
   47fa0:	defff504 	addi	sp,sp,-44
   47fa4:	dd000515 	stw	r20,20(sp)
   47fa8:	dcc00415 	stw	r19,16(sp)
   47fac:	dc800315 	stw	r18,12(sp)
   47fb0:	dc400215 	stw	r17,8(sp)
   47fb4:	dc000115 	stw	r16,4(sp)
   47fb8:	dfc00a15 	stw	ra,40(sp)
   47fbc:	df000915 	stw	fp,36(sp)
   47fc0:	ddc00815 	stw	r23,32(sp)
   47fc4:	dd800715 	stw	r22,28(sp)
   47fc8:	dd400615 	stw	r21,24(sp)
   47fcc:	2025883a 	mov	r18,r4
   47fd0:	2823883a 	mov	r17,r5
   47fd4:	3021883a 	mov	r16,r6
   47fd8:	2027883a 	mov	r19,r4
   47fdc:	2829883a 	mov	r20,r5
   47fe0:	3800351e 	bne	r7,zero,480b8 <__umoddi3+0x118>
   47fe4:	29804d2e 	bgeu	r5,r6,4811c <__umoddi3+0x17c>
   47fe8:	00bfffd4 	movui	r2,65535
   47fec:	11809a36 	bltu	r2,r6,48258 <__umoddi3+0x2b8>
   47ff0:	00803fc4 	movi	r2,255
   47ff4:	11813936 	bltu	r2,r6,484dc <__umoddi3+0x53c>
   47ff8:	0005883a 	mov	r2,zero
   47ffc:	0009883a 	mov	r4,zero
   48000:	3084d83a 	srl	r2,r6,r2
   48004:	00c00174 	movhi	r3,5
   48008:	18f1d204 	addi	r3,r3,-14520
   4800c:	05400804 	movi	r21,32
   48010:	1885883a 	add	r2,r3,r2
   48014:	10800003 	ldbu	r2,0(r2)
   48018:	1109883a 	add	r4,r2,r4
   4801c:	a92bc83a 	sub	r21,r21,r4
   48020:	a800ec26 	beq	r21,zero,483d4 <__umoddi3+0x434>
   48024:	8d62983a 	sll	r17,r17,r21
   48028:	9108d83a 	srl	r4,r18,r4
   4802c:	3560983a 	sll	r16,r6,r21
   48030:	9566983a 	sll	r19,r18,r21
   48034:	8928b03a 	or	r20,r17,r4
   48038:	8022d43a 	srli	r17,r16,16
   4803c:	a009883a 	mov	r4,r20
   48040:	84bfffcc 	andi	r18,r16,65535
   48044:	880b883a 	mov	r5,r17
   48048:	00406e80 	call	406e8 <__umodsi3>
   4804c:	a009883a 	mov	r4,r20
   48050:	880b883a 	mov	r5,r17
   48054:	102d883a 	mov	r22,r2
   48058:	00406e00 	call	406e0 <__udivsi3>
   4805c:	b02c943a 	slli	r22,r22,16
   48060:	9806d43a 	srli	r3,r19,16
   48064:	1485383a 	mul	r2,r2,r18
   48068:	b0c6b03a 	or	r3,r22,r3
   4806c:	1880042e 	bgeu	r3,r2,48080 <__umoddi3+0xe0>
   48070:	1c07883a 	add	r3,r3,r16
   48074:	1c000236 	bltu	r3,r16,48080 <__umoddi3+0xe0>
   48078:	1880012e 	bgeu	r3,r2,48080 <__umoddi3+0xe0>
   4807c:	1c07883a 	add	r3,r3,r16
   48080:	18a9c83a 	sub	r20,r3,r2
   48084:	a009883a 	mov	r4,r20
   48088:	880b883a 	mov	r5,r17
   4808c:	00406e80 	call	406e8 <__umodsi3>
   48090:	102d883a 	mov	r22,r2
   48094:	a009883a 	mov	r4,r20
   48098:	880b883a 	mov	r5,r17
   4809c:	00406e00 	call	406e0 <__udivsi3>
   480a0:	b02c943a 	slli	r22,r22,16
   480a4:	1485383a 	mul	r2,r2,r18
   480a8:	9cffffcc 	andi	r19,r19,65535
   480ac:	b4e6b03a 	or	r19,r22,r19
   480b0:	9880522e 	bgeu	r19,r2,481fc <__umoddi3+0x25c>
   480b4:	00004d06 	br	481ec <__umoddi3+0x24c>
   480b8:	29c05436 	bltu	r5,r7,4820c <__umoddi3+0x26c>
   480bc:	00bfffd4 	movui	r2,65535
   480c0:	11c0602e 	bgeu	r2,r7,48244 <__umoddi3+0x2a4>
   480c4:	00804034 	movhi	r2,256
   480c8:	10bfffc4 	addi	r2,r2,-1
   480cc:	11c0f736 	bltu	r2,r7,484ac <__umoddi3+0x50c>
   480d0:	00c00404 	movi	r3,16
   480d4:	1827883a 	mov	r19,r3
   480d8:	38c6d83a 	srl	r3,r7,r3
   480dc:	01000174 	movhi	r4,5
   480e0:	2131d204 	addi	r4,r4,-14520
   480e4:	04000804 	movi	r16,32
   480e8:	20c7883a 	add	r3,r4,r3
   480ec:	18800003 	ldbu	r2,0(r3)
   480f0:	14e7883a 	add	r19,r2,r19
   480f4:	84e1c83a 	sub	r16,r16,r19
   480f8:	8000621e 	bne	r16,zero,48284 <__umoddi3+0x2e4>
   480fc:	3c400136 	bltu	r7,r17,48104 <__umoddi3+0x164>
   48100:	91810336 	bltu	r18,r6,48510 <__umoddi3+0x570>
   48104:	9185c83a 	sub	r2,r18,r6
   48108:	89e3c83a 	sub	r17,r17,r7
   4810c:	90a5803a 	cmpltu	r18,r18,r2
   48110:	8ca9c83a 	sub	r20,r17,r18
   48114:	a007883a 	mov	r3,r20
   48118:	00003e06 	br	48214 <__umoddi3+0x274>
   4811c:	3000041e 	bne	r6,zero,48130 <__umoddi3+0x190>
   48120:	01000044 	movi	r4,1
   48124:	000b883a 	mov	r5,zero
   48128:	00406e00 	call	406e0 <__udivsi3>
   4812c:	1021883a 	mov	r16,r2
   48130:	00bfffd4 	movui	r2,65535
   48134:	14004e2e 	bgeu	r2,r16,48270 <__umoddi3+0x2d0>
   48138:	00804034 	movhi	r2,256
   4813c:	10bfffc4 	addi	r2,r2,-1
   48140:	1400e336 	bltu	r2,r16,484d0 <__umoddi3+0x530>
   48144:	00800404 	movi	r2,16
   48148:	1007883a 	mov	r3,r2
   4814c:	8084d83a 	srl	r2,r16,r2
   48150:	01000174 	movhi	r4,5
   48154:	2131d204 	addi	r4,r4,-14520
   48158:	05400804 	movi	r21,32
   4815c:	2085883a 	add	r2,r4,r2
   48160:	10800003 	ldbu	r2,0(r2)
   48164:	10c7883a 	add	r3,r2,r3
   48168:	a8ebc83a 	sub	r21,r21,r3
   4816c:	a8009b1e 	bne	r21,zero,483dc <__umoddi3+0x43c>
   48170:	8028d43a 	srli	r20,r16,16
   48174:	8c23c83a 	sub	r17,r17,r16
   48178:	85bfffcc 	andi	r22,r16,65535
   4817c:	8809883a 	mov	r4,r17
   48180:	a00b883a 	mov	r5,r20
   48184:	00406e80 	call	406e8 <__umodsi3>
   48188:	8809883a 	mov	r4,r17
   4818c:	a00b883a 	mov	r5,r20
   48190:	1025883a 	mov	r18,r2
   48194:	00406e00 	call	406e0 <__udivsi3>
   48198:	9024943a 	slli	r18,r18,16
   4819c:	9806d43a 	srli	r3,r19,16
   481a0:	1585383a 	mul	r2,r2,r22
   481a4:	90c6b03a 	or	r3,r18,r3
   481a8:	1880032e 	bgeu	r3,r2,481b8 <__umoddi3+0x218>
   481ac:	1c07883a 	add	r3,r3,r16
   481b0:	1c000136 	bltu	r3,r16,481b8 <__umoddi3+0x218>
   481b4:	1880d436 	bltu	r3,r2,48508 <__umoddi3+0x568>
   481b8:	18a3c83a 	sub	r17,r3,r2
   481bc:	8809883a 	mov	r4,r17
   481c0:	a00b883a 	mov	r5,r20
   481c4:	00406e80 	call	406e8 <__umodsi3>
   481c8:	1025883a 	mov	r18,r2
   481cc:	8809883a 	mov	r4,r17
   481d0:	a00b883a 	mov	r5,r20
   481d4:	00406e00 	call	406e0 <__udivsi3>
   481d8:	9024943a 	slli	r18,r18,16
   481dc:	1585383a 	mul	r2,r2,r22
   481e0:	9cffffcc 	andi	r19,r19,65535
   481e4:	94e6b03a 	or	r19,r18,r19
   481e8:	9880042e 	bgeu	r19,r2,481fc <__umoddi3+0x25c>
   481ec:	9c27883a 	add	r19,r19,r16
   481f0:	9c000236 	bltu	r19,r16,481fc <__umoddi3+0x25c>
   481f4:	9880012e 	bgeu	r19,r2,481fc <__umoddi3+0x25c>
   481f8:	9c27883a 	add	r19,r19,r16
   481fc:	98a7c83a 	sub	r19,r19,r2
   48200:	9d44d83a 	srl	r2,r19,r21
   48204:	0007883a 	mov	r3,zero
   48208:	00000206 	br	48214 <__umoddi3+0x274>
   4820c:	2005883a 	mov	r2,r4
   48210:	2807883a 	mov	r3,r5
   48214:	dfc00a17 	ldw	ra,40(sp)
   48218:	df000917 	ldw	fp,36(sp)
   4821c:	ddc00817 	ldw	r23,32(sp)
   48220:	dd800717 	ldw	r22,28(sp)
   48224:	dd400617 	ldw	r21,24(sp)
   48228:	dd000517 	ldw	r20,20(sp)
   4822c:	dcc00417 	ldw	r19,16(sp)
   48230:	dc800317 	ldw	r18,12(sp)
   48234:	dc400217 	ldw	r17,8(sp)
   48238:	dc000117 	ldw	r16,4(sp)
   4823c:	dec00b04 	addi	sp,sp,44
   48240:	f800283a 	ret
   48244:	00803fc4 	movi	r2,255
   48248:	11c09536 	bltu	r2,r7,484a0 <__umoddi3+0x500>
   4824c:	0007883a 	mov	r3,zero
   48250:	0027883a 	mov	r19,zero
   48254:	003fa006 	br	480d8 <__umoddi3+0x138>
   48258:	00804034 	movhi	r2,256
   4825c:	10bfffc4 	addi	r2,r2,-1
   48260:	11809536 	bltu	r2,r6,484b8 <__umoddi3+0x518>
   48264:	00800404 	movi	r2,16
   48268:	1009883a 	mov	r4,r2
   4826c:	003f6406 	br	48000 <__umoddi3+0x60>
   48270:	00803fc4 	movi	r2,255
   48274:	14009336 	bltu	r2,r16,484c4 <__umoddi3+0x524>
   48278:	0005883a 	mov	r2,zero
   4827c:	0007883a 	mov	r3,zero
   48280:	003fb206 	br	4814c <__umoddi3+0x1ac>
   48284:	34c4d83a 	srl	r2,r6,r19
   48288:	3c0e983a 	sll	r7,r7,r16
   4828c:	8ceed83a 	srl	r23,r17,r19
   48290:	8c22983a 	sll	r17,r17,r16
   48294:	38a8b03a 	or	r20,r7,r2
   48298:	a02ad43a 	srli	r21,r20,16
   4829c:	94c4d83a 	srl	r2,r18,r19
   482a0:	b809883a 	mov	r4,r23
   482a4:	a80b883a 	mov	r5,r21
   482a8:	88a2b03a 	or	r17,r17,r2
   482ac:	342c983a 	sll	r22,r6,r16
   482b0:	00406e80 	call	406e8 <__umodsi3>
   482b4:	b809883a 	mov	r4,r23
   482b8:	a80b883a 	mov	r5,r21
   482bc:	d8800015 	stw	r2,0(sp)
   482c0:	00406e00 	call	406e0 <__udivsi3>
   482c4:	d8c00017 	ldw	r3,0(sp)
   482c8:	102f883a 	mov	r23,r2
   482cc:	a73fffcc 	andi	fp,r20,65535
   482d0:	180a943a 	slli	r5,r3,16
   482d4:	8804d43a 	srli	r2,r17,16
   482d8:	bf09383a 	mul	r4,r23,fp
   482dc:	9424983a 	sll	r18,r18,r16
   482e0:	288ab03a 	or	r5,r5,r2
   482e4:	2900042e 	bgeu	r5,r4,482f8 <__umoddi3+0x358>
   482e8:	2d0b883a 	add	r5,r5,r20
   482ec:	b8bfffc4 	addi	r2,r23,-1
   482f0:	2d00812e 	bgeu	r5,r20,484f8 <__umoddi3+0x558>
   482f4:	102f883a 	mov	r23,r2
   482f8:	2907c83a 	sub	r3,r5,r4
   482fc:	1809883a 	mov	r4,r3
   48300:	a80b883a 	mov	r5,r21
   48304:	d8c00015 	stw	r3,0(sp)
   48308:	00406e80 	call	406e8 <__umodsi3>
   4830c:	d8c00017 	ldw	r3,0(sp)
   48310:	a80b883a 	mov	r5,r21
   48314:	d8800015 	stw	r2,0(sp)
   48318:	1809883a 	mov	r4,r3
   4831c:	00406e00 	call	406e0 <__udivsi3>
   48320:	d9800017 	ldw	r6,0(sp)
   48324:	8c7fffcc 	andi	r17,r17,65535
   48328:	3008943a 	slli	r4,r6,16
   4832c:	170d383a 	mul	r6,r2,fp
   48330:	2448b03a 	or	r4,r4,r17
   48334:	2180042e 	bgeu	r4,r6,48348 <__umoddi3+0x3a8>
   48338:	2509883a 	add	r4,r4,r20
   4833c:	10ffffc4 	addi	r3,r2,-1
   48340:	2500692e 	bgeu	r4,r20,484e8 <__umoddi3+0x548>
   48344:	1805883a 	mov	r2,r3
   48348:	b82e943a 	slli	r23,r23,16
   4834c:	b010d43a 	srli	r8,r22,16
   48350:	b1ffffcc 	andi	r7,r22,65535
   48354:	15eeb03a 	or	r23,r2,r23
   48358:	b8bfffcc 	andi	r2,r23,65535
   4835c:	b82ed43a 	srli	r23,r23,16
   48360:	11c7383a 	mul	r3,r2,r7
   48364:	1205383a 	mul	r2,r2,r8
   48368:	b9cf383a 	mul	r7,r23,r7
   4836c:	400b883a 	mov	r5,r8
   48370:	1810d43a 	srli	r8,r3,16
   48374:	3885883a 	add	r2,r7,r2
   48378:	2189c83a 	sub	r4,r4,r6
   4837c:	1205883a 	add	r2,r2,r8
   48380:	b94b383a 	mul	r5,r23,r5
   48384:	11c0022e 	bgeu	r2,r7,48390 <__umoddi3+0x3f0>
   48388:	01800074 	movhi	r6,1
   4838c:	298b883a 	add	r5,r5,r6
   48390:	100cd43a 	srli	r6,r2,16
   48394:	1004943a 	slli	r2,r2,16
   48398:	18ffffcc 	andi	r3,r3,65535
   4839c:	298b883a 	add	r5,r5,r6
   483a0:	10c5883a 	add	r2,r2,r3
   483a4:	21403836 	bltu	r4,r5,48488 <__umoddi3+0x4e8>
   483a8:	21405c26 	beq	r4,r5,4851c <__umoddi3+0x57c>
   483ac:	2147c83a 	sub	r3,r4,r5
   483b0:	102d883a 	mov	r22,r2
   483b4:	95adc83a 	sub	r22,r18,r22
   483b8:	95a5803a 	cmpltu	r18,r18,r22
   483bc:	1c87c83a 	sub	r3,r3,r18
   483c0:	1cc4983a 	sll	r2,r3,r19
   483c4:	b42cd83a 	srl	r22,r22,r16
   483c8:	1c06d83a 	srl	r3,r3,r16
   483cc:	1584b03a 	or	r2,r2,r22
   483d0:	003f9006 	br	48214 <__umoddi3+0x274>
   483d4:	002b883a 	mov	r21,zero
   483d8:	003f1706 	br	48038 <__umoddi3+0x98>
   483dc:	8560983a 	sll	r16,r16,r21
   483e0:	88e6d83a 	srl	r19,r17,r3
   483e4:	90c6d83a 	srl	r3,r18,r3
   483e8:	8028d43a 	srli	r20,r16,16
   483ec:	8d62983a 	sll	r17,r17,r21
   483f0:	9809883a 	mov	r4,r19
   483f4:	a00b883a 	mov	r5,r20
   483f8:	88eeb03a 	or	r23,r17,r3
   483fc:	00406e80 	call	406e8 <__umodsi3>
   48400:	9809883a 	mov	r4,r19
   48404:	a00b883a 	mov	r5,r20
   48408:	1023883a 	mov	r17,r2
   4840c:	00406e00 	call	406e0 <__udivsi3>
   48410:	85bfffcc 	andi	r22,r16,65535
   48414:	880a943a 	slli	r5,r17,16
   48418:	b806d43a 	srli	r3,r23,16
   4841c:	1585383a 	mul	r2,r2,r22
   48420:	9566983a 	sll	r19,r18,r21
   48424:	28cab03a 	or	r5,r5,r3
   48428:	2880042e 	bgeu	r5,r2,4843c <__umoddi3+0x49c>
   4842c:	2c0b883a 	add	r5,r5,r16
   48430:	2c000236 	bltu	r5,r16,4843c <__umoddi3+0x49c>
   48434:	2880012e 	bgeu	r5,r2,4843c <__umoddi3+0x49c>
   48438:	2c0b883a 	add	r5,r5,r16
   4843c:	28a5c83a 	sub	r18,r5,r2
   48440:	9009883a 	mov	r4,r18
   48444:	a00b883a 	mov	r5,r20
   48448:	00406e80 	call	406e8 <__umodsi3>
   4844c:	1023883a 	mov	r17,r2
   48450:	9009883a 	mov	r4,r18
   48454:	a00b883a 	mov	r5,r20
   48458:	00406e00 	call	406e0 <__udivsi3>
   4845c:	8822943a 	slli	r17,r17,16
   48460:	1585383a 	mul	r2,r2,r22
   48464:	bdffffcc 	andi	r23,r23,65535
   48468:	8de2b03a 	or	r17,r17,r23
   4846c:	8880042e 	bgeu	r17,r2,48480 <__umoddi3+0x4e0>
   48470:	8c23883a 	add	r17,r17,r16
   48474:	8c000236 	bltu	r17,r16,48480 <__umoddi3+0x4e0>
   48478:	8880012e 	bgeu	r17,r2,48480 <__umoddi3+0x4e0>
   4847c:	8c23883a 	add	r17,r17,r16
   48480:	88a3c83a 	sub	r17,r17,r2
   48484:	003f3d06 	br	4817c <__umoddi3+0x1dc>
   48488:	15adc83a 	sub	r22,r2,r22
   4848c:	2d07c83a 	sub	r3,r5,r20
   48490:	1585803a 	cmpltu	r2,r2,r22
   48494:	1887c83a 	sub	r3,r3,r2
   48498:	20c7c83a 	sub	r3,r4,r3
   4849c:	003fc506 	br	483b4 <__umoddi3+0x414>
   484a0:	00c00204 	movi	r3,8
   484a4:	1827883a 	mov	r19,r3
   484a8:	003f0b06 	br	480d8 <__umoddi3+0x138>
   484ac:	00c00604 	movi	r3,24
   484b0:	1827883a 	mov	r19,r3
   484b4:	003f0806 	br	480d8 <__umoddi3+0x138>
   484b8:	00800604 	movi	r2,24
   484bc:	1009883a 	mov	r4,r2
   484c0:	003ecf06 	br	48000 <__umoddi3+0x60>
   484c4:	00800204 	movi	r2,8
   484c8:	1007883a 	mov	r3,r2
   484cc:	003f1f06 	br	4814c <__umoddi3+0x1ac>
   484d0:	00800604 	movi	r2,24
   484d4:	1007883a 	mov	r3,r2
   484d8:	003f1c06 	br	4814c <__umoddi3+0x1ac>
   484dc:	00800204 	movi	r2,8
   484e0:	1009883a 	mov	r4,r2
   484e4:	003ec606 	br	48000 <__umoddi3+0x60>
   484e8:	21bf962e 	bgeu	r4,r6,48344 <__umoddi3+0x3a4>
   484ec:	10bfff84 	addi	r2,r2,-2
   484f0:	2509883a 	add	r4,r4,r20
   484f4:	003f9406 	br	48348 <__umoddi3+0x3a8>
   484f8:	293f7e2e 	bgeu	r5,r4,482f4 <__umoddi3+0x354>
   484fc:	bdffff84 	addi	r23,r23,-2
   48500:	2d0b883a 	add	r5,r5,r20
   48504:	003f7c06 	br	482f8 <__umoddi3+0x358>
   48508:	1c07883a 	add	r3,r3,r16
   4850c:	003f2a06 	br	481b8 <__umoddi3+0x218>
   48510:	9005883a 	mov	r2,r18
   48514:	a007883a 	mov	r3,r20
   48518:	003f3e06 	br	48214 <__umoddi3+0x274>
   4851c:	90bfda36 	bltu	r18,r2,48488 <__umoddi3+0x4e8>
   48520:	102d883a 	mov	r22,r2
   48524:	0007883a 	mov	r3,zero
   48528:	003fa206 	br	483b4 <__umoddi3+0x414>

0004852c <_fpadd_parts>:
   4852c:	2005883a 	mov	r2,r4
   48530:	21000017 	ldw	r4,0(r4)
   48534:	01c00044 	movi	r7,1
   48538:	3900622e 	bgeu	r7,r4,486c4 <_fpadd_parts+0x198>
   4853c:	28c00017 	ldw	r3,0(r5)
   48540:	38c05f2e 	bgeu	r7,r3,486c0 <_fpadd_parts+0x194>
   48544:	01c00104 	movi	r7,4
   48548:	21c0c626 	beq	r4,r7,48864 <_fpadd_parts+0x338>
   4854c:	19c05c26 	beq	r3,r7,486c0 <_fpadd_parts+0x194>
   48550:	01c00084 	movi	r7,2
   48554:	19c06b26 	beq	r3,r7,48704 <_fpadd_parts+0x1d8>
   48558:	21c05926 	beq	r4,r7,486c0 <_fpadd_parts+0x194>
   4855c:	11c00217 	ldw	r7,8(r2)
   48560:	2ac00217 	ldw	r11,8(r5)
   48564:	13000317 	ldw	r12,12(r2)
   48568:	13400417 	ldw	r13,16(r2)
   4856c:	3ac9c83a 	sub	r4,r7,r11
   48570:	2a000317 	ldw	r8,12(r5)
   48574:	2a400417 	ldw	r9,16(r5)
   48578:	2015883a 	mov	r10,r4
   4857c:	20007516 	blt	r4,zero,48754 <_fpadd_parts+0x228>
   48580:	00c00fc4 	movi	r3,63
   48584:	1a805016 	blt	r3,r10,486c8 <_fpadd_parts+0x19c>
   48588:	0100870e 	bge	zero,r4,487a8 <_fpadd_parts+0x27c>
   4858c:	50fff804 	addi	r3,r10,-32
   48590:	18009916 	blt	r3,zero,487f8 <_fpadd_parts+0x2cc>
   48594:	48d6d83a 	srl	r11,r9,r3
   48598:	001d883a 	mov	r14,zero
   4859c:	18009e16 	blt	r3,zero,48818 <_fpadd_parts+0x2ec>
   485a0:	01000044 	movi	r4,1
   485a4:	20c6983a 	sll	r3,r4,r3
   485a8:	0015883a 	mov	r10,zero
   485ac:	513fffc4 	addi	r4,r10,-1
   485b0:	2295403a 	cmpgeu	r10,r4,r10
   485b4:	1a87c83a 	sub	r3,r3,r10
   485b8:	1a52703a 	and	r9,r3,r9
   485bc:	2210703a 	and	r8,r4,r8
   485c0:	4250b03a 	or	r8,r8,r9
   485c4:	4010c03a 	cmpne	r8,r8,zero
   485c8:	42d0b03a 	or	r8,r8,r11
   485cc:	7013883a 	mov	r9,r14
   485d0:	11000117 	ldw	r4,4(r2)
   485d4:	28800117 	ldw	r2,4(r5)
   485d8:	20804126 	beq	r4,r2,486e0 <_fpadd_parts+0x1b4>
   485dc:	20006326 	beq	r4,zero,4876c <_fpadd_parts+0x240>
   485e0:	4305c83a 	sub	r2,r8,r12
   485e4:	4091803a 	cmpltu	r8,r8,r2
   485e8:	4b47c83a 	sub	r3,r9,r13
   485ec:	1a07c83a 	sub	r3,r3,r8
   485f0:	18006316 	blt	r3,zero,48780 <_fpadd_parts+0x254>
   485f4:	30000115 	stw	zero,4(r6)
   485f8:	31c00215 	stw	r7,8(r6)
   485fc:	30800315 	stw	r2,12(r6)
   48600:	30c00415 	stw	r3,16(r6)
   48604:	11ffffc4 	addi	r7,r2,-1
   48608:	388b403a 	cmpgeu	r5,r7,r2
   4860c:	194bc83a 	sub	r5,r3,r5
   48610:	01040034 	movhi	r4,4096
   48614:	213fffc4 	addi	r4,r4,-1
   48618:	21401736 	bltu	r4,r5,48678 <_fpadd_parts+0x14c>
   4861c:	29008226 	beq	r5,r4,48828 <_fpadd_parts+0x2fc>
   48620:	31400217 	ldw	r5,8(r6)
   48624:	02840034 	movhi	r10,4096
   48628:	52bfffc4 	addi	r10,r10,-1
   4862c:	033fff84 	movi	r12,-2
   48630:	297fffc4 	addi	r5,r5,-1
   48634:	00000106 	br	4863c <_fpadd_parts+0x110>
   48638:	3a804a26 	beq	r7,r10,48764 <_fpadd_parts+0x238>
   4863c:	1089883a 	add	r4,r2,r2
   48640:	2091803a 	cmpltu	r8,r4,r2
   48644:	18c7883a 	add	r3,r3,r3
   48648:	227fffc4 	addi	r9,r4,-1
   4864c:	40d1883a 	add	r8,r8,r3
   48650:	490f403a 	cmpgeu	r7,r9,r4
   48654:	41cfc83a 	sub	r7,r8,r7
   48658:	2817883a 	mov	r11,r5
   4865c:	2005883a 	mov	r2,r4
   48660:	4007883a 	mov	r3,r8
   48664:	297fffc4 	addi	r5,r5,-1
   48668:	51fff32e 	bgeu	r10,r7,48638 <_fpadd_parts+0x10c>
   4866c:	31000315 	stw	r4,12(r6)
   48670:	32000415 	stw	r8,16(r6)
   48674:	32c00215 	stw	r11,8(r6)
   48678:	010000c4 	movi	r4,3
   4867c:	31000015 	stw	r4,0(r6)
   48680:	01080034 	movhi	r4,8192
   48684:	213fffc4 	addi	r4,r4,-1
   48688:	20c00b2e 	bgeu	r4,r3,486b8 <_fpadd_parts+0x18c>
   4868c:	180e97fa 	slli	r7,r3,31
   48690:	1008d07a 	srli	r4,r2,1
   48694:	31400217 	ldw	r5,8(r6)
   48698:	1806d07a 	srli	r3,r3,1
   4869c:	1080004c 	andi	r2,r2,1
   486a0:	3908b03a 	or	r4,r7,r4
   486a4:	1108b03a 	or	r4,r2,r4
   486a8:	29400044 	addi	r5,r5,1
   486ac:	31000315 	stw	r4,12(r6)
   486b0:	30c00415 	stw	r3,16(r6)
   486b4:	31400215 	stw	r5,8(r6)
   486b8:	3005883a 	mov	r2,r6
   486bc:	f800283a 	ret
   486c0:	2805883a 	mov	r2,r5
   486c4:	f800283a 	ret
   486c8:	59c01e0e 	bge	r11,r7,48744 <_fpadd_parts+0x218>
   486cc:	11000117 	ldw	r4,4(r2)
   486d0:	28800117 	ldw	r2,4(r5)
   486d4:	0011883a 	mov	r8,zero
   486d8:	0013883a 	mov	r9,zero
   486dc:	20bfbf1e 	bne	r4,r2,485dc <_fpadd_parts+0xb0>
   486e0:	4305883a 	add	r2,r8,r12
   486e4:	1207803a 	cmpltu	r3,r2,r8
   486e8:	4b53883a 	add	r9,r9,r13
   486ec:	1a47883a 	add	r3,r3,r9
   486f0:	31000115 	stw	r4,4(r6)
   486f4:	31c00215 	stw	r7,8(r6)
   486f8:	30800315 	stw	r2,12(r6)
   486fc:	30c00415 	stw	r3,16(r6)
   48700:	003fdd06 	br	48678 <_fpadd_parts+0x14c>
   48704:	20ffef1e 	bne	r4,r3,486c4 <_fpadd_parts+0x198>
   48708:	31000015 	stw	r4,0(r6)
   4870c:	10c00117 	ldw	r3,4(r2)
   48710:	30c00115 	stw	r3,4(r6)
   48714:	10c00217 	ldw	r3,8(r2)
   48718:	11000117 	ldw	r4,4(r2)
   4871c:	29400117 	ldw	r5,4(r5)
   48720:	30c00215 	stw	r3,8(r6)
   48724:	10c00317 	ldw	r3,12(r2)
   48728:	2908703a 	and	r4,r5,r4
   4872c:	30c00315 	stw	r3,12(r6)
   48730:	10c00417 	ldw	r3,16(r2)
   48734:	31000115 	stw	r4,4(r6)
   48738:	3005883a 	mov	r2,r6
   4873c:	30c00415 	stw	r3,16(r6)
   48740:	f800283a 	ret
   48744:	580f883a 	mov	r7,r11
   48748:	0019883a 	mov	r12,zero
   4874c:	001b883a 	mov	r13,zero
   48750:	003f9f06 	br	485d0 <_fpadd_parts+0xa4>
   48754:	0115c83a 	sub	r10,zero,r4
   48758:	00c00fc4 	movi	r3,63
   4875c:	1abfda16 	blt	r3,r10,486c8 <_fpadd_parts+0x19c>
   48760:	003f8906 	br	48588 <_fpadd_parts+0x5c>
   48764:	627fb52e 	bgeu	r12,r9,4863c <_fpadd_parts+0x110>
   48768:	003fc006 	br	4866c <_fpadd_parts+0x140>
   4876c:	6205c83a 	sub	r2,r12,r8
   48770:	6099803a 	cmpltu	r12,r12,r2
   48774:	6a47c83a 	sub	r3,r13,r9
   48778:	1b07c83a 	sub	r3,r3,r12
   4877c:	183f9d0e 	bge	r3,zero,485f4 <_fpadd_parts+0xc8>
   48780:	0085c83a 	sub	r2,zero,r2
   48784:	1008c03a 	cmpne	r4,r2,zero
   48788:	00c7c83a 	sub	r3,zero,r3
   4878c:	1907c83a 	sub	r3,r3,r4
   48790:	01000044 	movi	r4,1
   48794:	31000115 	stw	r4,4(r6)
   48798:	31c00215 	stw	r7,8(r6)
   4879c:	30800315 	stw	r2,12(r6)
   487a0:	30c00415 	stw	r3,16(r6)
   487a4:	003f9706 	br	48604 <_fpadd_parts+0xd8>
   487a8:	203f8926 	beq	r4,zero,485d0 <_fpadd_parts+0xa4>
   487ac:	50fff804 	addi	r3,r10,-32
   487b0:	3a8f883a 	add	r7,r7,r10
   487b4:	18002316 	blt	r3,zero,48844 <_fpadd_parts+0x318>
   487b8:	68d6d83a 	srl	r11,r13,r3
   487bc:	001d883a 	mov	r14,zero
   487c0:	18001c16 	blt	r3,zero,48834 <_fpadd_parts+0x308>
   487c4:	01000044 	movi	r4,1
   487c8:	20c6983a 	sll	r3,r4,r3
   487cc:	0015883a 	mov	r10,zero
   487d0:	513fffc4 	addi	r4,r10,-1
   487d4:	2295403a 	cmpgeu	r10,r4,r10
   487d8:	1a87c83a 	sub	r3,r3,r10
   487dc:	1b5a703a 	and	r13,r3,r13
   487e0:	2318703a 	and	r12,r4,r12
   487e4:	6358b03a 	or	r12,r12,r13
   487e8:	6018c03a 	cmpne	r12,r12,zero
   487ec:	62d8b03a 	or	r12,r12,r11
   487f0:	701b883a 	mov	r13,r14
   487f4:	003f7606 	br	485d0 <_fpadd_parts+0xa4>
   487f8:	4808907a 	slli	r4,r9,1
   487fc:	02c007c4 	movi	r11,31
   48800:	5a97c83a 	sub	r11,r11,r10
   48804:	22c8983a 	sll	r4,r4,r11
   48808:	4296d83a 	srl	r11,r8,r10
   4880c:	4a9cd83a 	srl	r14,r9,r10
   48810:	22d6b03a 	or	r11,r4,r11
   48814:	003f6106 	br	4859c <_fpadd_parts+0x70>
   48818:	00c00044 	movi	r3,1
   4881c:	1a94983a 	sll	r10,r3,r10
   48820:	0007883a 	mov	r3,zero
   48824:	003f6106 	br	485ac <_fpadd_parts+0x80>
   48828:	013fff84 	movi	r4,-2
   4882c:	21ff7c2e 	bgeu	r4,r7,48620 <_fpadd_parts+0xf4>
   48830:	003f9106 	br	48678 <_fpadd_parts+0x14c>
   48834:	00c00044 	movi	r3,1
   48838:	1a94983a 	sll	r10,r3,r10
   4883c:	0007883a 	mov	r3,zero
   48840:	003fe306 	br	487d0 <_fpadd_parts+0x2a4>
   48844:	6816907a 	slli	r11,r13,1
   48848:	010007c4 	movi	r4,31
   4884c:	2289c83a 	sub	r4,r4,r10
   48850:	5908983a 	sll	r4,r11,r4
   48854:	6296d83a 	srl	r11,r12,r10
   48858:	6a9cd83a 	srl	r14,r13,r10
   4885c:	22d6b03a 	or	r11,r4,r11
   48860:	003fd706 	br	487c0 <_fpadd_parts+0x294>
   48864:	193f971e 	bne	r3,r4,486c4 <_fpadd_parts+0x198>
   48868:	11000117 	ldw	r4,4(r2)
   4886c:	28c00117 	ldw	r3,4(r5)
   48870:	20ff9426 	beq	r4,r3,486c4 <_fpadd_parts+0x198>
   48874:	00800174 	movhi	r2,5
   48878:	10b1cd04 	addi	r2,r2,-14540
   4887c:	f800283a 	ret

00048880 <__adddf3>:
   48880:	deffec04 	addi	sp,sp,-80
   48884:	d9001115 	stw	r4,68(sp)
   48888:	d9401215 	stw	r5,72(sp)
   4888c:	d9001104 	addi	r4,sp,68
   48890:	d9400a04 	addi	r5,sp,40
   48894:	dfc01315 	stw	ra,76(sp)
   48898:	d9c01015 	stw	r7,64(sp)
   4889c:	d9800f15 	stw	r6,60(sp)
   488a0:	004959c0 	call	4959c <__unpack_d>
   488a4:	d9000f04 	addi	r4,sp,60
   488a8:	d9400504 	addi	r5,sp,20
   488ac:	004959c0 	call	4959c <__unpack_d>
   488b0:	d9000a04 	addi	r4,sp,40
   488b4:	d9400504 	addi	r5,sp,20
   488b8:	d80d883a 	mov	r6,sp
   488bc:	004852c0 	call	4852c <_fpadd_parts>
   488c0:	1009883a 	mov	r4,r2
   488c4:	00493780 	call	49378 <__pack_d>
   488c8:	dfc01317 	ldw	ra,76(sp)
   488cc:	dec01404 	addi	sp,sp,80
   488d0:	f800283a 	ret

000488d4 <__subdf3>:
   488d4:	deffec04 	addi	sp,sp,-80
   488d8:	d9001115 	stw	r4,68(sp)
   488dc:	d9401215 	stw	r5,72(sp)
   488e0:	d9001104 	addi	r4,sp,68
   488e4:	d9400a04 	addi	r5,sp,40
   488e8:	dfc01315 	stw	ra,76(sp)
   488ec:	d9c01015 	stw	r7,64(sp)
   488f0:	d9800f15 	stw	r6,60(sp)
   488f4:	004959c0 	call	4959c <__unpack_d>
   488f8:	d9000f04 	addi	r4,sp,60
   488fc:	d9400504 	addi	r5,sp,20
   48900:	004959c0 	call	4959c <__unpack_d>
   48904:	d8800617 	ldw	r2,24(sp)
   48908:	d9000a04 	addi	r4,sp,40
   4890c:	d9400504 	addi	r5,sp,20
   48910:	d80d883a 	mov	r6,sp
   48914:	1080005c 	xori	r2,r2,1
   48918:	d8800615 	stw	r2,24(sp)
   4891c:	004852c0 	call	4852c <_fpadd_parts>
   48920:	1009883a 	mov	r4,r2
   48924:	00493780 	call	49378 <__pack_d>
   48928:	dfc01317 	ldw	ra,76(sp)
   4892c:	dec01404 	addi	sp,sp,80
   48930:	f800283a 	ret

00048934 <__muldf3>:
   48934:	deffe404 	addi	sp,sp,-112
   48938:	d9001115 	stw	r4,68(sp)
   4893c:	d9401215 	stw	r5,72(sp)
   48940:	d9001104 	addi	r4,sp,68
   48944:	d9400a04 	addi	r5,sp,40
   48948:	dfc01b15 	stw	ra,108(sp)
   4894c:	d9800f15 	stw	r6,60(sp)
   48950:	d9c01015 	stw	r7,64(sp)
   48954:	ddc01a15 	stw	r23,104(sp)
   48958:	dd801915 	stw	r22,100(sp)
   4895c:	dd401815 	stw	r21,96(sp)
   48960:	dd001715 	stw	r20,92(sp)
   48964:	dcc01615 	stw	r19,88(sp)
   48968:	dc801515 	stw	r18,84(sp)
   4896c:	dc401415 	stw	r17,80(sp)
   48970:	dc001315 	stw	r16,76(sp)
   48974:	004959c0 	call	4959c <__unpack_d>
   48978:	d9000f04 	addi	r4,sp,60
   4897c:	d9400504 	addi	r5,sp,20
   48980:	004959c0 	call	4959c <__unpack_d>
   48984:	d8c00a17 	ldw	r3,40(sp)
   48988:	00800044 	movi	r2,1
   4898c:	10c01136 	bltu	r2,r3,489d4 <__muldf3+0xa0>
   48990:	d8c00b17 	ldw	r3,44(sp)
   48994:	d8800617 	ldw	r2,24(sp)
   48998:	d9000a04 	addi	r4,sp,40
   4899c:	1884c03a 	cmpne	r2,r3,r2
   489a0:	d8800b15 	stw	r2,44(sp)
   489a4:	00493780 	call	49378 <__pack_d>
   489a8:	dfc01b17 	ldw	ra,108(sp)
   489ac:	ddc01a17 	ldw	r23,104(sp)
   489b0:	dd801917 	ldw	r22,100(sp)
   489b4:	dd401817 	ldw	r21,96(sp)
   489b8:	dd001717 	ldw	r20,92(sp)
   489bc:	dcc01617 	ldw	r19,88(sp)
   489c0:	dc801517 	ldw	r18,84(sp)
   489c4:	dc401417 	ldw	r17,80(sp)
   489c8:	dc001317 	ldw	r16,76(sp)
   489cc:	dec01c04 	addi	sp,sp,112
   489d0:	f800283a 	ret
   489d4:	d9000517 	ldw	r4,20(sp)
   489d8:	11000636 	bltu	r2,r4,489f4 <__muldf3+0xc0>
   489dc:	d8800617 	ldw	r2,24(sp)
   489e0:	d8c00b17 	ldw	r3,44(sp)
   489e4:	d9000504 	addi	r4,sp,20
   489e8:	1884c03a 	cmpne	r2,r3,r2
   489ec:	d8800615 	stw	r2,24(sp)
   489f0:	003fec06 	br	489a4 <__muldf3+0x70>
   489f4:	00800104 	movi	r2,4
   489f8:	1880051e 	bne	r3,r2,48a10 <__muldf3+0xdc>
   489fc:	00800084 	movi	r2,2
   48a00:	20bfe31e 	bne	r4,r2,48990 <__muldf3+0x5c>
   48a04:	01000174 	movhi	r4,5
   48a08:	2131cd04 	addi	r4,r4,-14540
   48a0c:	003fe506 	br	489a4 <__muldf3+0x70>
   48a10:	2080031e 	bne	r4,r2,48a20 <__muldf3+0xec>
   48a14:	00800084 	movi	r2,2
   48a18:	18bffa26 	beq	r3,r2,48a04 <__muldf3+0xd0>
   48a1c:	003fef06 	br	489dc <__muldf3+0xa8>
   48a20:	00800084 	movi	r2,2
   48a24:	18bfda26 	beq	r3,r2,48990 <__muldf3+0x5c>
   48a28:	20bfec26 	beq	r4,r2,489dc <__muldf3+0xa8>
   48a2c:	dc000d17 	ldw	r16,52(sp)
   48a30:	dd000817 	ldw	r20,32(sp)
   48a34:	dc800917 	ldw	r18,36(sp)
   48a38:	8009883a 	mov	r4,r16
   48a3c:	000b883a 	mov	r5,zero
   48a40:	a00d883a 	mov	r6,r20
   48a44:	000f883a 	mov	r7,zero
   48a48:	004926c0 	call	4926c <__muldi3>
   48a4c:	dc400e17 	ldw	r17,56(sp)
   48a50:	9009883a 	mov	r4,r18
   48a54:	800d883a 	mov	r6,r16
   48a58:	000b883a 	mov	r5,zero
   48a5c:	000f883a 	mov	r7,zero
   48a60:	102f883a 	mov	r23,r2
   48a64:	1827883a 	mov	r19,r3
   48a68:	004926c0 	call	4926c <__muldi3>
   48a6c:	900d883a 	mov	r6,r18
   48a70:	8809883a 	mov	r4,r17
   48a74:	000b883a 	mov	r5,zero
   48a78:	000f883a 	mov	r7,zero
   48a7c:	102b883a 	mov	r21,r2
   48a80:	1821883a 	mov	r16,r3
   48a84:	004926c0 	call	4926c <__muldi3>
   48a88:	8809883a 	mov	r4,r17
   48a8c:	000b883a 	mov	r5,zero
   48a90:	a00d883a 	mov	r6,r20
   48a94:	000f883a 	mov	r7,zero
   48a98:	102d883a 	mov	r22,r2
   48a9c:	1825883a 	mov	r18,r3
   48aa0:	004926c0 	call	4926c <__muldi3>
   48aa4:	154b883a 	add	r5,r2,r21
   48aa8:	2889803a 	cmpltu	r4,r5,r2
   48aac:	1c07883a 	add	r3,r3,r16
   48ab0:	20c9883a 	add	r4,r4,r3
   48ab4:	24004b36 	bltu	r4,r16,48be4 <__muldf3+0x2b0>
   48ab8:	8100011e 	bne	r16,r4,48ac0 <__muldf3+0x18c>
   48abc:	2d404936 	bltu	r5,r21,48be4 <__muldf3+0x2b0>
   48ac0:	0011883a 	mov	r8,zero
   48ac4:	0007883a 	mov	r3,zero
   48ac8:	2ccb883a 	add	r5,r5,r19
   48acc:	b80d883a 	mov	r6,r23
   48ad0:	2cc0012e 	bgeu	r5,r19,48ad8 <__muldf3+0x1a4>
   48ad4:	02000044 	movi	r8,1
   48ad8:	258f883a 	add	r7,r4,r22
   48adc:	3909803a 	cmpltu	r4,r7,r4
   48ae0:	da400c17 	ldw	r9,48(sp)
   48ae4:	2489883a 	add	r4,r4,r18
   48ae8:	d8800717 	ldw	r2,28(sp)
   48aec:	20c9883a 	add	r4,r4,r3
   48af0:	da800b17 	ldw	r10,44(sp)
   48af4:	d8c00617 	ldw	r3,24(sp)
   48af8:	3a11883a 	add	r8,r7,r8
   48afc:	4885883a 	add	r2,r9,r2
   48b00:	50c6c03a 	cmpne	r3,r10,r3
   48b04:	41cf803a 	cmpltu	r7,r8,r7
   48b08:	12400104 	addi	r9,r2,4
   48b0c:	d8c00115 	stw	r3,4(sp)
   48b10:	3909883a 	add	r4,r7,r4
   48b14:	da400215 	stw	r9,8(sp)
   48b18:	03480034 	movhi	r13,8192
   48b1c:	6b7fffc4 	addi	r13,r13,-1
   48b20:	4007883a 	mov	r3,r8
   48b24:	6900102e 	bgeu	r13,r4,48b68 <__muldf3+0x234>
   48b28:	10800144 	addi	r2,r2,5
   48b2c:	180ed07a 	srli	r7,r3,1
   48b30:	18c0004c 	andi	r3,r3,1
   48b34:	201097fa 	slli	r8,r4,31
   48b38:	281697fa 	slli	r11,r5,31
   48b3c:	2008d07a 	srli	r4,r4,1
   48b40:	3014d07a 	srli	r10,r6,1
   48b44:	2812d07a 	srli	r9,r5,1
   48b48:	1019883a 	mov	r12,r2
   48b4c:	18000226 	beq	r3,zero,48b58 <__muldf3+0x224>
   48b50:	5a8cb03a 	or	r6,r11,r10
   48b54:	49600034 	orhi	r5,r9,32768
   48b58:	41c6b03a 	or	r3,r8,r7
   48b5c:	10800044 	addi	r2,r2,1
   48b60:	693ff236 	bltu	r13,r4,48b2c <__muldf3+0x1f8>
   48b64:	db000215 	stw	r12,8(sp)
   48b68:	03440034 	movhi	r13,4096
   48b6c:	6b7fffc4 	addi	r13,r13,-1
   48b70:	69001336 	bltu	r13,r4,48bc0 <__muldf3+0x28c>
   48b74:	d8800217 	ldw	r2,8(sp)
   48b78:	10bfffc4 	addi	r2,r2,-1
   48b7c:	18d3883a 	add	r9,r3,r3
   48b80:	48c7803a 	cmpltu	r3,r9,r3
   48b84:	2109883a 	add	r4,r4,r4
   48b88:	190f883a 	add	r7,r3,r4
   48b8c:	3191883a 	add	r8,r6,r6
   48b90:	4197803a 	cmpltu	r11,r8,r6
   48b94:	2955883a 	add	r10,r5,r5
   48b98:	1019883a 	mov	r12,r2
   48b9c:	4807883a 	mov	r3,r9
   48ba0:	3809883a 	mov	r4,r7
   48ba4:	2800010e 	bge	r5,zero,48bac <__muldf3+0x278>
   48ba8:	48c00054 	ori	r3,r9,1
   48bac:	400d883a 	mov	r6,r8
   48bb0:	5a8b883a 	add	r5,r11,r10
   48bb4:	10bfffc4 	addi	r2,r2,-1
   48bb8:	69fff02e 	bgeu	r13,r7,48b7c <__muldf3+0x248>
   48bbc:	db000215 	stw	r12,8(sp)
   48bc0:	18803fcc 	andi	r2,r3,255
   48bc4:	01c02004 	movi	r7,128
   48bc8:	11c00926 	beq	r2,r7,48bf0 <__muldf3+0x2bc>
   48bcc:	008000c4 	movi	r2,3
   48bd0:	d9000415 	stw	r4,16(sp)
   48bd4:	d8c00315 	stw	r3,12(sp)
   48bd8:	d8800015 	stw	r2,0(sp)
   48bdc:	d809883a 	mov	r4,sp
   48be0:	003f7006 	br	489a4 <__muldf3+0x70>
   48be4:	0011883a 	mov	r8,zero
   48be8:	00c00044 	movi	r3,1
   48bec:	003fb606 	br	48ac8 <__muldf3+0x194>
   48bf0:	19c0400c 	andi	r7,r3,256
   48bf4:	383ff51e 	bne	r7,zero,48bcc <__muldf3+0x298>
   48bf8:	314ab03a 	or	r5,r6,r5
   48bfc:	283ff326 	beq	r5,zero,48bcc <__muldf3+0x298>
   48c00:	1885883a 	add	r2,r3,r2
   48c04:	10cb803a 	cmpltu	r5,r2,r3
   48c08:	00ffc004 	movi	r3,-256
   48c0c:	10c6703a 	and	r3,r2,r3
   48c10:	2909883a 	add	r4,r5,r4
   48c14:	003fed06 	br	48bcc <__muldf3+0x298>

00048c18 <__divdf3>:
   48c18:	defff104 	addi	sp,sp,-60
   48c1c:	d9000c15 	stw	r4,48(sp)
   48c20:	d9400d15 	stw	r5,52(sp)
   48c24:	d9000c04 	addi	r4,sp,48
   48c28:	d9400504 	addi	r5,sp,20
   48c2c:	dfc00e15 	stw	ra,56(sp)
   48c30:	d9800a15 	stw	r6,40(sp)
   48c34:	d9c00b15 	stw	r7,44(sp)
   48c38:	004959c0 	call	4959c <__unpack_d>
   48c3c:	d9000a04 	addi	r4,sp,40
   48c40:	d80b883a 	mov	r5,sp
   48c44:	004959c0 	call	4959c <__unpack_d>
   48c48:	d8c00517 	ldw	r3,20(sp)
   48c4c:	00800044 	movi	r2,1
   48c50:	10c00536 	bltu	r2,r3,48c68 <__divdf3+0x50>
   48c54:	d9000504 	addi	r4,sp,20
   48c58:	00493780 	call	49378 <__pack_d>
   48c5c:	dfc00e17 	ldw	ra,56(sp)
   48c60:	dec00f04 	addi	sp,sp,60
   48c64:	f800283a 	ret
   48c68:	d9000017 	ldw	r4,0(sp)
   48c6c:	11000536 	bltu	r2,r4,48c84 <__divdf3+0x6c>
   48c70:	d809883a 	mov	r4,sp
   48c74:	00493780 	call	49378 <__pack_d>
   48c78:	dfc00e17 	ldw	ra,56(sp)
   48c7c:	dec00f04 	addi	sp,sp,60
   48c80:	f800283a 	ret
   48c84:	d9800617 	ldw	r6,24(sp)
   48c88:	d9400117 	ldw	r5,4(sp)
   48c8c:	00800104 	movi	r2,4
   48c90:	314af03a 	xor	r5,r6,r5
   48c94:	d9400615 	stw	r5,24(sp)
   48c98:	18800226 	beq	r3,r2,48ca4 <__divdf3+0x8c>
   48c9c:	01400084 	movi	r5,2
   48ca0:	1940041e 	bne	r3,r5,48cb4 <__divdf3+0x9c>
   48ca4:	193feb1e 	bne	r3,r4,48c54 <__divdf3+0x3c>
   48ca8:	01000174 	movhi	r4,5
   48cac:	2131cd04 	addi	r4,r4,-14540
   48cb0:	003fe906 	br	48c58 <__divdf3+0x40>
   48cb4:	20803326 	beq	r4,r2,48d84 <__divdf3+0x16c>
   48cb8:	21403726 	beq	r4,r5,48d98 <__divdf3+0x180>
   48cbc:	d8800217 	ldw	r2,8(sp)
   48cc0:	d9000717 	ldw	r4,28(sp)
   48cc4:	d8c00917 	ldw	r3,36(sp)
   48cc8:	da000417 	ldw	r8,16(sp)
   48ccc:	2089c83a 	sub	r4,r4,r2
   48cd0:	d9000715 	stw	r4,28(sp)
   48cd4:	d8800817 	ldw	r2,32(sp)
   48cd8:	dbc00317 	ldw	r15,12(sp)
   48cdc:	1a000236 	bltu	r3,r8,48ce8 <__divdf3+0xd0>
   48ce0:	40c0081e 	bne	r8,r3,48d04 <__divdf3+0xec>
   48ce4:	13c0072e 	bgeu	r2,r15,48d04 <__divdf3+0xec>
   48ce8:	108b883a 	add	r5,r2,r2
   48cec:	288d803a 	cmpltu	r6,r5,r2
   48cf0:	18c7883a 	add	r3,r3,r3
   48cf4:	213fffc4 	addi	r4,r4,-1
   48cf8:	2805883a 	mov	r2,r5
   48cfc:	30c7883a 	add	r3,r6,r3
   48d00:	d9000715 	stw	r4,28(sp)
   48d04:	01400f44 	movi	r5,61
   48d08:	000f883a 	mov	r7,zero
   48d0c:	01040034 	movhi	r4,4096
   48d10:	0019883a 	mov	r12,zero
   48d14:	001b883a 	mov	r13,zero
   48d18:	201697fa 	slli	r11,r4,31
   48d1c:	3814d07a 	srli	r10,r7,1
   48d20:	297fffc4 	addi	r5,r5,-1
   48d24:	1a000936 	bltu	r3,r8,48d4c <__divdf3+0x134>
   48d28:	13cdc83a 	sub	r6,r2,r15
   48d2c:	1193803a 	cmpltu	r9,r2,r6
   48d30:	1a1dc83a 	sub	r14,r3,r8
   48d34:	40c0011e 	bne	r8,r3,48d3c <__divdf3+0x124>
   48d38:	13c00436 	bltu	r2,r15,48d4c <__divdf3+0x134>
   48d3c:	3005883a 	mov	r2,r6
   48d40:	7247c83a 	sub	r3,r14,r9
   48d44:	61d8b03a 	or	r12,r12,r7
   48d48:	691ab03a 	or	r13,r13,r4
   48d4c:	108d883a 	add	r6,r2,r2
   48d50:	3093803a 	cmpltu	r9,r6,r2
   48d54:	18c7883a 	add	r3,r3,r3
   48d58:	5a8eb03a 	or	r7,r11,r10
   48d5c:	2008d07a 	srli	r4,r4,1
   48d60:	3005883a 	mov	r2,r6
   48d64:	48c7883a 	add	r3,r9,r3
   48d68:	283feb1e 	bne	r5,zero,48d18 <__divdf3+0x100>
   48d6c:	61003fcc 	andi	r4,r12,255
   48d70:	01402004 	movi	r5,128
   48d74:	21400b26 	beq	r4,r5,48da4 <__divdf3+0x18c>
   48d78:	db000815 	stw	r12,32(sp)
   48d7c:	db400915 	stw	r13,36(sp)
   48d80:	003fb406 	br	48c54 <__divdf3+0x3c>
   48d84:	d8000815 	stw	zero,32(sp)
   48d88:	d8000915 	stw	zero,36(sp)
   48d8c:	d8000715 	stw	zero,28(sp)
   48d90:	d9000504 	addi	r4,sp,20
   48d94:	003fb006 	br	48c58 <__divdf3+0x40>
   48d98:	d8800515 	stw	r2,20(sp)
   48d9c:	d9000504 	addi	r4,sp,20
   48da0:	003fad06 	br	48c58 <__divdf3+0x40>
   48da4:	6140400c 	andi	r5,r12,256
   48da8:	283ff31e 	bne	r5,zero,48d78 <__divdf3+0x160>
   48dac:	30c4b03a 	or	r2,r6,r3
   48db0:	103ff126 	beq	r2,zero,48d78 <__divdf3+0x160>
   48db4:	6109883a 	add	r4,r12,r4
   48db8:	2305803a 	cmpltu	r2,r4,r12
   48dbc:	033fc004 	movi	r12,-256
   48dc0:	2318703a 	and	r12,r4,r12
   48dc4:	135b883a 	add	r13,r2,r13
   48dc8:	003feb06 	br	48d78 <__divdf3+0x160>

00048dcc <__eqdf2>:
   48dcc:	defff104 	addi	sp,sp,-60
   48dd0:	d9000c15 	stw	r4,48(sp)
   48dd4:	d9400d15 	stw	r5,52(sp)
   48dd8:	d9000c04 	addi	r4,sp,48
   48ddc:	d9400504 	addi	r5,sp,20
   48de0:	dfc00e15 	stw	ra,56(sp)
   48de4:	d9800a15 	stw	r6,40(sp)
   48de8:	d9c00b15 	stw	r7,44(sp)
   48dec:	004959c0 	call	4959c <__unpack_d>
   48df0:	d9000a04 	addi	r4,sp,40
   48df4:	d80b883a 	mov	r5,sp
   48df8:	004959c0 	call	4959c <__unpack_d>
   48dfc:	d8c00517 	ldw	r3,20(sp)
   48e00:	00800044 	movi	r2,1
   48e04:	10c0052e 	bgeu	r2,r3,48e1c <__eqdf2+0x50>
   48e08:	d8c00017 	ldw	r3,0(sp)
   48e0c:	10c0032e 	bgeu	r2,r3,48e1c <__eqdf2+0x50>
   48e10:	d9000504 	addi	r4,sp,20
   48e14:	d80b883a 	mov	r5,sp
   48e18:	00496a00 	call	496a0 <__fpcmp_parts_d>
   48e1c:	dfc00e17 	ldw	ra,56(sp)
   48e20:	dec00f04 	addi	sp,sp,60
   48e24:	f800283a 	ret

00048e28 <__nedf2>:
   48e28:	defff104 	addi	sp,sp,-60
   48e2c:	d9000c15 	stw	r4,48(sp)
   48e30:	d9400d15 	stw	r5,52(sp)
   48e34:	d9000c04 	addi	r4,sp,48
   48e38:	d9400504 	addi	r5,sp,20
   48e3c:	dfc00e15 	stw	ra,56(sp)
   48e40:	d9800a15 	stw	r6,40(sp)
   48e44:	d9c00b15 	stw	r7,44(sp)
   48e48:	004959c0 	call	4959c <__unpack_d>
   48e4c:	d9000a04 	addi	r4,sp,40
   48e50:	d80b883a 	mov	r5,sp
   48e54:	004959c0 	call	4959c <__unpack_d>
   48e58:	d8c00517 	ldw	r3,20(sp)
   48e5c:	00800044 	movi	r2,1
   48e60:	10c0052e 	bgeu	r2,r3,48e78 <__nedf2+0x50>
   48e64:	d8c00017 	ldw	r3,0(sp)
   48e68:	10c0032e 	bgeu	r2,r3,48e78 <__nedf2+0x50>
   48e6c:	d9000504 	addi	r4,sp,20
   48e70:	d80b883a 	mov	r5,sp
   48e74:	00496a00 	call	496a0 <__fpcmp_parts_d>
   48e78:	dfc00e17 	ldw	ra,56(sp)
   48e7c:	dec00f04 	addi	sp,sp,60
   48e80:	f800283a 	ret

00048e84 <__gtdf2>:
   48e84:	defff104 	addi	sp,sp,-60
   48e88:	d9000c15 	stw	r4,48(sp)
   48e8c:	d9400d15 	stw	r5,52(sp)
   48e90:	d9000c04 	addi	r4,sp,48
   48e94:	d9400504 	addi	r5,sp,20
   48e98:	dfc00e15 	stw	ra,56(sp)
   48e9c:	d9800a15 	stw	r6,40(sp)
   48ea0:	d9c00b15 	stw	r7,44(sp)
   48ea4:	004959c0 	call	4959c <__unpack_d>
   48ea8:	d9000a04 	addi	r4,sp,40
   48eac:	d80b883a 	mov	r5,sp
   48eb0:	004959c0 	call	4959c <__unpack_d>
   48eb4:	d8c00517 	ldw	r3,20(sp)
   48eb8:	00800044 	movi	r2,1
   48ebc:	10c0082e 	bgeu	r2,r3,48ee0 <__gtdf2+0x5c>
   48ec0:	d8c00017 	ldw	r3,0(sp)
   48ec4:	10c0062e 	bgeu	r2,r3,48ee0 <__gtdf2+0x5c>
   48ec8:	d9000504 	addi	r4,sp,20
   48ecc:	d80b883a 	mov	r5,sp
   48ed0:	00496a00 	call	496a0 <__fpcmp_parts_d>
   48ed4:	dfc00e17 	ldw	ra,56(sp)
   48ed8:	dec00f04 	addi	sp,sp,60
   48edc:	f800283a 	ret
   48ee0:	00bfffc4 	movi	r2,-1
   48ee4:	003ffb06 	br	48ed4 <__gtdf2+0x50>

00048ee8 <__gedf2>:
   48ee8:	defff104 	addi	sp,sp,-60
   48eec:	d9000c15 	stw	r4,48(sp)
   48ef0:	d9400d15 	stw	r5,52(sp)
   48ef4:	d9000c04 	addi	r4,sp,48
   48ef8:	d9400504 	addi	r5,sp,20
   48efc:	dfc00e15 	stw	ra,56(sp)
   48f00:	d9800a15 	stw	r6,40(sp)
   48f04:	d9c00b15 	stw	r7,44(sp)
   48f08:	004959c0 	call	4959c <__unpack_d>
   48f0c:	d9000a04 	addi	r4,sp,40
   48f10:	d80b883a 	mov	r5,sp
   48f14:	004959c0 	call	4959c <__unpack_d>
   48f18:	d8c00517 	ldw	r3,20(sp)
   48f1c:	00800044 	movi	r2,1
   48f20:	10c0082e 	bgeu	r2,r3,48f44 <__gedf2+0x5c>
   48f24:	d8c00017 	ldw	r3,0(sp)
   48f28:	10c0062e 	bgeu	r2,r3,48f44 <__gedf2+0x5c>
   48f2c:	d9000504 	addi	r4,sp,20
   48f30:	d80b883a 	mov	r5,sp
   48f34:	00496a00 	call	496a0 <__fpcmp_parts_d>
   48f38:	dfc00e17 	ldw	ra,56(sp)
   48f3c:	dec00f04 	addi	sp,sp,60
   48f40:	f800283a 	ret
   48f44:	00bfffc4 	movi	r2,-1
   48f48:	003ffb06 	br	48f38 <__gedf2+0x50>

00048f4c <__ltdf2>:
   48f4c:	defff104 	addi	sp,sp,-60
   48f50:	d9000c15 	stw	r4,48(sp)
   48f54:	d9400d15 	stw	r5,52(sp)
   48f58:	d9000c04 	addi	r4,sp,48
   48f5c:	d9400504 	addi	r5,sp,20
   48f60:	dfc00e15 	stw	ra,56(sp)
   48f64:	d9800a15 	stw	r6,40(sp)
   48f68:	d9c00b15 	stw	r7,44(sp)
   48f6c:	004959c0 	call	4959c <__unpack_d>
   48f70:	d9000a04 	addi	r4,sp,40
   48f74:	d80b883a 	mov	r5,sp
   48f78:	004959c0 	call	4959c <__unpack_d>
   48f7c:	d8c00517 	ldw	r3,20(sp)
   48f80:	00800044 	movi	r2,1
   48f84:	10c0052e 	bgeu	r2,r3,48f9c <__ltdf2+0x50>
   48f88:	d8c00017 	ldw	r3,0(sp)
   48f8c:	10c0032e 	bgeu	r2,r3,48f9c <__ltdf2+0x50>
   48f90:	d9000504 	addi	r4,sp,20
   48f94:	d80b883a 	mov	r5,sp
   48f98:	00496a00 	call	496a0 <__fpcmp_parts_d>
   48f9c:	dfc00e17 	ldw	ra,56(sp)
   48fa0:	dec00f04 	addi	sp,sp,60
   48fa4:	f800283a 	ret

00048fa8 <__floatsidf>:
   48fa8:	2004d7fa 	srli	r2,r4,31
   48fac:	defff904 	addi	sp,sp,-28
   48fb0:	00c000c4 	movi	r3,3
   48fb4:	dfc00615 	stw	ra,24(sp)
   48fb8:	dc000515 	stw	r16,20(sp)
   48fbc:	d8c00015 	stw	r3,0(sp)
   48fc0:	d8800115 	stw	r2,4(sp)
   48fc4:	2000081e 	bne	r4,zero,48fe8 <__floatsidf+0x40>
   48fc8:	00800084 	movi	r2,2
   48fcc:	d8800015 	stw	r2,0(sp)
   48fd0:	d809883a 	mov	r4,sp
   48fd4:	00493780 	call	49378 <__pack_d>
   48fd8:	dfc00617 	ldw	ra,24(sp)
   48fdc:	dc000517 	ldw	r16,20(sp)
   48fe0:	dec00704 	addi	sp,sp,28
   48fe4:	f800283a 	ret
   48fe8:	00c00f04 	movi	r3,60
   48fec:	d8c00215 	stw	r3,8(sp)
   48ff0:	10000f1e 	bne	r2,zero,49030 <__floatsidf+0x88>
   48ff4:	2021883a 	mov	r16,r4
   48ff8:	8009883a 	mov	r4,r16
   48ffc:	00492cc0 	call	492cc <__clzsi2>
   49000:	11000744 	addi	r4,r2,29
   49004:	0100110e 	bge	zero,r4,4904c <__floatsidf+0xa4>
   49008:	10ffff44 	addi	r3,r2,-3
   4900c:	18001216 	blt	r3,zero,49058 <__floatsidf+0xb0>
   49010:	80c6983a 	sll	r3,r16,r3
   49014:	0009883a 	mov	r4,zero
   49018:	014007c4 	movi	r5,31
   4901c:	2885c83a 	sub	r2,r5,r2
   49020:	d9000315 	stw	r4,12(sp)
   49024:	d8c00415 	stw	r3,16(sp)
   49028:	d8800215 	stw	r2,8(sp)
   4902c:	003fe806 	br	48fd0 <__floatsidf+0x28>
   49030:	00a00034 	movhi	r2,32768
   49034:	20800e26 	beq	r4,r2,49070 <__floatsidf+0xc8>
   49038:	0121c83a 	sub	r16,zero,r4
   4903c:	8009883a 	mov	r4,r16
   49040:	00492cc0 	call	492cc <__clzsi2>
   49044:	11000744 	addi	r4,r2,29
   49048:	013fef16 	blt	zero,r4,49008 <__floatsidf+0x60>
   4904c:	dc000315 	stw	r16,12(sp)
   49050:	d8000415 	stw	zero,16(sp)
   49054:	003fde06 	br	48fd0 <__floatsidf+0x28>
   49058:	800ad07a 	srli	r5,r16,1
   4905c:	00c007c4 	movi	r3,31
   49060:	1907c83a 	sub	r3,r3,r4
   49064:	28c6d83a 	srl	r3,r5,r3
   49068:	8108983a 	sll	r4,r16,r4
   4906c:	003fea06 	br	49018 <__floatsidf+0x70>
   49070:	0005883a 	mov	r2,zero
   49074:	00f07834 	movhi	r3,49632
   49078:	003fd706 	br	48fd8 <__floatsidf+0x30>

0004907c <__fixdfsi>:
   4907c:	defff804 	addi	sp,sp,-32
   49080:	d9000515 	stw	r4,20(sp)
   49084:	d9400615 	stw	r5,24(sp)
   49088:	d9000504 	addi	r4,sp,20
   4908c:	d80b883a 	mov	r5,sp
   49090:	dfc00715 	stw	ra,28(sp)
   49094:	004959c0 	call	4959c <__unpack_d>
   49098:	d8800017 	ldw	r2,0(sp)
   4909c:	00c00084 	movi	r3,2
   490a0:	10c01c26 	beq	r2,r3,49114 <__fixdfsi+0x98>
   490a4:	00c00044 	movi	r3,1
   490a8:	18801a2e 	bgeu	r3,r2,49114 <__fixdfsi+0x98>
   490ac:	00c00104 	movi	r3,4
   490b0:	10c01126 	beq	r2,r3,490f8 <__fixdfsi+0x7c>
   490b4:	d8800217 	ldw	r2,8(sp)
   490b8:	10001616 	blt	r2,zero,49114 <__fixdfsi+0x98>
   490bc:	00c00784 	movi	r3,30
   490c0:	18800d16 	blt	r3,r2,490f8 <__fixdfsi+0x7c>
   490c4:	00c00f04 	movi	r3,60
   490c8:	1885c83a 	sub	r2,r3,r2
   490cc:	10fff804 	addi	r3,r2,-32
   490d0:	d9400317 	ldw	r5,12(sp)
   490d4:	d9000417 	ldw	r4,16(sp)
   490d8:	18001616 	blt	r3,zero,49134 <__fixdfsi+0xb8>
   490dc:	20c4d83a 	srl	r2,r4,r3
   490e0:	d8c00117 	ldw	r3,4(sp)
   490e4:	18000126 	beq	r3,zero,490ec <__fixdfsi+0x70>
   490e8:	0085c83a 	sub	r2,zero,r2
   490ec:	dfc00717 	ldw	ra,28(sp)
   490f0:	dec00804 	addi	sp,sp,32
   490f4:	f800283a 	ret
   490f8:	d8800117 	ldw	r2,4(sp)
   490fc:	1000091e 	bne	r2,zero,49124 <__fixdfsi+0xa8>
   49100:	00a00034 	movhi	r2,32768
   49104:	10bfffc4 	addi	r2,r2,-1
   49108:	dfc00717 	ldw	ra,28(sp)
   4910c:	dec00804 	addi	sp,sp,32
   49110:	f800283a 	ret
   49114:	0005883a 	mov	r2,zero
   49118:	dfc00717 	ldw	ra,28(sp)
   4911c:	dec00804 	addi	sp,sp,32
   49120:	f800283a 	ret
   49124:	00a00034 	movhi	r2,32768
   49128:	dfc00717 	ldw	ra,28(sp)
   4912c:	dec00804 	addi	sp,sp,32
   49130:	f800283a 	ret
   49134:	2008907a 	slli	r4,r4,1
   49138:	018007c4 	movi	r6,31
   4913c:	308dc83a 	sub	r6,r6,r2
   49140:	2188983a 	sll	r4,r4,r6
   49144:	2884d83a 	srl	r2,r5,r2
   49148:	2084b03a 	or	r2,r4,r2
   4914c:	003fe406 	br	490e0 <__fixdfsi+0x64>

00049150 <__floatunsidf>:
   49150:	defff904 	addi	sp,sp,-28
   49154:	dc000515 	stw	r16,20(sp)
   49158:	dfc00615 	stw	ra,24(sp)
   4915c:	d8000115 	stw	zero,4(sp)
   49160:	2021883a 	mov	r16,r4
   49164:	20001726 	beq	r4,zero,491c4 <__floatunsidf+0x74>
   49168:	008000c4 	movi	r2,3
   4916c:	d8800015 	stw	r2,0(sp)
   49170:	00800f04 	movi	r2,60
   49174:	d8800215 	stw	r2,8(sp)
   49178:	00492cc0 	call	492cc <__clzsi2>
   4917c:	10c00744 	addi	r3,r2,29
   49180:	18001816 	blt	r3,zero,491e4 <__floatunsidf+0x94>
   49184:	18002d26 	beq	r3,zero,4923c <__floatunsidf+0xec>
   49188:	113fff44 	addi	r4,r2,-3
   4918c:	20002e16 	blt	r4,zero,49248 <__floatunsidf+0xf8>
   49190:	8108983a 	sll	r4,r16,r4
   49194:	0021883a 	mov	r16,zero
   49198:	014007c4 	movi	r5,31
   4919c:	2885c83a 	sub	r2,r5,r2
   491a0:	dc000315 	stw	r16,12(sp)
   491a4:	d9000415 	stw	r4,16(sp)
   491a8:	d8800215 	stw	r2,8(sp)
   491ac:	d809883a 	mov	r4,sp
   491b0:	00493780 	call	49378 <__pack_d>
   491b4:	dfc00617 	ldw	ra,24(sp)
   491b8:	dc000517 	ldw	r16,20(sp)
   491bc:	dec00704 	addi	sp,sp,28
   491c0:	f800283a 	ret
   491c4:	00800084 	movi	r2,2
   491c8:	d809883a 	mov	r4,sp
   491cc:	d8800015 	stw	r2,0(sp)
   491d0:	00493780 	call	49378 <__pack_d>
   491d4:	dfc00617 	ldw	ra,24(sp)
   491d8:	dc000517 	ldw	r16,20(sp)
   491dc:	dec00704 	addi	sp,sp,28
   491e0:	f800283a 	ret
   491e4:	00c7c83a 	sub	r3,zero,r3
   491e8:	193ff804 	addi	r4,r3,-32
   491ec:	20001c16 	blt	r4,zero,49260 <__floatunsidf+0x110>
   491f0:	000b883a 	mov	r5,zero
   491f4:	2009d7fa 	srai	r4,r4,31
   491f8:	80c6d83a 	srl	r3,r16,r3
   491fc:	297fffc4 	addi	r5,r5,-1
   49200:	2c20703a 	and	r16,r5,r16
   49204:	8020c03a 	cmpne	r16,r16,zero
   49208:	1906703a 	and	r3,r3,r4
   4920c:	010007c4 	movi	r4,31
   49210:	80c6b03a 	or	r3,r16,r3
   49214:	2085c83a 	sub	r2,r4,r2
   49218:	d809883a 	mov	r4,sp
   4921c:	d8c00315 	stw	r3,12(sp)
   49220:	d8000415 	stw	zero,16(sp)
   49224:	d8800215 	stw	r2,8(sp)
   49228:	00493780 	call	49378 <__pack_d>
   4922c:	dfc00617 	ldw	ra,24(sp)
   49230:	dc000517 	ldw	r16,20(sp)
   49234:	dec00704 	addi	sp,sp,28
   49238:	f800283a 	ret
   4923c:	dc000315 	stw	r16,12(sp)
   49240:	d8000415 	stw	zero,16(sp)
   49244:	003fd906 	br	491ac <__floatunsidf+0x5c>
   49248:	800ad07a 	srli	r5,r16,1
   4924c:	010007c4 	movi	r4,31
   49250:	20c9c83a 	sub	r4,r4,r3
   49254:	2908d83a 	srl	r4,r5,r4
   49258:	80e0983a 	sll	r16,r16,r3
   4925c:	003fce06 	br	49198 <__floatunsidf+0x48>
   49260:	01400044 	movi	r5,1
   49264:	28ca983a 	sll	r5,r5,r3
   49268:	003fe206 	br	491f4 <__floatunsidf+0xa4>

0004926c <__muldi3>:
   4926c:	20bfffcc 	andi	r2,r4,65535
   49270:	2010d43a 	srli	r8,r4,16
   49274:	30ffffcc 	andi	r3,r6,65535
   49278:	3014d43a 	srli	r10,r6,16
   4927c:	1893383a 	mul	r9,r3,r2
   49280:	1a07383a 	mul	r3,r3,r8
   49284:	5085383a 	mul	r2,r10,r2
   49288:	4816d43a 	srli	r11,r9,16
   4928c:	5211383a 	mul	r8,r10,r8
   49290:	1885883a 	add	r2,r3,r2
   49294:	12c5883a 	add	r2,r2,r11
   49298:	10c0022e 	bgeu	r2,r3,492a4 <__muldi3+0x38>
   4929c:	00c00074 	movhi	r3,1
   492a0:	40d1883a 	add	r8,r8,r3
   492a4:	1014d43a 	srli	r10,r2,16
   492a8:	21c9383a 	mul	r4,r4,r7
   492ac:	314d383a 	mul	r6,r6,r5
   492b0:	1004943a 	slli	r2,r2,16
   492b4:	4291883a 	add	r8,r8,r10
   492b8:	4a7fffcc 	andi	r9,r9,65535
   492bc:	2187883a 	add	r3,r4,r6
   492c0:	1245883a 	add	r2,r2,r9
   492c4:	1a07883a 	add	r3,r3,r8
   492c8:	f800283a 	ret

000492cc <__clzsi2>:
   492cc:	00bfffd4 	movui	r2,65535
   492d0:	11000b36 	bltu	r2,r4,49300 <__clzsi2+0x34>
   492d4:	00803fc4 	movi	r2,255
   492d8:	11001e2e 	bgeu	r2,r4,49354 <__clzsi2+0x88>
   492dc:	00c00204 	movi	r3,8
   492e0:	20c8d83a 	srl	r4,r4,r3
   492e4:	00c00174 	movhi	r3,5
   492e8:	18f1d204 	addi	r3,r3,-14520
   492ec:	00800604 	movi	r2,24
   492f0:	1909883a 	add	r4,r3,r4
   492f4:	20c00003 	ldbu	r3,0(r4)
   492f8:	10c5c83a 	sub	r2,r2,r3
   492fc:	f800283a 	ret
   49300:	00804034 	movhi	r2,256
   49304:	10bfffc4 	addi	r2,r2,-1
   49308:	11000936 	bltu	r2,r4,49330 <__clzsi2+0x64>
   4930c:	00800404 	movi	r2,16
   49310:	1007883a 	mov	r3,r2
   49314:	20c8d83a 	srl	r4,r4,r3
   49318:	00c00174 	movhi	r3,5
   4931c:	18f1d204 	addi	r3,r3,-14520
   49320:	1909883a 	add	r4,r3,r4
   49324:	20c00003 	ldbu	r3,0(r4)
   49328:	10c5c83a 	sub	r2,r2,r3
   4932c:	f800283a 	ret
   49330:	00c00604 	movi	r3,24
   49334:	20c8d83a 	srl	r4,r4,r3
   49338:	00c00174 	movhi	r3,5
   4933c:	18f1d204 	addi	r3,r3,-14520
   49340:	00800204 	movi	r2,8
   49344:	1909883a 	add	r4,r3,r4
   49348:	20c00003 	ldbu	r3,0(r4)
   4934c:	10c5c83a 	sub	r2,r2,r3
   49350:	f800283a 	ret
   49354:	0007883a 	mov	r3,zero
   49358:	20c8d83a 	srl	r4,r4,r3
   4935c:	00c00174 	movhi	r3,5
   49360:	18f1d204 	addi	r3,r3,-14520
   49364:	00800804 	movi	r2,32
   49368:	1909883a 	add	r4,r3,r4
   4936c:	20c00003 	ldbu	r3,0(r4)
   49370:	10c5c83a 	sub	r2,r2,r3
   49374:	f800283a 	ret

00049378 <__pack_d>:
   49378:	20800017 	ldw	r2,0(r4)
   4937c:	defff804 	addi	sp,sp,-32
   49380:	dcc00315 	stw	r19,12(sp)
   49384:	dc800215 	stw	r18,8(sp)
   49388:	dfc00715 	stw	ra,28(sp)
   4938c:	dd800615 	stw	r22,24(sp)
   49390:	dd400515 	stw	r21,20(sp)
   49394:	dd000415 	stw	r20,16(sp)
   49398:	dc400115 	stw	r17,4(sp)
   4939c:	dc000015 	stw	r16,0(sp)
   493a0:	04800044 	movi	r18,1
   493a4:	24400317 	ldw	r17,12(r4)
   493a8:	24000417 	ldw	r16,16(r4)
   493ac:	24c00117 	ldw	r19,4(r4)
   493b0:	9080422e 	bgeu	r18,r2,494bc <__pack_d+0x144>
   493b4:	00c00104 	movi	r3,4
   493b8:	10c03c26 	beq	r2,r3,494ac <__pack_d+0x134>
   493bc:	00c00084 	movi	r3,2
   493c0:	10c01926 	beq	r2,r3,49428 <__pack_d+0xb0>
   493c4:	8c04b03a 	or	r2,r17,r16
   493c8:	10001726 	beq	r2,zero,49428 <__pack_d+0xb0>
   493cc:	21000217 	ldw	r4,8(r4)
   493d0:	00bf0084 	movi	r2,-1022
   493d4:	20804016 	blt	r4,r2,494d8 <__pack_d+0x160>
   493d8:	0080ffc4 	movi	r2,1023
   493dc:	11003316 	blt	r2,r4,494ac <__pack_d+0x134>
   493e0:	88803fcc 	andi	r2,r17,255
   493e4:	00c02004 	movi	r3,128
   493e8:	10c02926 	beq	r2,r3,49490 <__pack_d+0x118>
   493ec:	88801fc4 	addi	r2,r17,127
   493f0:	1463803a 	cmpltu	r17,r2,r17
   493f4:	8c21883a 	add	r16,r17,r16
   493f8:	1023883a 	mov	r17,r2
   493fc:	00880034 	movhi	r2,8192
   49400:	10bfffc4 	addi	r2,r2,-1
   49404:	14001c36 	bltu	r2,r16,49478 <__pack_d+0x100>
   49408:	2100ffc4 	addi	r4,r4,1023
   4940c:	8006963a 	slli	r3,r16,24
   49410:	8804d23a 	srli	r2,r17,8
   49414:	8020913a 	slli	r16,r16,4
   49418:	2101ffcc 	andi	r4,r4,2047
   4941c:	1884b03a 	or	r2,r3,r2
   49420:	8020d33a 	srli	r16,r16,12
   49424:	00000306 	br	49434 <__pack_d+0xbc>
   49428:	0009883a 	mov	r4,zero
   4942c:	0005883a 	mov	r2,zero
   49430:	0021883a 	mov	r16,zero
   49434:	2008953a 	slli	r4,r4,20
   49438:	982697fa 	slli	r19,r19,31
   4943c:	00c00434 	movhi	r3,16
   49440:	18ffffc4 	addi	r3,r3,-1
   49444:	80e0703a 	and	r16,r16,r3
   49448:	8106b03a 	or	r3,r16,r4
   4944c:	1cc6b03a 	or	r3,r3,r19
   49450:	dfc00717 	ldw	ra,28(sp)
   49454:	dd800617 	ldw	r22,24(sp)
   49458:	dd400517 	ldw	r21,20(sp)
   4945c:	dd000417 	ldw	r20,16(sp)
   49460:	dcc00317 	ldw	r19,12(sp)
   49464:	dc800217 	ldw	r18,8(sp)
   49468:	dc400117 	ldw	r17,4(sp)
   4946c:	dc000017 	ldw	r16,0(sp)
   49470:	dec00804 	addi	sp,sp,32
   49474:	f800283a 	ret
   49478:	800697fa 	slli	r3,r16,31
   4947c:	8804d07a 	srli	r2,r17,1
   49480:	21010004 	addi	r4,r4,1024
   49484:	8020d07a 	srli	r16,r16,1
   49488:	18a2b03a 	or	r17,r3,r2
   4948c:	003fdf06 	br	4940c <__pack_d+0x94>
   49490:	88c0400c 	andi	r3,r17,256
   49494:	183fd926 	beq	r3,zero,493fc <__pack_d+0x84>
   49498:	8885883a 	add	r2,r17,r2
   4949c:	1463803a 	cmpltu	r17,r2,r17
   494a0:	8c21883a 	add	r16,r17,r16
   494a4:	1023883a 	mov	r17,r2
   494a8:	003fd406 	br	493fc <__pack_d+0x84>
   494ac:	0101ffc4 	movi	r4,2047
   494b0:	0005883a 	mov	r2,zero
   494b4:	0021883a 	mov	r16,zero
   494b8:	003fde06 	br	49434 <__pack_d+0xbc>
   494bc:	84000234 	orhi	r16,r16,8
   494c0:	00c00434 	movhi	r3,16
   494c4:	18ffffc4 	addi	r3,r3,-1
   494c8:	8805883a 	mov	r2,r17
   494cc:	80e0703a 	and	r16,r16,r3
   494d0:	0101ffc4 	movi	r4,2047
   494d4:	003fd706 	br	49434 <__pack_d+0xbc>
   494d8:	1129c83a 	sub	r20,r2,r4
   494dc:	00800e04 	movi	r2,56
   494e0:	15002716 	blt	r2,r20,49580 <__pack_d+0x208>
   494e4:	800b883a 	mov	r5,r16
   494e8:	a00d883a 	mov	r6,r20
   494ec:	8809883a 	mov	r4,r17
   494f0:	00497700 	call	49770 <__lshrdi3>
   494f4:	9009883a 	mov	r4,r18
   494f8:	000b883a 	mov	r5,zero
   494fc:	a00d883a 	mov	r6,r20
   49500:	102d883a 	mov	r22,r2
   49504:	182b883a 	mov	r21,r3
   49508:	00497b40 	call	497b4 <__ashldi3>
   4950c:	1009003a 	cmpeq	r4,r2,zero
   49510:	1907c83a 	sub	r3,r3,r4
   49514:	10bfffc4 	addi	r2,r2,-1
   49518:	1c20703a 	and	r16,r3,r16
   4951c:	1444703a 	and	r2,r2,r17
   49520:	1404b03a 	or	r2,r2,r16
   49524:	1004c03a 	cmpne	r2,r2,zero
   49528:	1584b03a 	or	r2,r2,r22
   4952c:	11003fcc 	andi	r4,r2,255
   49530:	01402004 	movi	r5,128
   49534:	a807883a 	mov	r3,r21
   49538:	2140131e 	bne	r4,r5,49588 <__pack_d+0x210>
   4953c:	1140400c 	andi	r5,r2,256
   49540:	28000426 	beq	r5,zero,49554 <__pack_d+0x1dc>
   49544:	1109883a 	add	r4,r2,r4
   49548:	2085803a 	cmpltu	r2,r4,r2
   4954c:	1547883a 	add	r3,r2,r21
   49550:	2005883a 	mov	r2,r4
   49554:	1808963a 	slli	r4,r3,24
   49558:	1004d23a 	srli	r2,r2,8
   4955c:	1820913a 	slli	r16,r3,4
   49560:	01440034 	movhi	r5,4096
   49564:	297fffc4 	addi	r5,r5,-1
   49568:	2084b03a 	or	r2,r4,r2
   4956c:	8020d33a 	srli	r16,r16,12
   49570:	01000044 	movi	r4,1
   49574:	28ffaf36 	bltu	r5,r3,49434 <__pack_d+0xbc>
   49578:	0009883a 	mov	r4,zero
   4957c:	003fad06 	br	49434 <__pack_d+0xbc>
   49580:	0005883a 	mov	r2,zero
   49584:	0007883a 	mov	r3,zero
   49588:	11001fc4 	addi	r4,r2,127
   4958c:	2085803a 	cmpltu	r2,r4,r2
   49590:	10c7883a 	add	r3,r2,r3
   49594:	2005883a 	mov	r2,r4
   49598:	003fee06 	br	49554 <__pack_d+0x1dc>

0004959c <__unpack_d>:
   4959c:	21800117 	ldw	r6,4(r4)
   495a0:	20c00017 	ldw	r3,0(r4)
   495a4:	3004d7fa 	srli	r2,r6,31
   495a8:	3008d53a 	srli	r4,r6,20
   495ac:	28800115 	stw	r2,4(r5)
   495b0:	2101ffcc 	andi	r4,r4,2047
   495b4:	00800434 	movhi	r2,16
   495b8:	10bfffc4 	addi	r2,r2,-1
   495bc:	3084703a 	and	r2,r6,r2
   495c0:	20001a1e 	bne	r4,zero,4962c <__unpack_d+0x90>
   495c4:	1888b03a 	or	r4,r3,r2
   495c8:	20002626 	beq	r4,zero,49664 <__unpack_d+0xc8>
   495cc:	1808d63a 	srli	r4,r3,24
   495d0:	1004923a 	slli	r2,r2,8
   495d4:	01bf0084 	movi	r6,-1022
   495d8:	29800215 	stw	r6,8(r5)
   495dc:	2084b03a 	or	r2,r4,r2
   495e0:	010000c4 	movi	r4,3
   495e4:	29000015 	stw	r4,0(r5)
   495e8:	02040034 	movhi	r8,4096
   495ec:	423fffc4 	addi	r8,r8,-1
   495f0:	1806923a 	slli	r3,r3,8
   495f4:	40801836 	bltu	r8,r2,49658 <__unpack_d+0xbc>
   495f8:	013f0044 	movi	r4,-1023
   495fc:	18cd883a 	add	r6,r3,r3
   49600:	30c7803a 	cmpltu	r3,r6,r3
   49604:	1085883a 	add	r2,r2,r2
   49608:	1885883a 	add	r2,r3,r2
   4960c:	200f883a 	mov	r7,r4
   49610:	3007883a 	mov	r3,r6
   49614:	213fffc4 	addi	r4,r4,-1
   49618:	40bff82e 	bgeu	r8,r2,495fc <__unpack_d+0x60>
   4961c:	29c00215 	stw	r7,8(r5)
   49620:	28c00315 	stw	r3,12(r5)
   49624:	28800415 	stw	r2,16(r5)
   49628:	f800283a 	ret
   4962c:	01c1ffc4 	movi	r7,2047
   49630:	21c00f26 	beq	r4,r7,49670 <__unpack_d+0xd4>
   49634:	180cd63a 	srli	r6,r3,24
   49638:	1004923a 	slli	r2,r2,8
   4963c:	213f0044 	addi	r4,r4,-1023
   49640:	1806923a 	slli	r3,r3,8
   49644:	3084b03a 	or	r2,r6,r2
   49648:	29000215 	stw	r4,8(r5)
   4964c:	010000c4 	movi	r4,3
   49650:	10840034 	orhi	r2,r2,4096
   49654:	29000015 	stw	r4,0(r5)
   49658:	28c00315 	stw	r3,12(r5)
   4965c:	28800415 	stw	r2,16(r5)
   49660:	f800283a 	ret
   49664:	00800084 	movi	r2,2
   49668:	28800015 	stw	r2,0(r5)
   4966c:	f800283a 	ret
   49670:	1888b03a 	or	r4,r3,r2
   49674:	20000526 	beq	r4,zero,4968c <__unpack_d+0xf0>
   49678:	3180022c 	andhi	r6,r6,8
   4967c:	30000626 	beq	r6,zero,49698 <__unpack_d+0xfc>
   49680:	01000044 	movi	r4,1
   49684:	29000015 	stw	r4,0(r5)
   49688:	003ff306 	br	49658 <__unpack_d+0xbc>
   4968c:	00800104 	movi	r2,4
   49690:	28800015 	stw	r2,0(r5)
   49694:	f800283a 	ret
   49698:	28000015 	stw	zero,0(r5)
   4969c:	003fee06 	br	49658 <__unpack_d+0xbc>

000496a0 <__fpcmp_parts_d>:
   496a0:	20c00017 	ldw	r3,0(r4)
   496a4:	00800044 	movi	r2,1
   496a8:	10c0142e 	bgeu	r2,r3,496fc <__fpcmp_parts_d+0x5c>
   496ac:	29800017 	ldw	r6,0(r5)
   496b0:	1180122e 	bgeu	r2,r6,496fc <__fpcmp_parts_d+0x5c>
   496b4:	01c00104 	movi	r7,4
   496b8:	19c02826 	beq	r3,r7,4975c <__fpcmp_parts_d+0xbc>
   496bc:	31c00926 	beq	r6,r7,496e4 <__fpcmp_parts_d+0x44>
   496c0:	01c00084 	movi	r7,2
   496c4:	19c00626 	beq	r3,r7,496e0 <__fpcmp_parts_d+0x40>
   496c8:	31c00a26 	beq	r6,r7,496f4 <__fpcmp_parts_d+0x54>
   496cc:	20c00117 	ldw	r3,4(r4)
   496d0:	29800117 	ldw	r6,4(r5)
   496d4:	19800b26 	beq	r3,r6,49704 <__fpcmp_parts_d+0x64>
   496d8:	1800041e 	bne	r3,zero,496ec <__fpcmp_parts_d+0x4c>
   496dc:	f800283a 	ret
   496e0:	30c01a26 	beq	r6,r3,4974c <__fpcmp_parts_d+0xac>
   496e4:	28800117 	ldw	r2,4(r5)
   496e8:	1000041e 	bne	r2,zero,496fc <__fpcmp_parts_d+0x5c>
   496ec:	00bfffc4 	movi	r2,-1
   496f0:	f800283a 	ret
   496f4:	20800117 	ldw	r2,4(r4)
   496f8:	103ffc1e 	bne	r2,zero,496ec <__fpcmp_parts_d+0x4c>
   496fc:	00800044 	movi	r2,1
   49700:	f800283a 	ret
   49704:	21c00217 	ldw	r7,8(r4)
   49708:	29800217 	ldw	r6,8(r5)
   4970c:	31c0020e 	bge	r6,r7,49718 <__fpcmp_parts_d+0x78>
   49710:	183ff61e 	bne	r3,zero,496ec <__fpcmp_parts_d+0x4c>
   49714:	f800283a 	ret
   49718:	39800a16 	blt	r7,r6,49744 <__fpcmp_parts_d+0xa4>
   4971c:	20800417 	ldw	r2,16(r4)
   49720:	29800417 	ldw	r6,16(r5)
   49724:	21c00317 	ldw	r7,12(r4)
   49728:	29000317 	ldw	r4,12(r5)
   4972c:	30800936 	bltu	r6,r2,49754 <__fpcmp_parts_d+0xb4>
   49730:	1180011e 	bne	r2,r6,49738 <__fpcmp_parts_d+0x98>
   49734:	21c00736 	bltu	r4,r7,49754 <__fpcmp_parts_d+0xb4>
   49738:	11800236 	bltu	r2,r6,49744 <__fpcmp_parts_d+0xa4>
   4973c:	3080031e 	bne	r6,r2,4974c <__fpcmp_parts_d+0xac>
   49740:	3900022e 	bgeu	r7,r4,4974c <__fpcmp_parts_d+0xac>
   49744:	183fe926 	beq	r3,zero,496ec <__fpcmp_parts_d+0x4c>
   49748:	003fec06 	br	496fc <__fpcmp_parts_d+0x5c>
   4974c:	0005883a 	mov	r2,zero
   49750:	f800283a 	ret
   49754:	183fe926 	beq	r3,zero,496fc <__fpcmp_parts_d+0x5c>
   49758:	003fe406 	br	496ec <__fpcmp_parts_d+0x4c>
   4975c:	30ffe51e 	bne	r6,r3,496f4 <__fpcmp_parts_d+0x54>
   49760:	28c00117 	ldw	r3,4(r5)
   49764:	20800117 	ldw	r2,4(r4)
   49768:	1885c83a 	sub	r2,r3,r2
   4976c:	f800283a 	ret

00049770 <__lshrdi3>:
   49770:	2005883a 	mov	r2,r4
   49774:	2807883a 	mov	r3,r5
   49778:	30000826 	beq	r6,zero,4979c <__lshrdi3+0x2c>
   4977c:	01000804 	movi	r4,32
   49780:	2189c83a 	sub	r4,r4,r6
   49784:	0100060e 	bge	zero,r4,497a0 <__lshrdi3+0x30>
   49788:	1184d83a 	srl	r2,r2,r6
   4978c:	2908983a 	sll	r4,r5,r4
   49790:	298cd83a 	srl	r6,r5,r6
   49794:	2084b03a 	or	r2,r4,r2
   49798:	3007883a 	mov	r3,r6
   4979c:	f800283a 	ret
   497a0:	0105c83a 	sub	r2,zero,r4
   497a4:	000d883a 	mov	r6,zero
   497a8:	2884d83a 	srl	r2,r5,r2
   497ac:	3007883a 	mov	r3,r6
   497b0:	003ffa06 	br	4979c <__lshrdi3+0x2c>

000497b4 <__ashldi3>:
   497b4:	2005883a 	mov	r2,r4
   497b8:	2807883a 	mov	r3,r5
   497bc:	30000826 	beq	r6,zero,497e0 <__ashldi3+0x2c>
   497c0:	01000804 	movi	r4,32
   497c4:	2189c83a 	sub	r4,r4,r6
   497c8:	0100060e 	bge	zero,r4,497e4 <__ashldi3+0x30>
   497cc:	1108d83a 	srl	r4,r2,r4
   497d0:	2986983a 	sll	r3,r5,r6
   497d4:	118c983a 	sll	r6,r2,r6
   497d8:	20c6b03a 	or	r3,r4,r3
   497dc:	3005883a 	mov	r2,r6
   497e0:	f800283a 	ret
   497e4:	0107c83a 	sub	r3,zero,r4
   497e8:	000d883a 	mov	r6,zero
   497ec:	10c6983a 	sll	r3,r2,r3
   497f0:	3005883a 	mov	r2,r6
   497f4:	003ffa06 	br	497e0 <__ashldi3+0x2c>

000497f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   497f8:	defffe04 	addi	sp,sp,-8
   497fc:	dfc00115 	stw	ra,4(sp)
   49800:	df000015 	stw	fp,0(sp)
   49804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   49808:	00800174 	movhi	r2,5
   4980c:	10b8ae04 	addi	r2,r2,-7496
   49810:	10800017 	ldw	r2,0(r2)
   49814:	10000526 	beq	r2,zero,4982c <alt_get_errno+0x34>
   49818:	00800174 	movhi	r2,5
   4981c:	10b8ae04 	addi	r2,r2,-7496
   49820:	10800017 	ldw	r2,0(r2)
   49824:	103ee83a 	callr	r2
   49828:	00000206 	br	49834 <alt_get_errno+0x3c>
   4982c:	00800174 	movhi	r2,5
   49830:	10bf4f04 	addi	r2,r2,-708
}
   49834:	e037883a 	mov	sp,fp
   49838:	dfc00117 	ldw	ra,4(sp)
   4983c:	df000017 	ldw	fp,0(sp)
   49840:	dec00204 	addi	sp,sp,8
   49844:	f800283a 	ret

00049848 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   49848:	defffb04 	addi	sp,sp,-20
   4984c:	dfc00415 	stw	ra,16(sp)
   49850:	df000315 	stw	fp,12(sp)
   49854:	df000304 	addi	fp,sp,12
   49858:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4985c:	e0bfff17 	ldw	r2,-4(fp)
   49860:	10000616 	blt	r2,zero,4987c <close+0x34>
   49864:	e0bfff17 	ldw	r2,-4(fp)
   49868:	10c00324 	muli	r3,r2,12
   4986c:	00800174 	movhi	r2,5
   49870:	10b42c04 	addi	r2,r2,-12112
   49874:	1885883a 	add	r2,r3,r2
   49878:	00000106 	br	49880 <close+0x38>
   4987c:	0005883a 	mov	r2,zero
   49880:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   49884:	e0bffd17 	ldw	r2,-12(fp)
   49888:	10001826 	beq	r2,zero,498ec <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4988c:	e0bffd17 	ldw	r2,-12(fp)
   49890:	10800017 	ldw	r2,0(r2)
   49894:	10800417 	ldw	r2,16(r2)
   49898:	10000626 	beq	r2,zero,498b4 <close+0x6c>
   4989c:	e0bffd17 	ldw	r2,-12(fp)
   498a0:	10800017 	ldw	r2,0(r2)
   498a4:	10800417 	ldw	r2,16(r2)
   498a8:	e13ffd17 	ldw	r4,-12(fp)
   498ac:	103ee83a 	callr	r2
   498b0:	00000106 	br	498b8 <close+0x70>
   498b4:	0005883a 	mov	r2,zero
   498b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   498bc:	e13fff17 	ldw	r4,-4(fp)
   498c0:	0049f2c0 	call	49f2c <alt_release_fd>
    if (rval < 0)
   498c4:	e0bffe17 	ldw	r2,-8(fp)
   498c8:	1000060e 	bge	r2,zero,498e4 <close+0x9c>
    {
      ALT_ERRNO = -rval;
   498cc:	00497f80 	call	497f8 <alt_get_errno>
   498d0:	e0fffe17 	ldw	r3,-8(fp)
   498d4:	00c7c83a 	sub	r3,zero,r3
   498d8:	10c00015 	stw	r3,0(r2)
      return -1;
   498dc:	00bfffc4 	movi	r2,-1
   498e0:	00000606 	br	498fc <close+0xb4>
    }
    return 0;
   498e4:	0005883a 	mov	r2,zero
   498e8:	00000406 	br	498fc <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   498ec:	00497f80 	call	497f8 <alt_get_errno>
   498f0:	00c01444 	movi	r3,81
   498f4:	10c00015 	stw	r3,0(r2)
    return -1;
   498f8:	00bfffc4 	movi	r2,-1
  }
}
   498fc:	e037883a 	mov	sp,fp
   49900:	dfc00117 	ldw	ra,4(sp)
   49904:	df000017 	ldw	fp,0(sp)
   49908:	dec00204 	addi	sp,sp,8
   4990c:	f800283a 	ret

00049910 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   49910:	defffc04 	addi	sp,sp,-16
   49914:	df000315 	stw	fp,12(sp)
   49918:	df000304 	addi	fp,sp,12
   4991c:	e13ffd15 	stw	r4,-12(fp)
   49920:	e17ffe15 	stw	r5,-8(fp)
   49924:	e1bfff15 	stw	r6,-4(fp)
  return len;
   49928:	e0bfff17 	ldw	r2,-4(fp)
}
   4992c:	e037883a 	mov	sp,fp
   49930:	df000017 	ldw	fp,0(sp)
   49934:	dec00104 	addi	sp,sp,4
   49938:	f800283a 	ret

0004993c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4993c:	defffe04 	addi	sp,sp,-8
   49940:	dfc00115 	stw	ra,4(sp)
   49944:	df000015 	stw	fp,0(sp)
   49948:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4994c:	00800174 	movhi	r2,5
   49950:	10b8ae04 	addi	r2,r2,-7496
   49954:	10800017 	ldw	r2,0(r2)
   49958:	10000526 	beq	r2,zero,49970 <alt_get_errno+0x34>
   4995c:	00800174 	movhi	r2,5
   49960:	10b8ae04 	addi	r2,r2,-7496
   49964:	10800017 	ldw	r2,0(r2)
   49968:	103ee83a 	callr	r2
   4996c:	00000206 	br	49978 <alt_get_errno+0x3c>
   49970:	00800174 	movhi	r2,5
   49974:	10bf4f04 	addi	r2,r2,-708
}
   49978:	e037883a 	mov	sp,fp
   4997c:	dfc00117 	ldw	ra,4(sp)
   49980:	df000017 	ldw	fp,0(sp)
   49984:	dec00204 	addi	sp,sp,8
   49988:	f800283a 	ret

0004998c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4998c:	defffb04 	addi	sp,sp,-20
   49990:	dfc00415 	stw	ra,16(sp)
   49994:	df000315 	stw	fp,12(sp)
   49998:	df000304 	addi	fp,sp,12
   4999c:	e13ffe15 	stw	r4,-8(fp)
   499a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   499a4:	e0bffe17 	ldw	r2,-8(fp)
   499a8:	10000616 	blt	r2,zero,499c4 <fstat+0x38>
   499ac:	e0bffe17 	ldw	r2,-8(fp)
   499b0:	10c00324 	muli	r3,r2,12
   499b4:	00800174 	movhi	r2,5
   499b8:	10b42c04 	addi	r2,r2,-12112
   499bc:	1885883a 	add	r2,r3,r2
   499c0:	00000106 	br	499c8 <fstat+0x3c>
   499c4:	0005883a 	mov	r2,zero
   499c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   499cc:	e0bffd17 	ldw	r2,-12(fp)
   499d0:	10001026 	beq	r2,zero,49a14 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   499d4:	e0bffd17 	ldw	r2,-12(fp)
   499d8:	10800017 	ldw	r2,0(r2)
   499dc:	10800817 	ldw	r2,32(r2)
   499e0:	10000726 	beq	r2,zero,49a00 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   499e4:	e0bffd17 	ldw	r2,-12(fp)
   499e8:	10800017 	ldw	r2,0(r2)
   499ec:	10800817 	ldw	r2,32(r2)
   499f0:	e13ffd17 	ldw	r4,-12(fp)
   499f4:	e17fff17 	ldw	r5,-4(fp)
   499f8:	103ee83a 	callr	r2
   499fc:	00000906 	br	49a24 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   49a00:	e0bfff17 	ldw	r2,-4(fp)
   49a04:	00c80004 	movi	r3,8192
   49a08:	10c00115 	stw	r3,4(r2)
      return 0;
   49a0c:	0005883a 	mov	r2,zero
   49a10:	00000406 	br	49a24 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   49a14:	004993c0 	call	4993c <alt_get_errno>
   49a18:	00c01444 	movi	r3,81
   49a1c:	10c00015 	stw	r3,0(r2)
    return -1;
   49a20:	00bfffc4 	movi	r2,-1
  }
}
   49a24:	e037883a 	mov	sp,fp
   49a28:	dfc00117 	ldw	ra,4(sp)
   49a2c:	df000017 	ldw	fp,0(sp)
   49a30:	dec00204 	addi	sp,sp,8
   49a34:	f800283a 	ret

00049a38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49a38:	defffe04 	addi	sp,sp,-8
   49a3c:	dfc00115 	stw	ra,4(sp)
   49a40:	df000015 	stw	fp,0(sp)
   49a44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   49a48:	00800174 	movhi	r2,5
   49a4c:	10b8ae04 	addi	r2,r2,-7496
   49a50:	10800017 	ldw	r2,0(r2)
   49a54:	10000526 	beq	r2,zero,49a6c <alt_get_errno+0x34>
   49a58:	00800174 	movhi	r2,5
   49a5c:	10b8ae04 	addi	r2,r2,-7496
   49a60:	10800017 	ldw	r2,0(r2)
   49a64:	103ee83a 	callr	r2
   49a68:	00000206 	br	49a74 <alt_get_errno+0x3c>
   49a6c:	00800174 	movhi	r2,5
   49a70:	10bf4f04 	addi	r2,r2,-708
}
   49a74:	e037883a 	mov	sp,fp
   49a78:	dfc00117 	ldw	ra,4(sp)
   49a7c:	df000017 	ldw	fp,0(sp)
   49a80:	dec00204 	addi	sp,sp,8
   49a84:	f800283a 	ret

00049a88 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   49a88:	deffed04 	addi	sp,sp,-76
   49a8c:	dfc01215 	stw	ra,72(sp)
   49a90:	df001115 	stw	fp,68(sp)
   49a94:	df001104 	addi	fp,sp,68
   49a98:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   49a9c:	e0bfff17 	ldw	r2,-4(fp)
   49aa0:	10000616 	blt	r2,zero,49abc <isatty+0x34>
   49aa4:	e0bfff17 	ldw	r2,-4(fp)
   49aa8:	10c00324 	muli	r3,r2,12
   49aac:	00800174 	movhi	r2,5
   49ab0:	10b42c04 	addi	r2,r2,-12112
   49ab4:	1885883a 	add	r2,r3,r2
   49ab8:	00000106 	br	49ac0 <isatty+0x38>
   49abc:	0005883a 	mov	r2,zero
   49ac0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   49ac4:	e0bfef17 	ldw	r2,-68(fp)
   49ac8:	10000e26 	beq	r2,zero,49b04 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   49acc:	e0bfef17 	ldw	r2,-68(fp)
   49ad0:	10800017 	ldw	r2,0(r2)
   49ad4:	10800817 	ldw	r2,32(r2)
   49ad8:	1000021e 	bne	r2,zero,49ae4 <isatty+0x5c>
    {
      return 1;
   49adc:	00800044 	movi	r2,1
   49ae0:	00000c06 	br	49b14 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   49ae4:	e0bff004 	addi	r2,fp,-64
   49ae8:	e13fff17 	ldw	r4,-4(fp)
   49aec:	100b883a 	mov	r5,r2
   49af0:	004998c0 	call	4998c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   49af4:	e0bff117 	ldw	r2,-60(fp)
   49af8:	10880020 	cmpeqi	r2,r2,8192
   49afc:	10803fcc 	andi	r2,r2,255
   49b00:	00000406 	br	49b14 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   49b04:	0049a380 	call	49a38 <alt_get_errno>
   49b08:	00c01444 	movi	r3,81
   49b0c:	10c00015 	stw	r3,0(r2)
    return 0;
   49b10:	0005883a 	mov	r2,zero
  }
}
   49b14:	e037883a 	mov	sp,fp
   49b18:	dfc00117 	ldw	ra,4(sp)
   49b1c:	df000017 	ldw	fp,0(sp)
   49b20:	dec00204 	addi	sp,sp,8
   49b24:	f800283a 	ret

00049b28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   49b28:	defffc04 	addi	sp,sp,-16
   49b2c:	df000315 	stw	fp,12(sp)
   49b30:	df000304 	addi	fp,sp,12
   49b34:	e13ffd15 	stw	r4,-12(fp)
   49b38:	e17ffe15 	stw	r5,-8(fp)
   49b3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   49b40:	e0fffe17 	ldw	r3,-8(fp)
   49b44:	e0bffd17 	ldw	r2,-12(fp)
   49b48:	18800e26 	beq	r3,r2,49b84 <alt_load_section+0x5c>
  {
    while( to != end )
   49b4c:	00000a06 	br	49b78 <alt_load_section+0x50>
    {
      *to++ = *from++;
   49b50:	e0bffd17 	ldw	r2,-12(fp)
   49b54:	10c00017 	ldw	r3,0(r2)
   49b58:	e0bffe17 	ldw	r2,-8(fp)
   49b5c:	10c00015 	stw	r3,0(r2)
   49b60:	e0bffe17 	ldw	r2,-8(fp)
   49b64:	10800104 	addi	r2,r2,4
   49b68:	e0bffe15 	stw	r2,-8(fp)
   49b6c:	e0bffd17 	ldw	r2,-12(fp)
   49b70:	10800104 	addi	r2,r2,4
   49b74:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   49b78:	e0fffe17 	ldw	r3,-8(fp)
   49b7c:	e0bfff17 	ldw	r2,-4(fp)
   49b80:	18bff31e 	bne	r3,r2,49b50 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   49b84:	e037883a 	mov	sp,fp
   49b88:	df000017 	ldw	fp,0(sp)
   49b8c:	dec00104 	addi	sp,sp,4
   49b90:	f800283a 	ret

00049b94 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   49b94:	defffe04 	addi	sp,sp,-8
   49b98:	dfc00115 	stw	ra,4(sp)
   49b9c:	df000015 	stw	fp,0(sp)
   49ba0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   49ba4:	01000174 	movhi	r4,5
   49ba8:	2138b304 	addi	r4,r4,-7476
   49bac:	01400174 	movhi	r5,5
   49bb0:	29721d04 	addi	r5,r5,-14220
   49bb4:	01800174 	movhi	r6,5
   49bb8:	31b8b304 	addi	r6,r6,-7476
   49bbc:	0049b280 	call	49b28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   49bc0:	01000134 	movhi	r4,4
   49bc4:	21000804 	addi	r4,r4,32
   49bc8:	01400134 	movhi	r5,4
   49bcc:	29400804 	addi	r5,r5,32
   49bd0:	01800134 	movhi	r6,4
   49bd4:	31806e04 	addi	r6,r6,440
   49bd8:	0049b280 	call	49b28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   49bdc:	01000174 	movhi	r4,5
   49be0:	21315204 	addi	r4,r4,-15032
   49be4:	01400174 	movhi	r5,5
   49be8:	29715204 	addi	r5,r5,-15032
   49bec:	01800174 	movhi	r6,5
   49bf0:	31b21d04 	addi	r6,r6,-14220
   49bf4:	0049b280 	call	49b28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   49bf8:	004b4480 	call	4b448 <alt_dcache_flush_all>
  alt_icache_flush_all();
   49bfc:	004b6340 	call	4b634 <alt_icache_flush_all>
}
   49c00:	e037883a 	mov	sp,fp
   49c04:	dfc00117 	ldw	ra,4(sp)
   49c08:	df000017 	ldw	fp,0(sp)
   49c0c:	dec00204 	addi	sp,sp,8
   49c10:	f800283a 	ret

00049c14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49c14:	defffe04 	addi	sp,sp,-8
   49c18:	dfc00115 	stw	ra,4(sp)
   49c1c:	df000015 	stw	fp,0(sp)
   49c20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   49c24:	00800174 	movhi	r2,5
   49c28:	10b8ae04 	addi	r2,r2,-7496
   49c2c:	10800017 	ldw	r2,0(r2)
   49c30:	10000526 	beq	r2,zero,49c48 <alt_get_errno+0x34>
   49c34:	00800174 	movhi	r2,5
   49c38:	10b8ae04 	addi	r2,r2,-7496
   49c3c:	10800017 	ldw	r2,0(r2)
   49c40:	103ee83a 	callr	r2
   49c44:	00000206 	br	49c50 <alt_get_errno+0x3c>
   49c48:	00800174 	movhi	r2,5
   49c4c:	10bf4f04 	addi	r2,r2,-708
}
   49c50:	e037883a 	mov	sp,fp
   49c54:	dfc00117 	ldw	ra,4(sp)
   49c58:	df000017 	ldw	fp,0(sp)
   49c5c:	dec00204 	addi	sp,sp,8
   49c60:	f800283a 	ret

00049c64 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   49c64:	defff904 	addi	sp,sp,-28
   49c68:	dfc00615 	stw	ra,24(sp)
   49c6c:	df000515 	stw	fp,20(sp)
   49c70:	df000504 	addi	fp,sp,20
   49c74:	e13ffd15 	stw	r4,-12(fp)
   49c78:	e17ffe15 	stw	r5,-8(fp)
   49c7c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   49c80:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   49c84:	e0bffd17 	ldw	r2,-12(fp)
   49c88:	10000616 	blt	r2,zero,49ca4 <lseek+0x40>
   49c8c:	e0bffd17 	ldw	r2,-12(fp)
   49c90:	10c00324 	muli	r3,r2,12
   49c94:	00800174 	movhi	r2,5
   49c98:	10b42c04 	addi	r2,r2,-12112
   49c9c:	1885883a 	add	r2,r3,r2
   49ca0:	00000106 	br	49ca8 <lseek+0x44>
   49ca4:	0005883a 	mov	r2,zero
   49ca8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   49cac:	e0bffc17 	ldw	r2,-16(fp)
   49cb0:	10001026 	beq	r2,zero,49cf4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   49cb4:	e0bffc17 	ldw	r2,-16(fp)
   49cb8:	10800017 	ldw	r2,0(r2)
   49cbc:	10800717 	ldw	r2,28(r2)
   49cc0:	10000926 	beq	r2,zero,49ce8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   49cc4:	e0bffc17 	ldw	r2,-16(fp)
   49cc8:	10800017 	ldw	r2,0(r2)
   49ccc:	10800717 	ldw	r2,28(r2)
   49cd0:	e13ffc17 	ldw	r4,-16(fp)
   49cd4:	e17ffe17 	ldw	r5,-8(fp)
   49cd8:	e1bfff17 	ldw	r6,-4(fp)
   49cdc:	103ee83a 	callr	r2
   49ce0:	e0bffb15 	stw	r2,-20(fp)
   49ce4:	00000506 	br	49cfc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   49ce8:	00bfde84 	movi	r2,-134
   49cec:	e0bffb15 	stw	r2,-20(fp)
   49cf0:	00000206 	br	49cfc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   49cf4:	00bfebc4 	movi	r2,-81
   49cf8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   49cfc:	e0bffb17 	ldw	r2,-20(fp)
   49d00:	1000060e 	bge	r2,zero,49d1c <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
   49d04:	0049c140 	call	49c14 <alt_get_errno>
   49d08:	e0fffb17 	ldw	r3,-20(fp)
   49d0c:	00c7c83a 	sub	r3,zero,r3
   49d10:	10c00015 	stw	r3,0(r2)
    rc = -1;
   49d14:	00bfffc4 	movi	r2,-1
   49d18:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   49d1c:	e0bffb17 	ldw	r2,-20(fp)
}
   49d20:	e037883a 	mov	sp,fp
   49d24:	dfc00117 	ldw	ra,4(sp)
   49d28:	df000017 	ldw	fp,0(sp)
   49d2c:	dec00204 	addi	sp,sp,8
   49d30:	f800283a 	ret

00049d34 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   49d34:	defffd04 	addi	sp,sp,-12
   49d38:	dfc00215 	stw	ra,8(sp)
   49d3c:	df000115 	stw	fp,4(sp)
   49d40:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   49d44:	0009883a 	mov	r4,zero
   49d48:	004a1e00 	call	4a1e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   49d4c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   49d50:	004a2140 	call	4a214 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   49d54:	01000174 	movhi	r4,5
   49d58:	21321504 	addi	r4,r4,-14252
   49d5c:	01400174 	movhi	r5,5
   49d60:	29721504 	addi	r5,r5,-14252
   49d64:	01800174 	movhi	r6,5
   49d68:	31b21504 	addi	r6,r6,-14252
   49d6c:	004b9ec0 	call	4b9ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   49d70:	004b57c0 	call	4b57c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   49d74:	01000174 	movhi	r4,5
   49d78:	212d7604 	addi	r4,r4,-18984
   49d7c:	004c1740 	call	4c174 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   49d80:	d126ac17 	ldw	r4,-25936(gp)
   49d84:	d0e6ad17 	ldw	r3,-25932(gp)
   49d88:	d0a6ae17 	ldw	r2,-25928(gp)
   49d8c:	180b883a 	mov	r5,r3
   49d90:	100d883a 	mov	r6,r2
   49d94:	00402040 	call	40204 <main>
   49d98:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   49d9c:	01000044 	movi	r4,1
   49da0:	00498480 	call	49848 <close>
  exit (result);
   49da4:	e13fff17 	ldw	r4,-4(fp)
   49da8:	004c1880 	call	4c188 <exit>

00049dac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   49dac:	defffe04 	addi	sp,sp,-8
   49db0:	df000115 	stw	fp,4(sp)
   49db4:	df000104 	addi	fp,sp,4
   49db8:	e13fff15 	stw	r4,-4(fp)
}
   49dbc:	e037883a 	mov	sp,fp
   49dc0:	df000017 	ldw	fp,0(sp)
   49dc4:	dec00104 	addi	sp,sp,4
   49dc8:	f800283a 	ret

00049dcc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   49dcc:	defffe04 	addi	sp,sp,-8
   49dd0:	df000115 	stw	fp,4(sp)
   49dd4:	df000104 	addi	fp,sp,4
   49dd8:	e13fff15 	stw	r4,-4(fp)
}
   49ddc:	e037883a 	mov	sp,fp
   49de0:	df000017 	ldw	fp,0(sp)
   49de4:	dec00104 	addi	sp,sp,4
   49de8:	f800283a 	ret

00049dec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49dec:	defffe04 	addi	sp,sp,-8
   49df0:	dfc00115 	stw	ra,4(sp)
   49df4:	df000015 	stw	fp,0(sp)
   49df8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   49dfc:	00800174 	movhi	r2,5
   49e00:	10b8ae04 	addi	r2,r2,-7496
   49e04:	10800017 	ldw	r2,0(r2)
   49e08:	10000526 	beq	r2,zero,49e20 <alt_get_errno+0x34>
   49e0c:	00800174 	movhi	r2,5
   49e10:	10b8ae04 	addi	r2,r2,-7496
   49e14:	10800017 	ldw	r2,0(r2)
   49e18:	103ee83a 	callr	r2
   49e1c:	00000206 	br	49e28 <alt_get_errno+0x3c>
   49e20:	00800174 	movhi	r2,5
   49e24:	10bf4f04 	addi	r2,r2,-708
}
   49e28:	e037883a 	mov	sp,fp
   49e2c:	dfc00117 	ldw	ra,4(sp)
   49e30:	df000017 	ldw	fp,0(sp)
   49e34:	dec00204 	addi	sp,sp,8
   49e38:	f800283a 	ret

00049e3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   49e3c:	defff904 	addi	sp,sp,-28
   49e40:	dfc00615 	stw	ra,24(sp)
   49e44:	df000515 	stw	fp,20(sp)
   49e48:	df000504 	addi	fp,sp,20
   49e4c:	e13ffd15 	stw	r4,-12(fp)
   49e50:	e17ffe15 	stw	r5,-8(fp)
   49e54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   49e58:	e0bffd17 	ldw	r2,-12(fp)
   49e5c:	10000616 	blt	r2,zero,49e78 <read+0x3c>
   49e60:	e0bffd17 	ldw	r2,-12(fp)
   49e64:	10c00324 	muli	r3,r2,12
   49e68:	00800174 	movhi	r2,5
   49e6c:	10b42c04 	addi	r2,r2,-12112
   49e70:	1885883a 	add	r2,r3,r2
   49e74:	00000106 	br	49e7c <read+0x40>
   49e78:	0005883a 	mov	r2,zero
   49e7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   49e80:	e0bffb17 	ldw	r2,-20(fp)
   49e84:	10002026 	beq	r2,zero,49f08 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   49e88:	e0bffb17 	ldw	r2,-20(fp)
   49e8c:	10800217 	ldw	r2,8(r2)
   49e90:	108000cc 	andi	r2,r2,3
   49e94:	10800060 	cmpeqi	r2,r2,1
   49e98:	1000171e 	bne	r2,zero,49ef8 <read+0xbc>
        (fd->dev->read))
   49e9c:	e0bffb17 	ldw	r2,-20(fp)
   49ea0:	10800017 	ldw	r2,0(r2)
   49ea4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   49ea8:	10001326 	beq	r2,zero,49ef8 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   49eac:	e0bffb17 	ldw	r2,-20(fp)
   49eb0:	10800017 	ldw	r2,0(r2)
   49eb4:	10c00517 	ldw	r3,20(r2)
   49eb8:	e0bfff17 	ldw	r2,-4(fp)
   49ebc:	e13ffb17 	ldw	r4,-20(fp)
   49ec0:	e17ffe17 	ldw	r5,-8(fp)
   49ec4:	100d883a 	mov	r6,r2
   49ec8:	183ee83a 	callr	r3
   49ecc:	e0bffc15 	stw	r2,-16(fp)
   49ed0:	e0bffc17 	ldw	r2,-16(fp)
   49ed4:	1000060e 	bge	r2,zero,49ef0 <read+0xb4>
        {
          ALT_ERRNO = -rval;
   49ed8:	0049dec0 	call	49dec <alt_get_errno>
   49edc:	e0fffc17 	ldw	r3,-16(fp)
   49ee0:	00c7c83a 	sub	r3,zero,r3
   49ee4:	10c00015 	stw	r3,0(r2)
          return -1;
   49ee8:	00bfffc4 	movi	r2,-1
   49eec:	00000a06 	br	49f18 <read+0xdc>
        }
        return rval;
   49ef0:	e0bffc17 	ldw	r2,-16(fp)
   49ef4:	00000806 	br	49f18 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
   49ef8:	0049dec0 	call	49dec <alt_get_errno>
   49efc:	00c00344 	movi	r3,13
   49f00:	10c00015 	stw	r3,0(r2)
   49f04:	00000306 	br	49f14 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   49f08:	0049dec0 	call	49dec <alt_get_errno>
   49f0c:	00c01444 	movi	r3,81
   49f10:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   49f14:	00bfffc4 	movi	r2,-1
}
   49f18:	e037883a 	mov	sp,fp
   49f1c:	dfc00117 	ldw	ra,4(sp)
   49f20:	df000017 	ldw	fp,0(sp)
   49f24:	dec00204 	addi	sp,sp,8
   49f28:	f800283a 	ret

00049f2c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   49f2c:	defffe04 	addi	sp,sp,-8
   49f30:	df000115 	stw	fp,4(sp)
   49f34:	df000104 	addi	fp,sp,4
   49f38:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   49f3c:	e0bfff17 	ldw	r2,-4(fp)
   49f40:	108000d0 	cmplti	r2,r2,3
   49f44:	10000d1e 	bne	r2,zero,49f7c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   49f48:	00c00174 	movhi	r3,5
   49f4c:	18f42c04 	addi	r3,r3,-12112
   49f50:	e0bfff17 	ldw	r2,-4(fp)
   49f54:	10800324 	muli	r2,r2,12
   49f58:	1885883a 	add	r2,r3,r2
   49f5c:	10800204 	addi	r2,r2,8
   49f60:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   49f64:	00c00174 	movhi	r3,5
   49f68:	18f42c04 	addi	r3,r3,-12112
   49f6c:	e0bfff17 	ldw	r2,-4(fp)
   49f70:	10800324 	muli	r2,r2,12
   49f74:	1885883a 	add	r2,r3,r2
   49f78:	10000015 	stw	zero,0(r2)
  }
}
   49f7c:	e037883a 	mov	sp,fp
   49f80:	df000017 	ldw	fp,0(sp)
   49f84:	dec00104 	addi	sp,sp,4
   49f88:	f800283a 	ret

00049f8c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   49f8c:	defff904 	addi	sp,sp,-28
   49f90:	df000615 	stw	fp,24(sp)
   49f94:	df000604 	addi	fp,sp,24
   49f98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49f9c:	0005303a 	rdctl	r2,status
   49fa0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49fa4:	e0fffc17 	ldw	r3,-16(fp)
   49fa8:	00bfff84 	movi	r2,-2
   49fac:	1884703a 	and	r2,r3,r2
   49fb0:	1001703a 	wrctl	status,r2
  
  return context;
   49fb4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   49fb8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   49fbc:	d0a00b17 	ldw	r2,-32724(gp)
   49fc0:	10c000c4 	addi	r3,r2,3
   49fc4:	00bfff04 	movi	r2,-4
   49fc8:	1884703a 	and	r2,r3,r2
   49fcc:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   49fd0:	d0e00b17 	ldw	r3,-32724(gp)
   49fd4:	e0bfff17 	ldw	r2,-4(fp)
   49fd8:	1885883a 	add	r2,r3,r2
   49fdc:	00c001f4 	movhi	r3,7
   49fe0:	18c80004 	addi	r3,r3,8192
   49fe4:	1880062e 	bgeu	r3,r2,4a000 <sbrk+0x74>
   49fe8:	e0bffa17 	ldw	r2,-24(fp)
   49fec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49ff0:	e0bffd17 	ldw	r2,-12(fp)
   49ff4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   49ff8:	00bfffc4 	movi	r2,-1
   49ffc:	00000b06 	br	4a02c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4a000:	d0a00b17 	ldw	r2,-32724(gp)
   4a004:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4a008:	d0e00b17 	ldw	r3,-32724(gp)
   4a00c:	e0bfff17 	ldw	r2,-4(fp)
   4a010:	1885883a 	add	r2,r3,r2
   4a014:	d0a00b15 	stw	r2,-32724(gp)
   4a018:	e0bffa17 	ldw	r2,-24(fp)
   4a01c:	e0bffe15 	stw	r2,-8(fp)
   4a020:	e0bffe17 	ldw	r2,-8(fp)
   4a024:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4a028:	e0bffb17 	ldw	r2,-20(fp)
} 
   4a02c:	e037883a 	mov	sp,fp
   4a030:	df000017 	ldw	fp,0(sp)
   4a034:	dec00104 	addi	sp,sp,4
   4a038:	f800283a 	ret

0004a03c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4a03c:	defffd04 	addi	sp,sp,-12
   4a040:	dfc00215 	stw	ra,8(sp)
   4a044:	df000115 	stw	fp,4(sp)
   4a048:	df000104 	addi	fp,sp,4
   4a04c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4a050:	e13fff17 	ldw	r4,-4(fp)
   4a054:	004b2f40 	call	4b2f4 <alt_busy_sleep>
}
   4a058:	e037883a 	mov	sp,fp
   4a05c:	dfc00117 	ldw	ra,4(sp)
   4a060:	df000017 	ldw	fp,0(sp)
   4a064:	dec00204 	addi	sp,sp,8
   4a068:	f800283a 	ret

0004a06c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a06c:	defffe04 	addi	sp,sp,-8
   4a070:	dfc00115 	stw	ra,4(sp)
   4a074:	df000015 	stw	fp,0(sp)
   4a078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4a07c:	00800174 	movhi	r2,5
   4a080:	10b8ae04 	addi	r2,r2,-7496
   4a084:	10800017 	ldw	r2,0(r2)
   4a088:	10000526 	beq	r2,zero,4a0a0 <alt_get_errno+0x34>
   4a08c:	00800174 	movhi	r2,5
   4a090:	10b8ae04 	addi	r2,r2,-7496
   4a094:	10800017 	ldw	r2,0(r2)
   4a098:	103ee83a 	callr	r2
   4a09c:	00000206 	br	4a0a8 <alt_get_errno+0x3c>
   4a0a0:	00800174 	movhi	r2,5
   4a0a4:	10bf4f04 	addi	r2,r2,-708
}
   4a0a8:	e037883a 	mov	sp,fp
   4a0ac:	dfc00117 	ldw	ra,4(sp)
   4a0b0:	df000017 	ldw	fp,0(sp)
   4a0b4:	dec00204 	addi	sp,sp,8
   4a0b8:	f800283a 	ret

0004a0bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4a0bc:	defff904 	addi	sp,sp,-28
   4a0c0:	dfc00615 	stw	ra,24(sp)
   4a0c4:	df000515 	stw	fp,20(sp)
   4a0c8:	df000504 	addi	fp,sp,20
   4a0cc:	e13ffd15 	stw	r4,-12(fp)
   4a0d0:	e17ffe15 	stw	r5,-8(fp)
   4a0d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a0d8:	e0bffd17 	ldw	r2,-12(fp)
   4a0dc:	10000616 	blt	r2,zero,4a0f8 <write+0x3c>
   4a0e0:	e0bffd17 	ldw	r2,-12(fp)
   4a0e4:	10c00324 	muli	r3,r2,12
   4a0e8:	00800174 	movhi	r2,5
   4a0ec:	10b42c04 	addi	r2,r2,-12112
   4a0f0:	1885883a 	add	r2,r3,r2
   4a0f4:	00000106 	br	4a0fc <write+0x40>
   4a0f8:	0005883a 	mov	r2,zero
   4a0fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4a100:	e0bffb17 	ldw	r2,-20(fp)
   4a104:	10001f26 	beq	r2,zero,4a184 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4a108:	e0bffb17 	ldw	r2,-20(fp)
   4a10c:	10800217 	ldw	r2,8(r2)
   4a110:	108000cc 	andi	r2,r2,3
   4a114:	10001726 	beq	r2,zero,4a174 <write+0xb8>
   4a118:	e0bffb17 	ldw	r2,-20(fp)
   4a11c:	10800017 	ldw	r2,0(r2)
   4a120:	10800617 	ldw	r2,24(r2)
   4a124:	10001326 	beq	r2,zero,4a174 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4a128:	e0bffb17 	ldw	r2,-20(fp)
   4a12c:	10800017 	ldw	r2,0(r2)
   4a130:	10c00617 	ldw	r3,24(r2)
   4a134:	e0bfff17 	ldw	r2,-4(fp)
   4a138:	e13ffb17 	ldw	r4,-20(fp)
   4a13c:	e17ffe17 	ldw	r5,-8(fp)
   4a140:	100d883a 	mov	r6,r2
   4a144:	183ee83a 	callr	r3
   4a148:	e0bffc15 	stw	r2,-16(fp)
   4a14c:	e0bffc17 	ldw	r2,-16(fp)
   4a150:	1000060e 	bge	r2,zero,4a16c <write+0xb0>
      {
        ALT_ERRNO = -rval;
   4a154:	004a06c0 	call	4a06c <alt_get_errno>
   4a158:	e0fffc17 	ldw	r3,-16(fp)
   4a15c:	00c7c83a 	sub	r3,zero,r3
   4a160:	10c00015 	stw	r3,0(r2)
        return -1;
   4a164:	00bfffc4 	movi	r2,-1
   4a168:	00000a06 	br	4a194 <write+0xd8>
      }
      return rval;
   4a16c:	e0bffc17 	ldw	r2,-16(fp)
   4a170:	00000806 	br	4a194 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4a174:	004a06c0 	call	4a06c <alt_get_errno>
   4a178:	00c00344 	movi	r3,13
   4a17c:	10c00015 	stw	r3,0(r2)
   4a180:	00000306 	br	4a190 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4a184:	004a06c0 	call	4a06c <alt_get_errno>
   4a188:	00c01444 	movi	r3,81
   4a18c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4a190:	00bfffc4 	movi	r2,-1
}
   4a194:	e037883a 	mov	sp,fp
   4a198:	dfc00117 	ldw	ra,4(sp)
   4a19c:	df000017 	ldw	fp,0(sp)
   4a1a0:	dec00204 	addi	sp,sp,8
   4a1a4:	f800283a 	ret

0004a1a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4a1a8:	defffd04 	addi	sp,sp,-12
   4a1ac:	dfc00215 	stw	ra,8(sp)
   4a1b0:	df000115 	stw	fp,4(sp)
   4a1b4:	df000104 	addi	fp,sp,4
   4a1b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4a1bc:	e13fff17 	ldw	r4,-4(fp)
   4a1c0:	01400174 	movhi	r5,5
   4a1c4:	2978ab04 	addi	r5,r5,-7508
   4a1c8:	004b4dc0 	call	4b4dc <alt_dev_llist_insert>
}
   4a1cc:	e037883a 	mov	sp,fp
   4a1d0:	dfc00117 	ldw	ra,4(sp)
   4a1d4:	df000017 	ldw	fp,0(sp)
   4a1d8:	dec00204 	addi	sp,sp,8
   4a1dc:	f800283a 	ret

0004a1e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4a1e0:	defffd04 	addi	sp,sp,-12
   4a1e4:	dfc00215 	stw	ra,8(sp)
   4a1e8:	df000115 	stw	fp,4(sp)
   4a1ec:	df000104 	addi	fp,sp,4
   4a1f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   4a1f4:	004be700 	call	4be70 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4a1f8:	00800044 	movi	r2,1
   4a1fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4a200:	e037883a 	mov	sp,fp
   4a204:	dfc00117 	ldw	ra,4(sp)
   4a208:	df000017 	ldw	fp,0(sp)
   4a20c:	dec00204 	addi	sp,sp,8
   4a210:	f800283a 	ret

0004a214 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4a214:	defffe04 	addi	sp,sp,-8
   4a218:	dfc00115 	stw	ra,4(sp)
   4a21c:	df000015 	stw	fp,0(sp)
   4a220:	d839883a 	mov	fp,sp
    ALTERA_AVALON_FIFO_INIT ( ESN_DOUT_FIFO, esn_dout_fifo);
   4a224:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4a228:	01000174 	movhi	r4,5
   4a22c:	21349604 	addi	r4,r4,-11688
   4a230:	000b883a 	mov	r5,zero
   4a234:	000d883a 	mov	r6,zero
   4a238:	004a8b40 	call	4a8b4 <altera_avalon_jtag_uart_init>
   4a23c:	01000174 	movhi	r4,5
   4a240:	21348c04 	addi	r4,r4,-11728
   4a244:	004a1a80 	call	4a1a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   4a248:	0001883a 	nop
}
   4a24c:	e037883a 	mov	sp,fp
   4a250:	dfc00117 	ldw	ra,4(sp)
   4a254:	df000017 	ldw	fp,0(sp)
   4a258:	dec00204 	addi	sp,sp,8
   4a25c:	f800283a 	ret

0004a260 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   4a260:	defffa04 	addi	sp,sp,-24
   4a264:	dfc00515 	stw	ra,20(sp)
   4a268:	df000415 	stw	fp,16(sp)
   4a26c:	df000404 	addi	fp,sp,16
   4a270:	e13ffc15 	stw	r4,-16(fp)
   4a274:	e17ffd15 	stw	r5,-12(fp)
   4a278:	e1bffe15 	stw	r6,-8(fp)
   4a27c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   4a280:	e13ffc17 	ldw	r4,-16(fp)
   4a284:	01400fc4 	movi	r5,63
   4a288:	004a42c0 	call	4a42c <altera_avalon_fifo_clear_event>
   4a28c:	10000226 	beq	r2,zero,4a298 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4a290:	00bfffc4 	movi	r2,-1
   4a294:	00001306 	br	4a2e4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   4a298:	e13ffc17 	ldw	r4,-16(fp)
   4a29c:	e17ffd17 	ldw	r5,-12(fp)
   4a2a0:	004a4880 	call	4a488 <altera_avalon_fifo_write_ienable>
   4a2a4:	10000226 	beq	r2,zero,4a2b0 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4a2a8:	00bfff84 	movi	r2,-2
   4a2ac:	00000d06 	br	4a2e4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   4a2b0:	e13ffc17 	ldw	r4,-16(fp)
   4a2b4:	e17fff17 	ldw	r5,-4(fp)
   4a2b8:	004a4e00 	call	4a4e0 <altera_avalon_fifo_write_almostfull>
   4a2bc:	10000226 	beq	r2,zero,4a2c8 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a2c0:	00bfff44 	movi	r2,-3
   4a2c4:	00000706 	br	4a2e4 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   4a2c8:	e13ffc17 	ldw	r4,-16(fp)
   4a2cc:	e17ffe17 	ldw	r5,-8(fp)
   4a2d0:	004a5380 	call	4a538 <altera_avalon_fifo_write_almostempty>
   4a2d4:	10000226 	beq	r2,zero,4a2e0 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a2d8:	00bfff44 	movi	r2,-3
   4a2dc:	00000106 	br	4a2e4 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   4a2e0:	0005883a 	mov	r2,zero
}
   4a2e4:	e037883a 	mov	sp,fp
   4a2e8:	dfc00117 	ldw	ra,4(sp)
   4a2ec:	df000017 	ldw	fp,0(sp)
   4a2f0:	dec00204 	addi	sp,sp,8
   4a2f4:	f800283a 	ret

0004a2f8 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   4a2f8:	defffd04 	addi	sp,sp,-12
   4a2fc:	df000215 	stw	fp,8(sp)
   4a300:	df000204 	addi	fp,sp,8
   4a304:	e13ffe15 	stw	r4,-8(fp)
   4a308:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   4a30c:	e0bffe17 	ldw	r2,-8(fp)
   4a310:	10800104 	addi	r2,r2,4
   4a314:	10800037 	ldwio	r2,0(r2)
   4a318:	1007883a 	mov	r3,r2
   4a31c:	e0bfff17 	ldw	r2,-4(fp)
   4a320:	1884703a 	and	r2,r3,r2
}
   4a324:	e037883a 	mov	sp,fp
   4a328:	df000017 	ldw	fp,0(sp)
   4a32c:	dec00104 	addi	sp,sp,4
   4a330:	f800283a 	ret

0004a334 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   4a334:	defffd04 	addi	sp,sp,-12
   4a338:	df000215 	stw	fp,8(sp)
   4a33c:	df000204 	addi	fp,sp,8
   4a340:	e13ffe15 	stw	r4,-8(fp)
   4a344:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   4a348:	e0bffe17 	ldw	r2,-8(fp)
   4a34c:	10800304 	addi	r2,r2,12
   4a350:	10800037 	ldwio	r2,0(r2)
   4a354:	1007883a 	mov	r3,r2
   4a358:	e0bfff17 	ldw	r2,-4(fp)
   4a35c:	1884703a 	and	r2,r3,r2
}
   4a360:	e037883a 	mov	sp,fp
   4a364:	df000017 	ldw	fp,0(sp)
   4a368:	dec00104 	addi	sp,sp,4
   4a36c:	f800283a 	ret

0004a370 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   4a370:	defffe04 	addi	sp,sp,-8
   4a374:	df000115 	stw	fp,4(sp)
   4a378:	df000104 	addi	fp,sp,4
   4a37c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   4a380:	e0bfff17 	ldw	r2,-4(fp)
   4a384:	10800404 	addi	r2,r2,16
   4a388:	10800037 	ldwio	r2,0(r2)
}
   4a38c:	e037883a 	mov	sp,fp
   4a390:	df000017 	ldw	fp,0(sp)
   4a394:	dec00104 	addi	sp,sp,4
   4a398:	f800283a 	ret

0004a39c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   4a39c:	defffe04 	addi	sp,sp,-8
   4a3a0:	df000115 	stw	fp,4(sp)
   4a3a4:	df000104 	addi	fp,sp,4
   4a3a8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   4a3ac:	e0bfff17 	ldw	r2,-4(fp)
   4a3b0:	10800504 	addi	r2,r2,20
   4a3b4:	10800037 	ldwio	r2,0(r2)
}
   4a3b8:	e037883a 	mov	sp,fp
   4a3bc:	df000017 	ldw	fp,0(sp)
   4a3c0:	dec00104 	addi	sp,sp,4
   4a3c4:	f800283a 	ret

0004a3c8 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   4a3c8:	defffd04 	addi	sp,sp,-12
   4a3cc:	df000215 	stw	fp,8(sp)
   4a3d0:	df000204 	addi	fp,sp,8
   4a3d4:	e13ffe15 	stw	r4,-8(fp)
   4a3d8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   4a3dc:	e0bffe17 	ldw	r2,-8(fp)
   4a3e0:	10800204 	addi	r2,r2,8
   4a3e4:	10800037 	ldwio	r2,0(r2)
   4a3e8:	1007883a 	mov	r3,r2
   4a3ec:	e0bfff17 	ldw	r2,-4(fp)
   4a3f0:	1884703a 	and	r2,r3,r2
}
   4a3f4:	e037883a 	mov	sp,fp
   4a3f8:	df000017 	ldw	fp,0(sp)
   4a3fc:	dec00104 	addi	sp,sp,4
   4a400:	f800283a 	ret

0004a404 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   4a404:	defffe04 	addi	sp,sp,-8
   4a408:	df000115 	stw	fp,4(sp)
   4a40c:	df000104 	addi	fp,sp,4
   4a410:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   4a414:	e0bfff17 	ldw	r2,-4(fp)
   4a418:	10800037 	ldwio	r2,0(r2)
}
   4a41c:	e037883a 	mov	sp,fp
   4a420:	df000017 	ldw	fp,0(sp)
   4a424:	dec00104 	addi	sp,sp,4
   4a428:	f800283a 	ret

0004a42c <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   4a42c:	defffd04 	addi	sp,sp,-12
   4a430:	df000215 	stw	fp,8(sp)
   4a434:	df000204 	addi	fp,sp,8
   4a438:	e13ffe15 	stw	r4,-8(fp)
   4a43c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   4a440:	e0bffe17 	ldw	r2,-8(fp)
   4a444:	10800204 	addi	r2,r2,8
   4a448:	e0ffff17 	ldw	r3,-4(fp)
   4a44c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   4a450:	e0bffe17 	ldw	r2,-8(fp)
   4a454:	10800204 	addi	r2,r2,8
   4a458:	10800037 	ldwio	r2,0(r2)
   4a45c:	1007883a 	mov	r3,r2
   4a460:	e0bfff17 	ldw	r2,-4(fp)
   4a464:	1884703a 	and	r2,r3,r2
   4a468:	1000021e 	bne	r2,zero,4a474 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4a46c:	0005883a 	mov	r2,zero
   4a470:	00000106 	br	4a478 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4a474:	00bfffc4 	movi	r2,-1
}
   4a478:	e037883a 	mov	sp,fp
   4a47c:	df000017 	ldw	fp,0(sp)
   4a480:	dec00104 	addi	sp,sp,4
   4a484:	f800283a 	ret

0004a488 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   4a488:	defffd04 	addi	sp,sp,-12
   4a48c:	df000215 	stw	fp,8(sp)
   4a490:	df000204 	addi	fp,sp,8
   4a494:	e13ffe15 	stw	r4,-8(fp)
   4a498:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4a49c:	e0bffe17 	ldw	r2,-8(fp)
   4a4a0:	10800304 	addi	r2,r2,12
   4a4a4:	e0ffff17 	ldw	r3,-4(fp)
   4a4a8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   4a4ac:	e0bffe17 	ldw	r2,-8(fp)
   4a4b0:	10800304 	addi	r2,r2,12
   4a4b4:	10800037 	ldwio	r2,0(r2)
   4a4b8:	1007883a 	mov	r3,r2
   4a4bc:	e0bfff17 	ldw	r2,-4(fp)
   4a4c0:	1880021e 	bne	r3,r2,4a4cc <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4a4c4:	0005883a 	mov	r2,zero
   4a4c8:	00000106 	br	4a4d0 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4a4cc:	00bfff84 	movi	r2,-2
}
   4a4d0:	e037883a 	mov	sp,fp
   4a4d4:	df000017 	ldw	fp,0(sp)
   4a4d8:	dec00104 	addi	sp,sp,4
   4a4dc:	f800283a 	ret

0004a4e0 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   4a4e0:	defffd04 	addi	sp,sp,-12
   4a4e4:	df000215 	stw	fp,8(sp)
   4a4e8:	df000204 	addi	fp,sp,8
   4a4ec:	e13ffe15 	stw	r4,-8(fp)
   4a4f0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   4a4f4:	e0bffe17 	ldw	r2,-8(fp)
   4a4f8:	10800404 	addi	r2,r2,16
   4a4fc:	e0ffff17 	ldw	r3,-4(fp)
   4a500:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   4a504:	e0bffe17 	ldw	r2,-8(fp)
   4a508:	10800404 	addi	r2,r2,16
   4a50c:	10800037 	ldwio	r2,0(r2)
   4a510:	1007883a 	mov	r3,r2
   4a514:	e0bfff17 	ldw	r2,-4(fp)
   4a518:	1880021e 	bne	r3,r2,4a524 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4a51c:	0005883a 	mov	r2,zero
   4a520:	00000106 	br	4a528 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a524:	00bfff44 	movi	r2,-3
}
   4a528:	e037883a 	mov	sp,fp
   4a52c:	df000017 	ldw	fp,0(sp)
   4a530:	dec00104 	addi	sp,sp,4
   4a534:	f800283a 	ret

0004a538 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   4a538:	defffd04 	addi	sp,sp,-12
   4a53c:	df000215 	stw	fp,8(sp)
   4a540:	df000204 	addi	fp,sp,8
   4a544:	e13ffe15 	stw	r4,-8(fp)
   4a548:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   4a54c:	e0bffe17 	ldw	r2,-8(fp)
   4a550:	10800504 	addi	r2,r2,20
   4a554:	e0ffff17 	ldw	r3,-4(fp)
   4a558:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   4a55c:	e0bffe17 	ldw	r2,-8(fp)
   4a560:	10800504 	addi	r2,r2,20
   4a564:	10800037 	ldwio	r2,0(r2)
   4a568:	1007883a 	mov	r3,r2
   4a56c:	e0bfff17 	ldw	r2,-4(fp)
   4a570:	1880021e 	bne	r3,r2,4a57c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4a574:	0005883a 	mov	r2,zero
   4a578:	00000106 	br	4a580 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4a57c:	00bfff44 	movi	r2,-3
}
   4a580:	e037883a 	mov	sp,fp
   4a584:	df000017 	ldw	fp,0(sp)
   4a588:	dec00104 	addi	sp,sp,4
   4a58c:	f800283a 	ret

0004a590 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   4a590:	defffb04 	addi	sp,sp,-20
   4a594:	dfc00415 	stw	ra,16(sp)
   4a598:	df000315 	stw	fp,12(sp)
   4a59c:	df000304 	addi	fp,sp,12
   4a5a0:	e13ffd15 	stw	r4,-12(fp)
   4a5a4:	e17ffe15 	stw	r5,-8(fp)
   4a5a8:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4a5ac:	e13ffe17 	ldw	r4,-8(fp)
   4a5b0:	01400044 	movi	r5,1
   4a5b4:	004a2f80 	call	4a2f8 <altera_avalon_fifo_read_status>
   4a5b8:	1000051e 	bne	r2,zero,4a5d0 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   4a5bc:	e0bffd17 	ldw	r2,-12(fp)
   4a5c0:	e0ffff17 	ldw	r3,-4(fp)
   4a5c4:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   4a5c8:	0005883a 	mov	r2,zero
   4a5cc:	00000106 	br	4a5d4 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   4a5d0:	00bfff04 	movi	r2,-4
    }
}
   4a5d4:	e037883a 	mov	sp,fp
   4a5d8:	dfc00117 	ldw	ra,4(sp)
   4a5dc:	df000017 	ldw	fp,0(sp)
   4a5e0:	dec00204 	addi	sp,sp,8
   4a5e4:	f800283a 	ret

0004a5e8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   4a5e8:	defffa04 	addi	sp,sp,-24
   4a5ec:	dfc00515 	stw	ra,20(sp)
   4a5f0:	df000415 	stw	fp,16(sp)
   4a5f4:	df000404 	addi	fp,sp,16
   4a5f8:	e13ffd15 	stw	r4,-12(fp)
   4a5fc:	e17ffe15 	stw	r5,-8(fp)
   4a600:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   4a604:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   4a608:	e0bfff17 	ldw	r2,-4(fp)
   4a60c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4a610:	e13ffe17 	ldw	r4,-8(fp)
   4a614:	01400084 	movi	r5,2
   4a618:	004a2f80 	call	4a2f8 <altera_avalon_fifo_read_status>
   4a61c:	1000071e 	bne	r2,zero,4a63c <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   4a620:	e13ffe17 	ldw	r4,-8(fp)
   4a624:	004a4040 	call	4a404 <altera_avalon_fifo_read_level>
   4a628:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4a62c:	e0bffd17 	ldw	r2,-12(fp)
   4a630:	10c00037 	ldwio	r3,0(r2)
   4a634:	e0bfff17 	ldw	r2,-4(fp)
   4a638:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   4a63c:	e0bffc17 	ldw	r2,-16(fp)
}
   4a640:	e037883a 	mov	sp,fp
   4a644:	dfc00117 	ldw	ra,4(sp)
   4a648:	df000017 	ldw	fp,0(sp)
   4a64c:	dec00204 	addi	sp,sp,8
   4a650:	f800283a 	ret

0004a654 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   4a654:	defffc04 	addi	sp,sp,-16
   4a658:	dfc00315 	stw	ra,12(sp)
   4a65c:	df000215 	stw	fp,8(sp)
   4a660:	df000204 	addi	fp,sp,8
   4a664:	e13ffe15 	stw	r4,-8(fp)
   4a668:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4a66c:	e13fff17 	ldw	r4,-4(fp)
   4a670:	01400084 	movi	r5,2
   4a674:	004a2f80 	call	4a2f8 <altera_avalon_fifo_read_status>
   4a678:	1000031e 	bne	r2,zero,4a688 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4a67c:	e0bffe17 	ldw	r2,-8(fp)
   4a680:	10800037 	ldwio	r2,0(r2)
   4a684:	00000106 	br	4a68c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   4a688:	0005883a 	mov	r2,zero
}
   4a68c:	e037883a 	mov	sp,fp
   4a690:	dfc00117 	ldw	ra,4(sp)
   4a694:	df000017 	ldw	fp,0(sp)
   4a698:	dec00204 	addi	sp,sp,8
   4a69c:	f800283a 	ret

0004a6a0 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   4a6a0:	defffb04 	addi	sp,sp,-20
   4a6a4:	dfc00415 	stw	ra,16(sp)
   4a6a8:	df000315 	stw	fp,12(sp)
   4a6ac:	df000304 	addi	fp,sp,12
   4a6b0:	e13ffd15 	stw	r4,-12(fp)
   4a6b4:	e17ffe15 	stw	r5,-8(fp)
   4a6b8:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4a6bc:	e13ffe17 	ldw	r4,-8(fp)
   4a6c0:	01400044 	movi	r5,1
   4a6c4:	004a2f80 	call	4a2f8 <altera_avalon_fifo_read_status>
   4a6c8:	1000061e 	bne	r2,zero,4a6e4 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   4a6cc:	e0bffd17 	ldw	r2,-12(fp)
   4a6d0:	10800104 	addi	r2,r2,4
   4a6d4:	e0ffff17 	ldw	r3,-4(fp)
   4a6d8:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   4a6dc:	0005883a 	mov	r2,zero
   4a6e0:	00000106 	br	4a6e8 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   4a6e4:	00bfff04 	movi	r2,-4
    }
}
   4a6e8:	e037883a 	mov	sp,fp
   4a6ec:	dfc00117 	ldw	ra,4(sp)
   4a6f0:	df000017 	ldw	fp,0(sp)
   4a6f4:	dec00204 	addi	sp,sp,8
   4a6f8:	f800283a 	ret

0004a6fc <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   4a6fc:	defffe04 	addi	sp,sp,-8
   4a700:	df000115 	stw	fp,4(sp)
   4a704:	df000104 	addi	fp,sp,4
   4a708:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   4a70c:	e0bfff17 	ldw	r2,-4(fp)
   4a710:	10800104 	addi	r2,r2,4
   4a714:	10800037 	ldwio	r2,0(r2)
}
   4a718:	e037883a 	mov	sp,fp
   4a71c:	df000017 	ldw	fp,0(sp)
   4a720:	dec00104 	addi	sp,sp,4
   4a724:	f800283a 	ret

0004a728 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   4a728:	defffe04 	addi	sp,sp,-8
   4a72c:	df000115 	stw	fp,4(sp)
   4a730:	df000104 	addi	fp,sp,4
   4a734:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   4a738:	e0bfff17 	ldw	r2,-4(fp)
   4a73c:	10800037 	ldwio	r2,0(r2)
}
   4a740:	e037883a 	mov	sp,fp
   4a744:	df000017 	ldw	fp,0(sp)
   4a748:	dec00104 	addi	sp,sp,4
   4a74c:	f800283a 	ret

0004a750 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4a750:	defffa04 	addi	sp,sp,-24
   4a754:	dfc00515 	stw	ra,20(sp)
   4a758:	df000415 	stw	fp,16(sp)
   4a75c:	df000404 	addi	fp,sp,16
   4a760:	e13ffd15 	stw	r4,-12(fp)
   4a764:	e17ffe15 	stw	r5,-8(fp)
   4a768:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4a76c:	e0bffd17 	ldw	r2,-12(fp)
   4a770:	10800017 	ldw	r2,0(r2)
   4a774:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4a778:	e0bffc17 	ldw	r2,-16(fp)
   4a77c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4a780:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4a784:	10800217 	ldw	r2,8(r2)
   4a788:	1809883a 	mov	r4,r3
   4a78c:	e17ffe17 	ldw	r5,-8(fp)
   4a790:	e1bfff17 	ldw	r6,-4(fp)
   4a794:	100f883a 	mov	r7,r2
   4a798:	004ad780 	call	4ad78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4a79c:	e037883a 	mov	sp,fp
   4a7a0:	dfc00117 	ldw	ra,4(sp)
   4a7a4:	df000017 	ldw	fp,0(sp)
   4a7a8:	dec00204 	addi	sp,sp,8
   4a7ac:	f800283a 	ret

0004a7b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4a7b0:	defffa04 	addi	sp,sp,-24
   4a7b4:	dfc00515 	stw	ra,20(sp)
   4a7b8:	df000415 	stw	fp,16(sp)
   4a7bc:	df000404 	addi	fp,sp,16
   4a7c0:	e13ffd15 	stw	r4,-12(fp)
   4a7c4:	e17ffe15 	stw	r5,-8(fp)
   4a7c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4a7cc:	e0bffd17 	ldw	r2,-12(fp)
   4a7d0:	10800017 	ldw	r2,0(r2)
   4a7d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4a7d8:	e0bffc17 	ldw	r2,-16(fp)
   4a7dc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4a7e0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4a7e4:	10800217 	ldw	r2,8(r2)
   4a7e8:	1809883a 	mov	r4,r3
   4a7ec:	e17ffe17 	ldw	r5,-8(fp)
   4a7f0:	e1bfff17 	ldw	r6,-4(fp)
   4a7f4:	100f883a 	mov	r7,r2
   4a7f8:	004af900 	call	4af90 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4a7fc:	e037883a 	mov	sp,fp
   4a800:	dfc00117 	ldw	ra,4(sp)
   4a804:	df000017 	ldw	fp,0(sp)
   4a808:	dec00204 	addi	sp,sp,8
   4a80c:	f800283a 	ret

0004a810 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4a810:	defffc04 	addi	sp,sp,-16
   4a814:	dfc00315 	stw	ra,12(sp)
   4a818:	df000215 	stw	fp,8(sp)
   4a81c:	df000204 	addi	fp,sp,8
   4a820:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4a824:	e0bfff17 	ldw	r2,-4(fp)
   4a828:	10800017 	ldw	r2,0(r2)
   4a82c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4a830:	e0bffe17 	ldw	r2,-8(fp)
   4a834:	10c00a04 	addi	r3,r2,40
   4a838:	e0bfff17 	ldw	r2,-4(fp)
   4a83c:	10800217 	ldw	r2,8(r2)
   4a840:	1809883a 	mov	r4,r3
   4a844:	100b883a 	mov	r5,r2
   4a848:	004ac1c0 	call	4ac1c <altera_avalon_jtag_uart_close>
}
   4a84c:	e037883a 	mov	sp,fp
   4a850:	dfc00117 	ldw	ra,4(sp)
   4a854:	df000017 	ldw	fp,0(sp)
   4a858:	dec00204 	addi	sp,sp,8
   4a85c:	f800283a 	ret

0004a860 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4a860:	defffa04 	addi	sp,sp,-24
   4a864:	dfc00515 	stw	ra,20(sp)
   4a868:	df000415 	stw	fp,16(sp)
   4a86c:	df000404 	addi	fp,sp,16
   4a870:	e13ffd15 	stw	r4,-12(fp)
   4a874:	e17ffe15 	stw	r5,-8(fp)
   4a878:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4a87c:	e0bffd17 	ldw	r2,-12(fp)
   4a880:	10800017 	ldw	r2,0(r2)
   4a884:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4a888:	e0bffc17 	ldw	r2,-16(fp)
   4a88c:	10800a04 	addi	r2,r2,40
   4a890:	1009883a 	mov	r4,r2
   4a894:	e17ffe17 	ldw	r5,-8(fp)
   4a898:	e1bfff17 	ldw	r6,-4(fp)
   4a89c:	004ac840 	call	4ac84 <altera_avalon_jtag_uart_ioctl>
}
   4a8a0:	e037883a 	mov	sp,fp
   4a8a4:	dfc00117 	ldw	ra,4(sp)
   4a8a8:	df000017 	ldw	fp,0(sp)
   4a8ac:	dec00204 	addi	sp,sp,8
   4a8b0:	f800283a 	ret

0004a8b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4a8b4:	defffa04 	addi	sp,sp,-24
   4a8b8:	dfc00515 	stw	ra,20(sp)
   4a8bc:	df000415 	stw	fp,16(sp)
   4a8c0:	df000404 	addi	fp,sp,16
   4a8c4:	e13ffd15 	stw	r4,-12(fp)
   4a8c8:	e17ffe15 	stw	r5,-8(fp)
   4a8cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4a8d0:	e0bffd17 	ldw	r2,-12(fp)
   4a8d4:	00c00044 	movi	r3,1
   4a8d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4a8dc:	e0bffd17 	ldw	r2,-12(fp)
   4a8e0:	10800017 	ldw	r2,0(r2)
   4a8e4:	10800104 	addi	r2,r2,4
   4a8e8:	e0fffd17 	ldw	r3,-12(fp)
   4a8ec:	18c00817 	ldw	r3,32(r3)
   4a8f0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4a8f4:	e0fffe17 	ldw	r3,-8(fp)
   4a8f8:	e0bfff17 	ldw	r2,-4(fp)
   4a8fc:	d8000015 	stw	zero,0(sp)
   4a900:	1809883a 	mov	r4,r3
   4a904:	100b883a 	mov	r5,r2
   4a908:	01800174 	movhi	r6,5
   4a90c:	31aa5d04 	addi	r6,r6,-22156
   4a910:	e1fffd17 	ldw	r7,-12(fp)
   4a914:	004b6640 	call	4b664 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4a918:	e0bffd17 	ldw	r2,-12(fp)
   4a91c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4a920:	e0bffd17 	ldw	r2,-12(fp)
   4a924:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4a928:	00800174 	movhi	r2,5
   4a92c:	10bf5404 	addi	r2,r2,-688
   4a930:	10800017 	ldw	r2,0(r2)
   4a934:	1809883a 	mov	r4,r3
   4a938:	100b883a 	mov	r5,r2
   4a93c:	01800174 	movhi	r6,5
   4a940:	31aade04 	addi	r6,r6,-21640
   4a944:	e1fffd17 	ldw	r7,-12(fp)
   4a948:	004b1b40 	call	4b1b4 <alt_alarm_start>
   4a94c:	1000040e 	bge	r2,zero,4a960 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4a950:	e0bffd17 	ldw	r2,-12(fp)
   4a954:	00e00034 	movhi	r3,32768
   4a958:	18ffffc4 	addi	r3,r3,-1
   4a95c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4a960:	e037883a 	mov	sp,fp
   4a964:	dfc00117 	ldw	ra,4(sp)
   4a968:	df000017 	ldw	fp,0(sp)
   4a96c:	dec00204 	addi	sp,sp,8
   4a970:	f800283a 	ret

0004a974 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4a974:	defff804 	addi	sp,sp,-32
   4a978:	df000715 	stw	fp,28(sp)
   4a97c:	df000704 	addi	fp,sp,28
   4a980:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4a984:	e0bfff17 	ldw	r2,-4(fp)
   4a988:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4a98c:	e0bffb17 	ldw	r2,-20(fp)
   4a990:	10800017 	ldw	r2,0(r2)
   4a994:	e0bffc15 	stw	r2,-16(fp)
   4a998:	00000106 	br	4a9a0 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4a99c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4a9a0:	e0bffc17 	ldw	r2,-16(fp)
   4a9a4:	10800104 	addi	r2,r2,4
   4a9a8:	10800037 	ldwio	r2,0(r2)
   4a9ac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4a9b0:	e0bffd17 	ldw	r2,-12(fp)
   4a9b4:	1080c00c 	andi	r2,r2,768
   4a9b8:	10006a26 	beq	r2,zero,4ab64 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4a9bc:	e0bffd17 	ldw	r2,-12(fp)
   4a9c0:	1080400c 	andi	r2,r2,256
   4a9c4:	10003326 	beq	r2,zero,4aa94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4a9c8:	00800074 	movhi	r2,1
   4a9cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4a9d0:	e0bffb17 	ldw	r2,-20(fp)
   4a9d4:	10800a17 	ldw	r2,40(r2)
   4a9d8:	10800044 	addi	r2,r2,1
   4a9dc:	1081ffcc 	andi	r2,r2,2047
   4a9e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4a9e4:	e0bffb17 	ldw	r2,-20(fp)
   4a9e8:	10c00b17 	ldw	r3,44(r2)
   4a9ec:	e0bffe17 	ldw	r2,-8(fp)
   4a9f0:	18801426 	beq	r3,r2,4aa44 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4a9f4:	e0bffc17 	ldw	r2,-16(fp)
   4a9f8:	10800037 	ldwio	r2,0(r2)
   4a9fc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4aa00:	e0bff917 	ldw	r2,-28(fp)
   4aa04:	10a0000c 	andi	r2,r2,32768
   4aa08:	10001026 	beq	r2,zero,4aa4c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4aa0c:	e0bffb17 	ldw	r2,-20(fp)
   4aa10:	10800a17 	ldw	r2,40(r2)
   4aa14:	e0fff917 	ldw	r3,-28(fp)
   4aa18:	e13ffb17 	ldw	r4,-20(fp)
   4aa1c:	2085883a 	add	r2,r4,r2
   4aa20:	10800e04 	addi	r2,r2,56
   4aa24:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4aa28:	e0bffb17 	ldw	r2,-20(fp)
   4aa2c:	10800a17 	ldw	r2,40(r2)
   4aa30:	10800044 	addi	r2,r2,1
   4aa34:	10c1ffcc 	andi	r3,r2,2047
   4aa38:	e0bffb17 	ldw	r2,-20(fp)
   4aa3c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4aa40:	003fe306 	br	4a9d0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4aa44:	0001883a 	nop
   4aa48:	00000106 	br	4aa50 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4aa4c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4aa50:	e0bff917 	ldw	r2,-28(fp)
   4aa54:	10bfffec 	andhi	r2,r2,65535
   4aa58:	10000e26 	beq	r2,zero,4aa94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4aa5c:	e0bffb17 	ldw	r2,-20(fp)
   4aa60:	10c00817 	ldw	r3,32(r2)
   4aa64:	00bfff84 	movi	r2,-2
   4aa68:	1886703a 	and	r3,r3,r2
   4aa6c:	e0bffb17 	ldw	r2,-20(fp)
   4aa70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4aa74:	e0bffc17 	ldw	r2,-16(fp)
   4aa78:	10800104 	addi	r2,r2,4
   4aa7c:	e0fffb17 	ldw	r3,-20(fp)
   4aa80:	18c00817 	ldw	r3,32(r3)
   4aa84:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4aa88:	e0bffc17 	ldw	r2,-16(fp)
   4aa8c:	10800104 	addi	r2,r2,4
   4aa90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4aa94:	e0bffd17 	ldw	r2,-12(fp)
   4aa98:	1080800c 	andi	r2,r2,512
   4aa9c:	103fbf26 	beq	r2,zero,4a99c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4aaa0:	e0bffd17 	ldw	r2,-12(fp)
   4aaa4:	1004d43a 	srli	r2,r2,16
   4aaa8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4aaac:	00001406 	br	4ab00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4aab0:	e0bffc17 	ldw	r2,-16(fp)
   4aab4:	e0fffb17 	ldw	r3,-20(fp)
   4aab8:	18c00d17 	ldw	r3,52(r3)
   4aabc:	e13ffb17 	ldw	r4,-20(fp)
   4aac0:	20c7883a 	add	r3,r4,r3
   4aac4:	18c20e04 	addi	r3,r3,2104
   4aac8:	18c00003 	ldbu	r3,0(r3)
   4aacc:	18c03fcc 	andi	r3,r3,255
   4aad0:	18c0201c 	xori	r3,r3,128
   4aad4:	18ffe004 	addi	r3,r3,-128
   4aad8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4aadc:	e0bffb17 	ldw	r2,-20(fp)
   4aae0:	10800d17 	ldw	r2,52(r2)
   4aae4:	10800044 	addi	r2,r2,1
   4aae8:	10c1ffcc 	andi	r3,r2,2047
   4aaec:	e0bffb17 	ldw	r2,-20(fp)
   4aaf0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4aaf4:	e0bffa17 	ldw	r2,-24(fp)
   4aaf8:	10bfffc4 	addi	r2,r2,-1
   4aafc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4ab00:	e0bffa17 	ldw	r2,-24(fp)
   4ab04:	10000526 	beq	r2,zero,4ab1c <altera_avalon_jtag_uart_irq+0x1a8>
   4ab08:	e0bffb17 	ldw	r2,-20(fp)
   4ab0c:	10c00d17 	ldw	r3,52(r2)
   4ab10:	e0bffb17 	ldw	r2,-20(fp)
   4ab14:	10800c17 	ldw	r2,48(r2)
   4ab18:	18bfe51e 	bne	r3,r2,4aab0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4ab1c:	e0bffa17 	ldw	r2,-24(fp)
   4ab20:	103f9e26 	beq	r2,zero,4a99c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4ab24:	e0bffb17 	ldw	r2,-20(fp)
   4ab28:	10c00817 	ldw	r3,32(r2)
   4ab2c:	00bfff44 	movi	r2,-3
   4ab30:	1886703a 	and	r3,r3,r2
   4ab34:	e0bffb17 	ldw	r2,-20(fp)
   4ab38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4ab3c:	e0bffb17 	ldw	r2,-20(fp)
   4ab40:	10800017 	ldw	r2,0(r2)
   4ab44:	10800104 	addi	r2,r2,4
   4ab48:	e0fffb17 	ldw	r3,-20(fp)
   4ab4c:	18c00817 	ldw	r3,32(r3)
   4ab50:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ab54:	e0bffc17 	ldw	r2,-16(fp)
   4ab58:	10800104 	addi	r2,r2,4
   4ab5c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4ab60:	003f8e06 	br	4a99c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4ab64:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4ab68:	e037883a 	mov	sp,fp
   4ab6c:	df000017 	ldw	fp,0(sp)
   4ab70:	dec00104 	addi	sp,sp,4
   4ab74:	f800283a 	ret

0004ab78 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4ab78:	defffc04 	addi	sp,sp,-16
   4ab7c:	df000315 	stw	fp,12(sp)
   4ab80:	df000304 	addi	fp,sp,12
   4ab84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4ab88:	e0bfff17 	ldw	r2,-4(fp)
   4ab8c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4ab90:	e0bffd17 	ldw	r2,-12(fp)
   4ab94:	10800017 	ldw	r2,0(r2)
   4ab98:	10800104 	addi	r2,r2,4
   4ab9c:	10800037 	ldwio	r2,0(r2)
   4aba0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4aba4:	e0bffe17 	ldw	r2,-8(fp)
   4aba8:	1081000c 	andi	r2,r2,1024
   4abac:	10000a26 	beq	r2,zero,4abd8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4abb0:	e0bffd17 	ldw	r2,-12(fp)
   4abb4:	10800017 	ldw	r2,0(r2)
   4abb8:	10800104 	addi	r2,r2,4
   4abbc:	e0fffd17 	ldw	r3,-12(fp)
   4abc0:	18c00817 	ldw	r3,32(r3)
   4abc4:	18c10014 	ori	r3,r3,1024
   4abc8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4abcc:	e0bffd17 	ldw	r2,-12(fp)
   4abd0:	10000915 	stw	zero,36(r2)
   4abd4:	00000a06 	br	4ac00 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4abd8:	e0bffd17 	ldw	r2,-12(fp)
   4abdc:	10800917 	ldw	r2,36(r2)
   4abe0:	00e00034 	movhi	r3,32768
   4abe4:	18ffff04 	addi	r3,r3,-4
   4abe8:	18800536 	bltu	r3,r2,4ac00 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4abec:	e0bffd17 	ldw	r2,-12(fp)
   4abf0:	10800917 	ldw	r2,36(r2)
   4abf4:	10c00044 	addi	r3,r2,1
   4abf8:	e0bffd17 	ldw	r2,-12(fp)
   4abfc:	10c00915 	stw	r3,36(r2)
   4ac00:	00800174 	movhi	r2,5
   4ac04:	10bf5404 	addi	r2,r2,-688
   4ac08:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4ac0c:	e037883a 	mov	sp,fp
   4ac10:	df000017 	ldw	fp,0(sp)
   4ac14:	dec00104 	addi	sp,sp,4
   4ac18:	f800283a 	ret

0004ac1c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4ac1c:	defffd04 	addi	sp,sp,-12
   4ac20:	df000215 	stw	fp,8(sp)
   4ac24:	df000204 	addi	fp,sp,8
   4ac28:	e13ffe15 	stw	r4,-8(fp)
   4ac2c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4ac30:	00000506 	br	4ac48 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4ac34:	e0bfff17 	ldw	r2,-4(fp)
   4ac38:	1090000c 	andi	r2,r2,16384
   4ac3c:	10000226 	beq	r2,zero,4ac48 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4ac40:	00bffd44 	movi	r2,-11
   4ac44:	00000b06 	br	4ac74 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4ac48:	e0bffe17 	ldw	r2,-8(fp)
   4ac4c:	10c00d17 	ldw	r3,52(r2)
   4ac50:	e0bffe17 	ldw	r2,-8(fp)
   4ac54:	10800c17 	ldw	r2,48(r2)
   4ac58:	18800526 	beq	r3,r2,4ac70 <altera_avalon_jtag_uart_close+0x54>
   4ac5c:	e0bffe17 	ldw	r2,-8(fp)
   4ac60:	10c00917 	ldw	r3,36(r2)
   4ac64:	e0bffe17 	ldw	r2,-8(fp)
   4ac68:	10800117 	ldw	r2,4(r2)
   4ac6c:	18bff136 	bltu	r3,r2,4ac34 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4ac70:	0005883a 	mov	r2,zero
}
   4ac74:	e037883a 	mov	sp,fp
   4ac78:	df000017 	ldw	fp,0(sp)
   4ac7c:	dec00104 	addi	sp,sp,4
   4ac80:	f800283a 	ret

0004ac84 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4ac84:	defffa04 	addi	sp,sp,-24
   4ac88:	df000515 	stw	fp,20(sp)
   4ac8c:	df000504 	addi	fp,sp,20
   4ac90:	e13ffd15 	stw	r4,-12(fp)
   4ac94:	e17ffe15 	stw	r5,-8(fp)
   4ac98:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4ac9c:	00bff9c4 	movi	r2,-25
   4aca0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4aca4:	e0bffe17 	ldw	r2,-8(fp)
   4aca8:	10da8060 	cmpeqi	r3,r2,27137
   4acac:	1800031e 	bne	r3,zero,4acbc <altera_avalon_jtag_uart_ioctl+0x38>
   4acb0:	109a80a0 	cmpeqi	r2,r2,27138
   4acb4:	1000181e 	bne	r2,zero,4ad18 <altera_avalon_jtag_uart_ioctl+0x94>
   4acb8:	00002606 	br	4ad54 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4acbc:	e0bffd17 	ldw	r2,-12(fp)
   4acc0:	10c00117 	ldw	r3,4(r2)
   4acc4:	00a00034 	movhi	r2,32768
   4acc8:	10bfffc4 	addi	r2,r2,-1
   4accc:	18802226 	beq	r3,r2,4ad58 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   4acd0:	e0bfff17 	ldw	r2,-4(fp)
   4acd4:	10800017 	ldw	r2,0(r2)
   4acd8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4acdc:	e0bffc17 	ldw	r2,-16(fp)
   4ace0:	10800090 	cmplti	r2,r2,2
   4ace4:	1000061e 	bne	r2,zero,4ad00 <altera_avalon_jtag_uart_ioctl+0x7c>
   4ace8:	e0fffc17 	ldw	r3,-16(fp)
   4acec:	00a00034 	movhi	r2,32768
   4acf0:	10bfffc4 	addi	r2,r2,-1
   4acf4:	18800226 	beq	r3,r2,4ad00 <altera_avalon_jtag_uart_ioctl+0x7c>
   4acf8:	e0bffc17 	ldw	r2,-16(fp)
   4acfc:	00000206 	br	4ad08 <altera_avalon_jtag_uart_ioctl+0x84>
   4ad00:	00a00034 	movhi	r2,32768
   4ad04:	10bfff84 	addi	r2,r2,-2
   4ad08:	e0fffd17 	ldw	r3,-12(fp)
   4ad0c:	18800115 	stw	r2,4(r3)
      rc = 0;
   4ad10:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4ad14:	00001006 	br	4ad58 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4ad18:	e0bffd17 	ldw	r2,-12(fp)
   4ad1c:	10c00117 	ldw	r3,4(r2)
   4ad20:	00a00034 	movhi	r2,32768
   4ad24:	10bfffc4 	addi	r2,r2,-1
   4ad28:	18800d26 	beq	r3,r2,4ad60 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4ad2c:	e0bffd17 	ldw	r2,-12(fp)
   4ad30:	10c00917 	ldw	r3,36(r2)
   4ad34:	e0bffd17 	ldw	r2,-12(fp)
   4ad38:	10800117 	ldw	r2,4(r2)
   4ad3c:	1885803a 	cmpltu	r2,r3,r2
   4ad40:	10c03fcc 	andi	r3,r2,255
   4ad44:	e0bfff17 	ldw	r2,-4(fp)
   4ad48:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4ad4c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4ad50:	00000306 	br	4ad60 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   4ad54:	00000306 	br	4ad64 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4ad58:	0001883a 	nop
   4ad5c:	00000106 	br	4ad64 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4ad60:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4ad64:	e0bffb17 	ldw	r2,-20(fp)
}
   4ad68:	e037883a 	mov	sp,fp
   4ad6c:	df000017 	ldw	fp,0(sp)
   4ad70:	dec00104 	addi	sp,sp,4
   4ad74:	f800283a 	ret

0004ad78 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4ad78:	defff304 	addi	sp,sp,-52
   4ad7c:	dfc00c15 	stw	ra,48(sp)
   4ad80:	df000b15 	stw	fp,44(sp)
   4ad84:	df000b04 	addi	fp,sp,44
   4ad88:	e13ffc15 	stw	r4,-16(fp)
   4ad8c:	e17ffd15 	stw	r5,-12(fp)
   4ad90:	e1bffe15 	stw	r6,-8(fp)
   4ad94:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4ad98:	e0bffd17 	ldw	r2,-12(fp)
   4ad9c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4ada0:	00004706 	br	4aec0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4ada4:	e0bffc17 	ldw	r2,-16(fp)
   4ada8:	10800a17 	ldw	r2,40(r2)
   4adac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4adb0:	e0bffc17 	ldw	r2,-16(fp)
   4adb4:	10800b17 	ldw	r2,44(r2)
   4adb8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4adbc:	e0fff717 	ldw	r3,-36(fp)
   4adc0:	e0bff817 	ldw	r2,-32(fp)
   4adc4:	18800536 	bltu	r3,r2,4addc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4adc8:	e0fff717 	ldw	r3,-36(fp)
   4adcc:	e0bff817 	ldw	r2,-32(fp)
   4add0:	1885c83a 	sub	r2,r3,r2
   4add4:	e0bff615 	stw	r2,-40(fp)
   4add8:	00000406 	br	4adec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4addc:	00c20004 	movi	r3,2048
   4ade0:	e0bff817 	ldw	r2,-32(fp)
   4ade4:	1885c83a 	sub	r2,r3,r2
   4ade8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4adec:	e0bff617 	ldw	r2,-40(fp)
   4adf0:	10001e26 	beq	r2,zero,4ae6c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4adf4:	e0fffe17 	ldw	r3,-8(fp)
   4adf8:	e0bff617 	ldw	r2,-40(fp)
   4adfc:	1880022e 	bgeu	r3,r2,4ae08 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4ae00:	e0bffe17 	ldw	r2,-8(fp)
   4ae04:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4ae08:	e0bff817 	ldw	r2,-32(fp)
   4ae0c:	10800e04 	addi	r2,r2,56
   4ae10:	e0fffc17 	ldw	r3,-16(fp)
   4ae14:	1885883a 	add	r2,r3,r2
   4ae18:	e13ff517 	ldw	r4,-44(fp)
   4ae1c:	100b883a 	mov	r5,r2
   4ae20:	e1bff617 	ldw	r6,-40(fp)
   4ae24:	00459800 	call	45980 <memcpy>
      ptr   += n;
   4ae28:	e0fff517 	ldw	r3,-44(fp)
   4ae2c:	e0bff617 	ldw	r2,-40(fp)
   4ae30:	1885883a 	add	r2,r3,r2
   4ae34:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4ae38:	e0fffe17 	ldw	r3,-8(fp)
   4ae3c:	e0bff617 	ldw	r2,-40(fp)
   4ae40:	1885c83a 	sub	r2,r3,r2
   4ae44:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ae48:	e0fff817 	ldw	r3,-32(fp)
   4ae4c:	e0bff617 	ldw	r2,-40(fp)
   4ae50:	1885883a 	add	r2,r3,r2
   4ae54:	10c1ffcc 	andi	r3,r2,2047
   4ae58:	e0bffc17 	ldw	r2,-16(fp)
   4ae5c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4ae60:	e0bffe17 	ldw	r2,-8(fp)
   4ae64:	00bfcf16 	blt	zero,r2,4ada4 <altera_avalon_jtag_uart_read+0x2c>
   4ae68:	00000106 	br	4ae70 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4ae6c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4ae70:	e0fff517 	ldw	r3,-44(fp)
   4ae74:	e0bffd17 	ldw	r2,-12(fp)
   4ae78:	1880141e 	bne	r3,r2,4aecc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4ae7c:	e0bfff17 	ldw	r2,-4(fp)
   4ae80:	1090000c 	andi	r2,r2,16384
   4ae84:	1000131e 	bne	r2,zero,4aed4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4ae88:	0001883a 	nop
   4ae8c:	e0bffc17 	ldw	r2,-16(fp)
   4ae90:	10c00a17 	ldw	r3,40(r2)
   4ae94:	e0bff717 	ldw	r2,-36(fp)
   4ae98:	1880051e 	bne	r3,r2,4aeb0 <altera_avalon_jtag_uart_read+0x138>
   4ae9c:	e0bffc17 	ldw	r2,-16(fp)
   4aea0:	10c00917 	ldw	r3,36(r2)
   4aea4:	e0bffc17 	ldw	r2,-16(fp)
   4aea8:	10800117 	ldw	r2,4(r2)
   4aeac:	18bff736 	bltu	r3,r2,4ae8c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4aeb0:	e0bffc17 	ldw	r2,-16(fp)
   4aeb4:	10c00a17 	ldw	r3,40(r2)
   4aeb8:	e0bff717 	ldw	r2,-36(fp)
   4aebc:	18800726 	beq	r3,r2,4aedc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4aec0:	e0bffe17 	ldw	r2,-8(fp)
   4aec4:	00bfb716 	blt	zero,r2,4ada4 <altera_avalon_jtag_uart_read+0x2c>
   4aec8:	00000506 	br	4aee0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4aecc:	0001883a 	nop
   4aed0:	00000306 	br	4aee0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4aed4:	0001883a 	nop
   4aed8:	00000106 	br	4aee0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4aedc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4aee0:	e0fff517 	ldw	r3,-44(fp)
   4aee4:	e0bffd17 	ldw	r2,-12(fp)
   4aee8:	18801726 	beq	r3,r2,4af48 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4aeec:	0005303a 	rdctl	r2,status
   4aef0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4aef4:	e0fffa17 	ldw	r3,-24(fp)
   4aef8:	00bfff84 	movi	r2,-2
   4aefc:	1884703a 	and	r2,r3,r2
   4af00:	1001703a 	wrctl	status,r2
  
  return context;
   4af04:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4af08:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4af0c:	e0bffc17 	ldw	r2,-16(fp)
   4af10:	10800817 	ldw	r2,32(r2)
   4af14:	10c00054 	ori	r3,r2,1
   4af18:	e0bffc17 	ldw	r2,-16(fp)
   4af1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4af20:	e0bffc17 	ldw	r2,-16(fp)
   4af24:	10800017 	ldw	r2,0(r2)
   4af28:	10800104 	addi	r2,r2,4
   4af2c:	e0fffc17 	ldw	r3,-16(fp)
   4af30:	18c00817 	ldw	r3,32(r3)
   4af34:	10c00035 	stwio	r3,0(r2)
   4af38:	e0bff917 	ldw	r2,-28(fp)
   4af3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4af40:	e0bffb17 	ldw	r2,-20(fp)
   4af44:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4af48:	e0fff517 	ldw	r3,-44(fp)
   4af4c:	e0bffd17 	ldw	r2,-12(fp)
   4af50:	18800426 	beq	r3,r2,4af64 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   4af54:	e0fff517 	ldw	r3,-44(fp)
   4af58:	e0bffd17 	ldw	r2,-12(fp)
   4af5c:	1885c83a 	sub	r2,r3,r2
   4af60:	00000606 	br	4af7c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   4af64:	e0bfff17 	ldw	r2,-4(fp)
   4af68:	1090000c 	andi	r2,r2,16384
   4af6c:	10000226 	beq	r2,zero,4af78 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   4af70:	00bffd44 	movi	r2,-11
   4af74:	00000106 	br	4af7c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   4af78:	00bffec4 	movi	r2,-5
}
   4af7c:	e037883a 	mov	sp,fp
   4af80:	dfc00117 	ldw	ra,4(sp)
   4af84:	df000017 	ldw	fp,0(sp)
   4af88:	dec00204 	addi	sp,sp,8
   4af8c:	f800283a 	ret

0004af90 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4af90:	defff304 	addi	sp,sp,-52
   4af94:	dfc00c15 	stw	ra,48(sp)
   4af98:	df000b15 	stw	fp,44(sp)
   4af9c:	df000b04 	addi	fp,sp,44
   4afa0:	e13ffc15 	stw	r4,-16(fp)
   4afa4:	e17ffd15 	stw	r5,-12(fp)
   4afa8:	e1bffe15 	stw	r6,-8(fp)
   4afac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4afb0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4afb4:	e0bffd17 	ldw	r2,-12(fp)
   4afb8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4afbc:	00003706 	br	4b09c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4afc0:	e0bffc17 	ldw	r2,-16(fp)
   4afc4:	10800c17 	ldw	r2,48(r2)
   4afc8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4afcc:	e0bffc17 	ldw	r2,-16(fp)
   4afd0:	10800d17 	ldw	r2,52(r2)
   4afd4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4afd8:	e0fff817 	ldw	r3,-32(fp)
   4afdc:	e0bff517 	ldw	r2,-44(fp)
   4afe0:	1880062e 	bgeu	r3,r2,4affc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4afe4:	e0fff517 	ldw	r3,-44(fp)
   4afe8:	e0bff817 	ldw	r2,-32(fp)
   4afec:	1885c83a 	sub	r2,r3,r2
   4aff0:	10bfffc4 	addi	r2,r2,-1
   4aff4:	e0bff615 	stw	r2,-40(fp)
   4aff8:	00000b06 	br	4b028 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4affc:	e0bff517 	ldw	r2,-44(fp)
   4b000:	10000526 	beq	r2,zero,4b018 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4b004:	00c20004 	movi	r3,2048
   4b008:	e0bff817 	ldw	r2,-32(fp)
   4b00c:	1885c83a 	sub	r2,r3,r2
   4b010:	e0bff615 	stw	r2,-40(fp)
   4b014:	00000406 	br	4b028 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4b018:	00c1ffc4 	movi	r3,2047
   4b01c:	e0bff817 	ldw	r2,-32(fp)
   4b020:	1885c83a 	sub	r2,r3,r2
   4b024:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4b028:	e0bff617 	ldw	r2,-40(fp)
   4b02c:	10001e26 	beq	r2,zero,4b0a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4b030:	e0fffe17 	ldw	r3,-8(fp)
   4b034:	e0bff617 	ldw	r2,-40(fp)
   4b038:	1880022e 	bgeu	r3,r2,4b044 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4b03c:	e0bffe17 	ldw	r2,-8(fp)
   4b040:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4b044:	e0bff817 	ldw	r2,-32(fp)
   4b048:	10820e04 	addi	r2,r2,2104
   4b04c:	e0fffc17 	ldw	r3,-16(fp)
   4b050:	1885883a 	add	r2,r3,r2
   4b054:	1009883a 	mov	r4,r2
   4b058:	e17ffd17 	ldw	r5,-12(fp)
   4b05c:	e1bff617 	ldw	r6,-40(fp)
   4b060:	00459800 	call	45980 <memcpy>
      ptr   += n;
   4b064:	e0fffd17 	ldw	r3,-12(fp)
   4b068:	e0bff617 	ldw	r2,-40(fp)
   4b06c:	1885883a 	add	r2,r3,r2
   4b070:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4b074:	e0fffe17 	ldw	r3,-8(fp)
   4b078:	e0bff617 	ldw	r2,-40(fp)
   4b07c:	1885c83a 	sub	r2,r3,r2
   4b080:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b084:	e0fff817 	ldw	r3,-32(fp)
   4b088:	e0bff617 	ldw	r2,-40(fp)
   4b08c:	1885883a 	add	r2,r3,r2
   4b090:	10c1ffcc 	andi	r3,r2,2047
   4b094:	e0bffc17 	ldw	r2,-16(fp)
   4b098:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b09c:	e0bffe17 	ldw	r2,-8(fp)
   4b0a0:	00bfc716 	blt	zero,r2,4afc0 <altera_avalon_jtag_uart_write+0x30>
   4b0a4:	00000106 	br	4b0ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4b0a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b0ac:	0005303a 	rdctl	r2,status
   4b0b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b0b4:	e0fffa17 	ldw	r3,-24(fp)
   4b0b8:	00bfff84 	movi	r2,-2
   4b0bc:	1884703a 	and	r2,r3,r2
   4b0c0:	1001703a 	wrctl	status,r2
  
  return context;
   4b0c4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4b0c8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b0cc:	e0bffc17 	ldw	r2,-16(fp)
   4b0d0:	10800817 	ldw	r2,32(r2)
   4b0d4:	10c00094 	ori	r3,r2,2
   4b0d8:	e0bffc17 	ldw	r2,-16(fp)
   4b0dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b0e0:	e0bffc17 	ldw	r2,-16(fp)
   4b0e4:	10800017 	ldw	r2,0(r2)
   4b0e8:	10800104 	addi	r2,r2,4
   4b0ec:	e0fffc17 	ldw	r3,-16(fp)
   4b0f0:	18c00817 	ldw	r3,32(r3)
   4b0f4:	10c00035 	stwio	r3,0(r2)
   4b0f8:	e0bff917 	ldw	r2,-28(fp)
   4b0fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b100:	e0bffb17 	ldw	r2,-20(fp)
   4b104:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4b108:	e0bffe17 	ldw	r2,-8(fp)
   4b10c:	0080110e 	bge	zero,r2,4b154 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4b110:	e0bfff17 	ldw	r2,-4(fp)
   4b114:	1090000c 	andi	r2,r2,16384
   4b118:	1000111e 	bne	r2,zero,4b160 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4b11c:	0001883a 	nop
   4b120:	e0bffc17 	ldw	r2,-16(fp)
   4b124:	10c00d17 	ldw	r3,52(r2)
   4b128:	e0bff517 	ldw	r2,-44(fp)
   4b12c:	1880051e 	bne	r3,r2,4b144 <altera_avalon_jtag_uart_write+0x1b4>
   4b130:	e0bffc17 	ldw	r2,-16(fp)
   4b134:	10c00917 	ldw	r3,36(r2)
   4b138:	e0bffc17 	ldw	r2,-16(fp)
   4b13c:	10800117 	ldw	r2,4(r2)
   4b140:	18bff736 	bltu	r3,r2,4b120 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4b144:	e0bffc17 	ldw	r2,-16(fp)
   4b148:	10c00d17 	ldw	r3,52(r2)
   4b14c:	e0bff517 	ldw	r2,-44(fp)
   4b150:	18800526 	beq	r3,r2,4b168 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4b154:	e0bffe17 	ldw	r2,-8(fp)
   4b158:	00bfd016 	blt	zero,r2,4b09c <altera_avalon_jtag_uart_write+0x10c>
   4b15c:	00000306 	br	4b16c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4b160:	0001883a 	nop
   4b164:	00000106 	br	4b16c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   4b168:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4b16c:	e0fffd17 	ldw	r3,-12(fp)
   4b170:	e0bff717 	ldw	r2,-36(fp)
   4b174:	18800426 	beq	r3,r2,4b188 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4b178:	e0fffd17 	ldw	r3,-12(fp)
   4b17c:	e0bff717 	ldw	r2,-36(fp)
   4b180:	1885c83a 	sub	r2,r3,r2
   4b184:	00000606 	br	4b1a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4b188:	e0bfff17 	ldw	r2,-4(fp)
   4b18c:	1090000c 	andi	r2,r2,16384
   4b190:	10000226 	beq	r2,zero,4b19c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4b194:	00bffd44 	movi	r2,-11
   4b198:	00000106 	br	4b1a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4b19c:	00bffec4 	movi	r2,-5
}
   4b1a0:	e037883a 	mov	sp,fp
   4b1a4:	dfc00117 	ldw	ra,4(sp)
   4b1a8:	df000017 	ldw	fp,0(sp)
   4b1ac:	dec00204 	addi	sp,sp,8
   4b1b0:	f800283a 	ret

0004b1b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4b1b4:	defff504 	addi	sp,sp,-44
   4b1b8:	df000a15 	stw	fp,40(sp)
   4b1bc:	df000a04 	addi	fp,sp,40
   4b1c0:	e13ffc15 	stw	r4,-16(fp)
   4b1c4:	e17ffd15 	stw	r5,-12(fp)
   4b1c8:	e1bffe15 	stw	r6,-8(fp)
   4b1cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4b1d0:	e03ff615 	stw	zero,-40(fp)
   4b1d4:	00800174 	movhi	r2,5
   4b1d8:	10bf5404 	addi	r2,r2,-688
   4b1dc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4b1e0:	10003f26 	beq	r2,zero,4b2e0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4b1e4:	e0bffc17 	ldw	r2,-16(fp)
   4b1e8:	10003b26 	beq	r2,zero,4b2d8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4b1ec:	e0bffc17 	ldw	r2,-16(fp)
   4b1f0:	e0fffe17 	ldw	r3,-8(fp)
   4b1f4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4b1f8:	e0bffc17 	ldw	r2,-16(fp)
   4b1fc:	e0ffff17 	ldw	r3,-4(fp)
   4b200:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b204:	0005303a 	rdctl	r2,status
   4b208:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b20c:	e0fff817 	ldw	r3,-32(fp)
   4b210:	00bfff84 	movi	r2,-2
   4b214:	1884703a 	and	r2,r3,r2
   4b218:	1001703a 	wrctl	status,r2
  
  return context;
   4b21c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4b220:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4b224:	00800174 	movhi	r2,5
   4b228:	10bf5504 	addi	r2,r2,-684
   4b22c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4b230:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4b234:	e0fffd17 	ldw	r3,-12(fp)
   4b238:	e0bff617 	ldw	r2,-40(fp)
   4b23c:	1885883a 	add	r2,r3,r2
   4b240:	10c00044 	addi	r3,r2,1
   4b244:	e0bffc17 	ldw	r2,-16(fp)
   4b248:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4b24c:	e0bffc17 	ldw	r2,-16(fp)
   4b250:	10c00217 	ldw	r3,8(r2)
   4b254:	e0bff617 	ldw	r2,-40(fp)
   4b258:	1880042e 	bgeu	r3,r2,4b26c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4b25c:	e0bffc17 	ldw	r2,-16(fp)
   4b260:	00c00044 	movi	r3,1
   4b264:	10c00405 	stb	r3,16(r2)
   4b268:	00000206 	br	4b274 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4b26c:	e0bffc17 	ldw	r2,-16(fp)
   4b270:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4b274:	e0bffc17 	ldw	r2,-16(fp)
   4b278:	00c00174 	movhi	r3,5
   4b27c:	18f8b104 	addi	r3,r3,-7484
   4b280:	e0fff915 	stw	r3,-28(fp)
   4b284:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4b288:	e0bffa17 	ldw	r2,-24(fp)
   4b28c:	e0fff917 	ldw	r3,-28(fp)
   4b290:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4b294:	e0bff917 	ldw	r2,-28(fp)
   4b298:	10c00017 	ldw	r3,0(r2)
   4b29c:	e0bffa17 	ldw	r2,-24(fp)
   4b2a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4b2a4:	e0bff917 	ldw	r2,-28(fp)
   4b2a8:	10800017 	ldw	r2,0(r2)
   4b2ac:	e0fffa17 	ldw	r3,-24(fp)
   4b2b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4b2b4:	e0bff917 	ldw	r2,-28(fp)
   4b2b8:	e0fffa17 	ldw	r3,-24(fp)
   4b2bc:	10c00015 	stw	r3,0(r2)
   4b2c0:	e0bff717 	ldw	r2,-36(fp)
   4b2c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b2c8:	e0bffb17 	ldw	r2,-20(fp)
   4b2cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4b2d0:	0005883a 	mov	r2,zero
   4b2d4:	00000306 	br	4b2e4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4b2d8:	00bffa84 	movi	r2,-22
   4b2dc:	00000106 	br	4b2e4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4b2e0:	00bfde84 	movi	r2,-134
  }
}
   4b2e4:	e037883a 	mov	sp,fp
   4b2e8:	df000017 	ldw	fp,0(sp)
   4b2ec:	dec00104 	addi	sp,sp,4
   4b2f0:	f800283a 	ret

0004b2f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   4b2f4:	defffa04 	addi	sp,sp,-24
   4b2f8:	dfc00515 	stw	ra,20(sp)
   4b2fc:	df000415 	stw	fp,16(sp)
   4b300:	df000404 	addi	fp,sp,16
   4b304:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   4b308:	008000c4 	movi	r2,3
   4b30c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   4b310:	e0fffd17 	ldw	r3,-12(fp)
   4b314:	008003f4 	movhi	r2,15
   4b318:	10909004 	addi	r2,r2,16960
   4b31c:	1885383a 	mul	r2,r3,r2
   4b320:	0100bef4 	movhi	r4,763
   4b324:	213c2004 	addi	r4,r4,-3968
   4b328:	100b883a 	mov	r5,r2
   4b32c:	00406e00 	call	406e0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4b330:	01200034 	movhi	r4,32768
   4b334:	213fffc4 	addi	r4,r4,-1
   4b338:	100b883a 	mov	r5,r2
   4b33c:	00406e00 	call	406e0 <__udivsi3>
   4b340:	e13fff17 	ldw	r4,-4(fp)
   4b344:	100b883a 	mov	r5,r2
   4b348:	00406e00 	call	406e0 <__udivsi3>
   4b34c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4b350:	e0bffe17 	ldw	r2,-8(fp)
   4b354:	10002926 	beq	r2,zero,4b3fc <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   4b358:	e03ffc15 	stw	zero,-16(fp)
   4b35c:	00001606 	br	4b3b8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4b360:	00a00034 	movhi	r2,32768
   4b364:	10bfffc4 	addi	r2,r2,-1
   4b368:	10bfffc4 	addi	r2,r2,-1
   4b36c:	103ffe1e 	bne	r2,zero,4b368 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   4b370:	e0fffd17 	ldw	r3,-12(fp)
   4b374:	008003f4 	movhi	r2,15
   4b378:	10909004 	addi	r2,r2,16960
   4b37c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   4b380:	0100bef4 	movhi	r4,763
   4b384:	213c2004 	addi	r4,r4,-3968
   4b388:	100b883a 	mov	r5,r2
   4b38c:	00406e00 	call	406e0 <__udivsi3>
   4b390:	01200034 	movhi	r4,32768
   4b394:	213fffc4 	addi	r4,r4,-1
   4b398:	100b883a 	mov	r5,r2
   4b39c:	00406e00 	call	406e0 <__udivsi3>
   4b3a0:	e0ffff17 	ldw	r3,-4(fp)
   4b3a4:	1885c83a 	sub	r2,r3,r2
   4b3a8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4b3ac:	e0bffc17 	ldw	r2,-16(fp)
   4b3b0:	10800044 	addi	r2,r2,1
   4b3b4:	e0bffc15 	stw	r2,-16(fp)
   4b3b8:	e0fffc17 	ldw	r3,-16(fp)
   4b3bc:	e0bffe17 	ldw	r2,-8(fp)
   4b3c0:	18bfe716 	blt	r3,r2,4b360 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4b3c4:	e0fffd17 	ldw	r3,-12(fp)
   4b3c8:	008003f4 	movhi	r2,15
   4b3cc:	10909004 	addi	r2,r2,16960
   4b3d0:	1885383a 	mul	r2,r3,r2
   4b3d4:	0100bef4 	movhi	r4,763
   4b3d8:	213c2004 	addi	r4,r4,-3968
   4b3dc:	100b883a 	mov	r5,r2
   4b3e0:	00406e00 	call	406e0 <__udivsi3>
   4b3e4:	1007883a 	mov	r3,r2
   4b3e8:	e0bfff17 	ldw	r2,-4(fp)
   4b3ec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4b3f0:	10bfffc4 	addi	r2,r2,-1
   4b3f4:	103ffe1e 	bne	r2,zero,4b3f0 <alt_busy_sleep+0xfc>
   4b3f8:	00000d06 	br	4b430 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4b3fc:	e0fffd17 	ldw	r3,-12(fp)
   4b400:	008003f4 	movhi	r2,15
   4b404:	10909004 	addi	r2,r2,16960
   4b408:	1885383a 	mul	r2,r3,r2
   4b40c:	0100bef4 	movhi	r4,763
   4b410:	213c2004 	addi	r4,r4,-3968
   4b414:	100b883a 	mov	r5,r2
   4b418:	00406e00 	call	406e0 <__udivsi3>
   4b41c:	1007883a 	mov	r3,r2
   4b420:	e0bfff17 	ldw	r2,-4(fp)
   4b424:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4b428:	10bfffc4 	addi	r2,r2,-1
   4b42c:	00bffe16 	blt	zero,r2,4b428 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   4b430:	0005883a 	mov	r2,zero
}
   4b434:	e037883a 	mov	sp,fp
   4b438:	dfc00117 	ldw	ra,4(sp)
   4b43c:	df000017 	ldw	fp,0(sp)
   4b440:	dec00204 	addi	sp,sp,8
   4b444:	f800283a 	ret

0004b448 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4b448:	defffe04 	addi	sp,sp,-8
   4b44c:	df000115 	stw	fp,4(sp)
   4b450:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4b454:	e03fff15 	stw	zero,-4(fp)
   4b458:	00000506 	br	4b470 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4b45c:	e0bfff17 	ldw	r2,-4(fp)
   4b460:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4b464:	e0bfff17 	ldw	r2,-4(fp)
   4b468:	10800804 	addi	r2,r2,32
   4b46c:	e0bfff15 	stw	r2,-4(fp)
   4b470:	e0bfff17 	ldw	r2,-4(fp)
   4b474:	10820030 	cmpltui	r2,r2,2048
   4b478:	103ff81e 	bne	r2,zero,4b45c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4b47c:	e037883a 	mov	sp,fp
   4b480:	df000017 	ldw	fp,0(sp)
   4b484:	dec00104 	addi	sp,sp,4
   4b488:	f800283a 	ret

0004b48c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b48c:	defffe04 	addi	sp,sp,-8
   4b490:	dfc00115 	stw	ra,4(sp)
   4b494:	df000015 	stw	fp,0(sp)
   4b498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b49c:	00800174 	movhi	r2,5
   4b4a0:	10b8ae04 	addi	r2,r2,-7496
   4b4a4:	10800017 	ldw	r2,0(r2)
   4b4a8:	10000526 	beq	r2,zero,4b4c0 <alt_get_errno+0x34>
   4b4ac:	00800174 	movhi	r2,5
   4b4b0:	10b8ae04 	addi	r2,r2,-7496
   4b4b4:	10800017 	ldw	r2,0(r2)
   4b4b8:	103ee83a 	callr	r2
   4b4bc:	00000206 	br	4b4c8 <alt_get_errno+0x3c>
   4b4c0:	00800174 	movhi	r2,5
   4b4c4:	10bf4f04 	addi	r2,r2,-708
}
   4b4c8:	e037883a 	mov	sp,fp
   4b4cc:	dfc00117 	ldw	ra,4(sp)
   4b4d0:	df000017 	ldw	fp,0(sp)
   4b4d4:	dec00204 	addi	sp,sp,8
   4b4d8:	f800283a 	ret

0004b4dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4b4dc:	defffa04 	addi	sp,sp,-24
   4b4e0:	dfc00515 	stw	ra,20(sp)
   4b4e4:	df000415 	stw	fp,16(sp)
   4b4e8:	df000404 	addi	fp,sp,16
   4b4ec:	e13ffe15 	stw	r4,-8(fp)
   4b4f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4b4f4:	e0bffe17 	ldw	r2,-8(fp)
   4b4f8:	10000326 	beq	r2,zero,4b508 <alt_dev_llist_insert+0x2c>
   4b4fc:	e0bffe17 	ldw	r2,-8(fp)
   4b500:	10800217 	ldw	r2,8(r2)
   4b504:	1000051e 	bne	r2,zero,4b51c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   4b508:	004b48c0 	call	4b48c <alt_get_errno>
   4b50c:	00c00584 	movi	r3,22
   4b510:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4b514:	00bffa84 	movi	r2,-22
   4b518:	00001306 	br	4b568 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4b51c:	e0bffe17 	ldw	r2,-8(fp)
   4b520:	e0ffff17 	ldw	r3,-4(fp)
   4b524:	e0fffc15 	stw	r3,-16(fp)
   4b528:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4b52c:	e0bffd17 	ldw	r2,-12(fp)
   4b530:	e0fffc17 	ldw	r3,-16(fp)
   4b534:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4b538:	e0bffc17 	ldw	r2,-16(fp)
   4b53c:	10c00017 	ldw	r3,0(r2)
   4b540:	e0bffd17 	ldw	r2,-12(fp)
   4b544:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4b548:	e0bffc17 	ldw	r2,-16(fp)
   4b54c:	10800017 	ldw	r2,0(r2)
   4b550:	e0fffd17 	ldw	r3,-12(fp)
   4b554:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4b558:	e0bffc17 	ldw	r2,-16(fp)
   4b55c:	e0fffd17 	ldw	r3,-12(fp)
   4b560:	10c00015 	stw	r3,0(r2)

  return 0;  
   4b564:	0005883a 	mov	r2,zero
}
   4b568:	e037883a 	mov	sp,fp
   4b56c:	dfc00117 	ldw	ra,4(sp)
   4b570:	df000017 	ldw	fp,0(sp)
   4b574:	dec00204 	addi	sp,sp,8
   4b578:	f800283a 	ret

0004b57c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4b57c:	defffd04 	addi	sp,sp,-12
   4b580:	dfc00215 	stw	ra,8(sp)
   4b584:	df000115 	stw	fp,4(sp)
   4b588:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4b58c:	00800174 	movhi	r2,5
   4b590:	10b15104 	addi	r2,r2,-15036
   4b594:	e0bfff15 	stw	r2,-4(fp)
   4b598:	00000606 	br	4b5b4 <_do_ctors+0x38>
        (*ctor) (); 
   4b59c:	e0bfff17 	ldw	r2,-4(fp)
   4b5a0:	10800017 	ldw	r2,0(r2)
   4b5a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4b5a8:	e0bfff17 	ldw	r2,-4(fp)
   4b5ac:	10bfff04 	addi	r2,r2,-4
   4b5b0:	e0bfff15 	stw	r2,-4(fp)
   4b5b4:	e0ffff17 	ldw	r3,-4(fp)
   4b5b8:	00800174 	movhi	r2,5
   4b5bc:	10b15204 	addi	r2,r2,-15032
   4b5c0:	18bff62e 	bgeu	r3,r2,4b59c <_do_ctors+0x20>
        (*ctor) (); 
}
   4b5c4:	e037883a 	mov	sp,fp
   4b5c8:	dfc00117 	ldw	ra,4(sp)
   4b5cc:	df000017 	ldw	fp,0(sp)
   4b5d0:	dec00204 	addi	sp,sp,8
   4b5d4:	f800283a 	ret

0004b5d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4b5d8:	defffd04 	addi	sp,sp,-12
   4b5dc:	dfc00215 	stw	ra,8(sp)
   4b5e0:	df000115 	stw	fp,4(sp)
   4b5e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4b5e8:	00800174 	movhi	r2,5
   4b5ec:	10b15104 	addi	r2,r2,-15036
   4b5f0:	e0bfff15 	stw	r2,-4(fp)
   4b5f4:	00000606 	br	4b610 <_do_dtors+0x38>
        (*dtor) (); 
   4b5f8:	e0bfff17 	ldw	r2,-4(fp)
   4b5fc:	10800017 	ldw	r2,0(r2)
   4b600:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4b604:	e0bfff17 	ldw	r2,-4(fp)
   4b608:	10bfff04 	addi	r2,r2,-4
   4b60c:	e0bfff15 	stw	r2,-4(fp)
   4b610:	e0ffff17 	ldw	r3,-4(fp)
   4b614:	00800174 	movhi	r2,5
   4b618:	10b15204 	addi	r2,r2,-15032
   4b61c:	18bff62e 	bgeu	r3,r2,4b5f8 <_do_dtors+0x20>
        (*dtor) (); 
}
   4b620:	e037883a 	mov	sp,fp
   4b624:	dfc00117 	ldw	ra,4(sp)
   4b628:	df000017 	ldw	fp,0(sp)
   4b62c:	dec00204 	addi	sp,sp,8
   4b630:	f800283a 	ret

0004b634 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4b634:	defffe04 	addi	sp,sp,-8
   4b638:	dfc00115 	stw	ra,4(sp)
   4b63c:	df000015 	stw	fp,0(sp)
   4b640:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4b644:	0009883a 	mov	r4,zero
   4b648:	01440004 	movi	r5,4096
   4b64c:	004c0e80 	call	4c0e8 <alt_icache_flush>
#endif
}
   4b650:	e037883a 	mov	sp,fp
   4b654:	dfc00117 	ldw	ra,4(sp)
   4b658:	df000017 	ldw	fp,0(sp)
   4b65c:	dec00204 	addi	sp,sp,8
   4b660:	f800283a 	ret

0004b664 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4b664:	defff904 	addi	sp,sp,-28
   4b668:	dfc00615 	stw	ra,24(sp)
   4b66c:	df000515 	stw	fp,20(sp)
   4b670:	df000504 	addi	fp,sp,20
   4b674:	e13ffc15 	stw	r4,-16(fp)
   4b678:	e17ffd15 	stw	r5,-12(fp)
   4b67c:	e1bffe15 	stw	r6,-8(fp)
   4b680:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4b684:	e0800217 	ldw	r2,8(fp)
   4b688:	d8800015 	stw	r2,0(sp)
   4b68c:	e13ffc17 	ldw	r4,-16(fp)
   4b690:	e17ffd17 	ldw	r5,-12(fp)
   4b694:	e1bffe17 	ldw	r6,-8(fp)
   4b698:	e1ffff17 	ldw	r7,-4(fp)
   4b69c:	004b83c0 	call	4b83c <alt_iic_isr_register>
}  
   4b6a0:	e037883a 	mov	sp,fp
   4b6a4:	dfc00117 	ldw	ra,4(sp)
   4b6a8:	df000017 	ldw	fp,0(sp)
   4b6ac:	dec00204 	addi	sp,sp,8
   4b6b0:	f800283a 	ret

0004b6b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4b6b4:	defff904 	addi	sp,sp,-28
   4b6b8:	df000615 	stw	fp,24(sp)
   4b6bc:	df000604 	addi	fp,sp,24
   4b6c0:	e13ffe15 	stw	r4,-8(fp)
   4b6c4:	e17fff15 	stw	r5,-4(fp)
   4b6c8:	e0bfff17 	ldw	r2,-4(fp)
   4b6cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b6d0:	0005303a 	rdctl	r2,status
   4b6d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b6d8:	e0fffb17 	ldw	r3,-20(fp)
   4b6dc:	00bfff84 	movi	r2,-2
   4b6e0:	1884703a 	and	r2,r3,r2
   4b6e4:	1001703a 	wrctl	status,r2
  
  return context;
   4b6e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4b6ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4b6f0:	e0bffa17 	ldw	r2,-24(fp)
   4b6f4:	00c00044 	movi	r3,1
   4b6f8:	1884983a 	sll	r2,r3,r2
   4b6fc:	1007883a 	mov	r3,r2
   4b700:	00800174 	movhi	r2,5
   4b704:	10bf5304 	addi	r2,r2,-692
   4b708:	10800017 	ldw	r2,0(r2)
   4b70c:	1886b03a 	or	r3,r3,r2
   4b710:	00800174 	movhi	r2,5
   4b714:	10bf5304 	addi	r2,r2,-692
   4b718:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4b71c:	00800174 	movhi	r2,5
   4b720:	10bf5304 	addi	r2,r2,-692
   4b724:	10800017 	ldw	r2,0(r2)
   4b728:	100170fa 	wrctl	ienable,r2
   4b72c:	e0bffc17 	ldw	r2,-16(fp)
   4b730:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b734:	e0bffd17 	ldw	r2,-12(fp)
   4b738:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4b73c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4b740:	e037883a 	mov	sp,fp
   4b744:	df000017 	ldw	fp,0(sp)
   4b748:	dec00104 	addi	sp,sp,4
   4b74c:	f800283a 	ret

0004b750 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4b750:	defff904 	addi	sp,sp,-28
   4b754:	df000615 	stw	fp,24(sp)
   4b758:	df000604 	addi	fp,sp,24
   4b75c:	e13ffe15 	stw	r4,-8(fp)
   4b760:	e17fff15 	stw	r5,-4(fp)
   4b764:	e0bfff17 	ldw	r2,-4(fp)
   4b768:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b76c:	0005303a 	rdctl	r2,status
   4b770:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b774:	e0fffb17 	ldw	r3,-20(fp)
   4b778:	00bfff84 	movi	r2,-2
   4b77c:	1884703a 	and	r2,r3,r2
   4b780:	1001703a 	wrctl	status,r2
  
  return context;
   4b784:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4b788:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4b78c:	e0bffa17 	ldw	r2,-24(fp)
   4b790:	00c00044 	movi	r3,1
   4b794:	1884983a 	sll	r2,r3,r2
   4b798:	0084303a 	nor	r2,zero,r2
   4b79c:	1007883a 	mov	r3,r2
   4b7a0:	00800174 	movhi	r2,5
   4b7a4:	10bf5304 	addi	r2,r2,-692
   4b7a8:	10800017 	ldw	r2,0(r2)
   4b7ac:	1886703a 	and	r3,r3,r2
   4b7b0:	00800174 	movhi	r2,5
   4b7b4:	10bf5304 	addi	r2,r2,-692
   4b7b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4b7bc:	00800174 	movhi	r2,5
   4b7c0:	10bf5304 	addi	r2,r2,-692
   4b7c4:	10800017 	ldw	r2,0(r2)
   4b7c8:	100170fa 	wrctl	ienable,r2
   4b7cc:	e0bffc17 	ldw	r2,-16(fp)
   4b7d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b7d4:	e0bffd17 	ldw	r2,-12(fp)
   4b7d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4b7dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4b7e0:	e037883a 	mov	sp,fp
   4b7e4:	df000017 	ldw	fp,0(sp)
   4b7e8:	dec00104 	addi	sp,sp,4
   4b7ec:	f800283a 	ret

0004b7f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4b7f0:	defffc04 	addi	sp,sp,-16
   4b7f4:	df000315 	stw	fp,12(sp)
   4b7f8:	df000304 	addi	fp,sp,12
   4b7fc:	e13ffe15 	stw	r4,-8(fp)
   4b800:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4b804:	000530fa 	rdctl	r2,ienable
   4b808:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4b80c:	e0bfff17 	ldw	r2,-4(fp)
   4b810:	00c00044 	movi	r3,1
   4b814:	1884983a 	sll	r2,r3,r2
   4b818:	1007883a 	mov	r3,r2
   4b81c:	e0bffd17 	ldw	r2,-12(fp)
   4b820:	1884703a 	and	r2,r3,r2
   4b824:	1004c03a 	cmpne	r2,r2,zero
   4b828:	10803fcc 	andi	r2,r2,255
}
   4b82c:	e037883a 	mov	sp,fp
   4b830:	df000017 	ldw	fp,0(sp)
   4b834:	dec00104 	addi	sp,sp,4
   4b838:	f800283a 	ret

0004b83c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4b83c:	defff504 	addi	sp,sp,-44
   4b840:	dfc00a15 	stw	ra,40(sp)
   4b844:	df000915 	stw	fp,36(sp)
   4b848:	df000904 	addi	fp,sp,36
   4b84c:	e13ffc15 	stw	r4,-16(fp)
   4b850:	e17ffd15 	stw	r5,-12(fp)
   4b854:	e1bffe15 	stw	r6,-8(fp)
   4b858:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4b85c:	00bffa84 	movi	r2,-22
   4b860:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4b864:	e0bffd17 	ldw	r2,-12(fp)
   4b868:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4b86c:	e0bff817 	ldw	r2,-32(fp)
   4b870:	10800808 	cmpgei	r2,r2,32
   4b874:	1000271e 	bne	r2,zero,4b914 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b878:	0005303a 	rdctl	r2,status
   4b87c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b880:	e0fffa17 	ldw	r3,-24(fp)
   4b884:	00bfff84 	movi	r2,-2
   4b888:	1884703a 	and	r2,r3,r2
   4b88c:	1001703a 	wrctl	status,r2
  
  return context;
   4b890:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4b894:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4b898:	00c00174 	movhi	r3,5
   4b89c:	18ff6004 	addi	r3,r3,-640
   4b8a0:	e0bff817 	ldw	r2,-32(fp)
   4b8a4:	100490fa 	slli	r2,r2,3
   4b8a8:	1885883a 	add	r2,r3,r2
   4b8ac:	e0fffe17 	ldw	r3,-8(fp)
   4b8b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4b8b4:	00c00174 	movhi	r3,5
   4b8b8:	18ff6004 	addi	r3,r3,-640
   4b8bc:	e0bff817 	ldw	r2,-32(fp)
   4b8c0:	100490fa 	slli	r2,r2,3
   4b8c4:	1885883a 	add	r2,r3,r2
   4b8c8:	10800104 	addi	r2,r2,4
   4b8cc:	e0ffff17 	ldw	r3,-4(fp)
   4b8d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4b8d4:	e0bffe17 	ldw	r2,-8(fp)
   4b8d8:	10000526 	beq	r2,zero,4b8f0 <alt_iic_isr_register+0xb4>
   4b8dc:	e0bff817 	ldw	r2,-32(fp)
   4b8e0:	e13ffc17 	ldw	r4,-16(fp)
   4b8e4:	100b883a 	mov	r5,r2
   4b8e8:	004b6b40 	call	4b6b4 <alt_ic_irq_enable>
   4b8ec:	00000406 	br	4b900 <alt_iic_isr_register+0xc4>
   4b8f0:	e0bff817 	ldw	r2,-32(fp)
   4b8f4:	e13ffc17 	ldw	r4,-16(fp)
   4b8f8:	100b883a 	mov	r5,r2
   4b8fc:	004b7500 	call	4b750 <alt_ic_irq_disable>
   4b900:	e0bff715 	stw	r2,-36(fp)
   4b904:	e0bff917 	ldw	r2,-28(fp)
   4b908:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b90c:	e0bffb17 	ldw	r2,-20(fp)
   4b910:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4b914:	e0bff717 	ldw	r2,-36(fp)
}
   4b918:	e037883a 	mov	sp,fp
   4b91c:	dfc00117 	ldw	ra,4(sp)
   4b920:	df000017 	ldw	fp,0(sp)
   4b924:	dec00204 	addi	sp,sp,8
   4b928:	f800283a 	ret

0004b92c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4b92c:	defff904 	addi	sp,sp,-28
   4b930:	dfc00615 	stw	ra,24(sp)
   4b934:	df000515 	stw	fp,20(sp)
   4b938:	df000504 	addi	fp,sp,20
   4b93c:	e13ffc15 	stw	r4,-16(fp)
   4b940:	e17ffd15 	stw	r5,-12(fp)
   4b944:	e1bffe15 	stw	r6,-8(fp)
   4b948:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4b94c:	e13ffd17 	ldw	r4,-12(fp)
   4b950:	e17ffe17 	ldw	r5,-8(fp)
   4b954:	e1bfff17 	ldw	r6,-4(fp)
   4b958:	004bb800 	call	4bb80 <open>
   4b95c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4b960:	e0bffb17 	ldw	r2,-20(fp)
   4b964:	10001c16 	blt	r2,zero,4b9d8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4b968:	00c00174 	movhi	r3,5
   4b96c:	18f42c04 	addi	r3,r3,-12112
   4b970:	e0bffb17 	ldw	r2,-20(fp)
   4b974:	10800324 	muli	r2,r2,12
   4b978:	1885883a 	add	r2,r3,r2
   4b97c:	10c00017 	ldw	r3,0(r2)
   4b980:	e0bffc17 	ldw	r2,-16(fp)
   4b984:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4b988:	00c00174 	movhi	r3,5
   4b98c:	18f42c04 	addi	r3,r3,-12112
   4b990:	e0bffb17 	ldw	r2,-20(fp)
   4b994:	10800324 	muli	r2,r2,12
   4b998:	1885883a 	add	r2,r3,r2
   4b99c:	10800104 	addi	r2,r2,4
   4b9a0:	10c00017 	ldw	r3,0(r2)
   4b9a4:	e0bffc17 	ldw	r2,-16(fp)
   4b9a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4b9ac:	00c00174 	movhi	r3,5
   4b9b0:	18f42c04 	addi	r3,r3,-12112
   4b9b4:	e0bffb17 	ldw	r2,-20(fp)
   4b9b8:	10800324 	muli	r2,r2,12
   4b9bc:	1885883a 	add	r2,r3,r2
   4b9c0:	10800204 	addi	r2,r2,8
   4b9c4:	10c00017 	ldw	r3,0(r2)
   4b9c8:	e0bffc17 	ldw	r2,-16(fp)
   4b9cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4b9d0:	e13ffb17 	ldw	r4,-20(fp)
   4b9d4:	0049f2c0 	call	49f2c <alt_release_fd>
  }
} 
   4b9d8:	e037883a 	mov	sp,fp
   4b9dc:	dfc00117 	ldw	ra,4(sp)
   4b9e0:	df000017 	ldw	fp,0(sp)
   4b9e4:	dec00204 	addi	sp,sp,8
   4b9e8:	f800283a 	ret

0004b9ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4b9ec:	defffb04 	addi	sp,sp,-20
   4b9f0:	dfc00415 	stw	ra,16(sp)
   4b9f4:	df000315 	stw	fp,12(sp)
   4b9f8:	df000304 	addi	fp,sp,12
   4b9fc:	e13ffd15 	stw	r4,-12(fp)
   4ba00:	e17ffe15 	stw	r5,-8(fp)
   4ba04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4ba08:	01000174 	movhi	r4,5
   4ba0c:	21342f04 	addi	r4,r4,-12100
   4ba10:	e17ffd17 	ldw	r5,-12(fp)
   4ba14:	01800044 	movi	r6,1
   4ba18:	01c07fc4 	movi	r7,511
   4ba1c:	004b92c0 	call	4b92c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4ba20:	01000174 	movhi	r4,5
   4ba24:	21342c04 	addi	r4,r4,-12112
   4ba28:	e17ffe17 	ldw	r5,-8(fp)
   4ba2c:	000d883a 	mov	r6,zero
   4ba30:	01c07fc4 	movi	r7,511
   4ba34:	004b92c0 	call	4b92c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4ba38:	01000174 	movhi	r4,5
   4ba3c:	21343204 	addi	r4,r4,-12088
   4ba40:	e17fff17 	ldw	r5,-4(fp)
   4ba44:	01800044 	movi	r6,1
   4ba48:	01c07fc4 	movi	r7,511
   4ba4c:	004b92c0 	call	4b92c <alt_open_fd>
}  
   4ba50:	e037883a 	mov	sp,fp
   4ba54:	dfc00117 	ldw	ra,4(sp)
   4ba58:	df000017 	ldw	fp,0(sp)
   4ba5c:	dec00204 	addi	sp,sp,8
   4ba60:	f800283a 	ret

0004ba64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ba64:	defffe04 	addi	sp,sp,-8
   4ba68:	dfc00115 	stw	ra,4(sp)
   4ba6c:	df000015 	stw	fp,0(sp)
   4ba70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ba74:	00800174 	movhi	r2,5
   4ba78:	10b8ae04 	addi	r2,r2,-7496
   4ba7c:	10800017 	ldw	r2,0(r2)
   4ba80:	10000526 	beq	r2,zero,4ba98 <alt_get_errno+0x34>
   4ba84:	00800174 	movhi	r2,5
   4ba88:	10b8ae04 	addi	r2,r2,-7496
   4ba8c:	10800017 	ldw	r2,0(r2)
   4ba90:	103ee83a 	callr	r2
   4ba94:	00000206 	br	4baa0 <alt_get_errno+0x3c>
   4ba98:	00800174 	movhi	r2,5
   4ba9c:	10bf4f04 	addi	r2,r2,-708
}
   4baa0:	e037883a 	mov	sp,fp
   4baa4:	dfc00117 	ldw	ra,4(sp)
   4baa8:	df000017 	ldw	fp,0(sp)
   4baac:	dec00204 	addi	sp,sp,8
   4bab0:	f800283a 	ret

0004bab4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4bab4:	defffd04 	addi	sp,sp,-12
   4bab8:	df000215 	stw	fp,8(sp)
   4babc:	df000204 	addi	fp,sp,8
   4bac0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4bac4:	e0bfff17 	ldw	r2,-4(fp)
   4bac8:	10800217 	ldw	r2,8(r2)
   4bacc:	10d00034 	orhi	r3,r2,16384
   4bad0:	e0bfff17 	ldw	r2,-4(fp)
   4bad4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4bad8:	e03ffe15 	stw	zero,-8(fp)
   4badc:	00001d06 	br	4bb54 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4bae0:	00c00174 	movhi	r3,5
   4bae4:	18f42c04 	addi	r3,r3,-12112
   4bae8:	e0bffe17 	ldw	r2,-8(fp)
   4baec:	10800324 	muli	r2,r2,12
   4baf0:	1885883a 	add	r2,r3,r2
   4baf4:	10c00017 	ldw	r3,0(r2)
   4baf8:	e0bfff17 	ldw	r2,-4(fp)
   4bafc:	10800017 	ldw	r2,0(r2)
   4bb00:	1880111e 	bne	r3,r2,4bb48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4bb04:	00c00174 	movhi	r3,5
   4bb08:	18f42c04 	addi	r3,r3,-12112
   4bb0c:	e0bffe17 	ldw	r2,-8(fp)
   4bb10:	10800324 	muli	r2,r2,12
   4bb14:	1885883a 	add	r2,r3,r2
   4bb18:	10800204 	addi	r2,r2,8
   4bb1c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4bb20:	1000090e 	bge	r2,zero,4bb48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4bb24:	e0bffe17 	ldw	r2,-8(fp)
   4bb28:	10c00324 	muli	r3,r2,12
   4bb2c:	00800174 	movhi	r2,5
   4bb30:	10b42c04 	addi	r2,r2,-12112
   4bb34:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4bb38:	e0bfff17 	ldw	r2,-4(fp)
   4bb3c:	18800226 	beq	r3,r2,4bb48 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4bb40:	00bffcc4 	movi	r2,-13
   4bb44:	00000a06 	br	4bb70 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4bb48:	e0bffe17 	ldw	r2,-8(fp)
   4bb4c:	10800044 	addi	r2,r2,1
   4bb50:	e0bffe15 	stw	r2,-8(fp)
   4bb54:	00800174 	movhi	r2,5
   4bb58:	10b8ad04 	addi	r2,r2,-7500
   4bb5c:	10800017 	ldw	r2,0(r2)
   4bb60:	1007883a 	mov	r3,r2
   4bb64:	e0bffe17 	ldw	r2,-8(fp)
   4bb68:	18bfdd2e 	bgeu	r3,r2,4bae0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4bb6c:	0005883a 	mov	r2,zero
}
   4bb70:	e037883a 	mov	sp,fp
   4bb74:	df000017 	ldw	fp,0(sp)
   4bb78:	dec00104 	addi	sp,sp,4
   4bb7c:	f800283a 	ret

0004bb80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4bb80:	defff604 	addi	sp,sp,-40
   4bb84:	dfc00915 	stw	ra,36(sp)
   4bb88:	df000815 	stw	fp,32(sp)
   4bb8c:	df000804 	addi	fp,sp,32
   4bb90:	e13ffd15 	stw	r4,-12(fp)
   4bb94:	e17ffe15 	stw	r5,-8(fp)
   4bb98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4bb9c:	00bfffc4 	movi	r2,-1
   4bba0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4bba4:	00bffb44 	movi	r2,-19
   4bba8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4bbac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4bbb0:	e13ffd17 	ldw	r4,-12(fp)
   4bbb4:	01400174 	movhi	r5,5
   4bbb8:	2978ab04 	addi	r5,r5,-7508
   4bbbc:	004be900 	call	4be90 <alt_find_dev>
   4bbc0:	e0bff815 	stw	r2,-32(fp)
   4bbc4:	e0bff817 	ldw	r2,-32(fp)
   4bbc8:	1000051e 	bne	r2,zero,4bbe0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4bbcc:	e13ffd17 	ldw	r4,-12(fp)
   4bbd0:	004bf200 	call	4bf20 <alt_find_file>
   4bbd4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4bbd8:	00800044 	movi	r2,1
   4bbdc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4bbe0:	e0bff817 	ldw	r2,-32(fp)
   4bbe4:	10002926 	beq	r2,zero,4bc8c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4bbe8:	e13ff817 	ldw	r4,-32(fp)
   4bbec:	004c0340 	call	4c034 <alt_get_fd>
   4bbf0:	e0bff915 	stw	r2,-28(fp)
   4bbf4:	e0bff917 	ldw	r2,-28(fp)
   4bbf8:	1000030e 	bge	r2,zero,4bc08 <open+0x88>
    {
      status = index;
   4bbfc:	e0bff917 	ldw	r2,-28(fp)
   4bc00:	e0bffa15 	stw	r2,-24(fp)
   4bc04:	00002306 	br	4bc94 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   4bc08:	e0bff917 	ldw	r2,-28(fp)
   4bc0c:	10c00324 	muli	r3,r2,12
   4bc10:	00800174 	movhi	r2,5
   4bc14:	10b42c04 	addi	r2,r2,-12112
   4bc18:	1885883a 	add	r2,r3,r2
   4bc1c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4bc20:	e0fffe17 	ldw	r3,-8(fp)
   4bc24:	00900034 	movhi	r2,16384
   4bc28:	10bfffc4 	addi	r2,r2,-1
   4bc2c:	1886703a 	and	r3,r3,r2
   4bc30:	e0bffc17 	ldw	r2,-16(fp)
   4bc34:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4bc38:	e0bffb17 	ldw	r2,-20(fp)
   4bc3c:	1000051e 	bne	r2,zero,4bc54 <open+0xd4>
   4bc40:	e13ffc17 	ldw	r4,-16(fp)
   4bc44:	004bab40 	call	4bab4 <alt_file_locked>
   4bc48:	e0bffa15 	stw	r2,-24(fp)
   4bc4c:	e0bffa17 	ldw	r2,-24(fp)
   4bc50:	10001016 	blt	r2,zero,4bc94 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4bc54:	e0bff817 	ldw	r2,-32(fp)
   4bc58:	10800317 	ldw	r2,12(r2)
   4bc5c:	10000826 	beq	r2,zero,4bc80 <open+0x100>
   4bc60:	e0bff817 	ldw	r2,-32(fp)
   4bc64:	10800317 	ldw	r2,12(r2)
   4bc68:	e13ffc17 	ldw	r4,-16(fp)
   4bc6c:	e17ffd17 	ldw	r5,-12(fp)
   4bc70:	e1bffe17 	ldw	r6,-8(fp)
   4bc74:	e1ffff17 	ldw	r7,-4(fp)
   4bc78:	103ee83a 	callr	r2
   4bc7c:	00000106 	br	4bc84 <open+0x104>
   4bc80:	0005883a 	mov	r2,zero
   4bc84:	e0bffa15 	stw	r2,-24(fp)
   4bc88:	00000206 	br	4bc94 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4bc8c:	00bffb44 	movi	r2,-19
   4bc90:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4bc94:	e0bffa17 	ldw	r2,-24(fp)
   4bc98:	1000080e 	bge	r2,zero,4bcbc <open+0x13c>
  {
    alt_release_fd (index);  
   4bc9c:	e13ff917 	ldw	r4,-28(fp)
   4bca0:	0049f2c0 	call	49f2c <alt_release_fd>
    ALT_ERRNO = -status;
   4bca4:	004ba640 	call	4ba64 <alt_get_errno>
   4bca8:	e0fffa17 	ldw	r3,-24(fp)
   4bcac:	00c7c83a 	sub	r3,zero,r3
   4bcb0:	10c00015 	stw	r3,0(r2)
    return -1;
   4bcb4:	00bfffc4 	movi	r2,-1
   4bcb8:	00000106 	br	4bcc0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4bcbc:	e0bff917 	ldw	r2,-28(fp)
}
   4bcc0:	e037883a 	mov	sp,fp
   4bcc4:	dfc00117 	ldw	ra,4(sp)
   4bcc8:	df000017 	ldw	fp,0(sp)
   4bccc:	dec00204 	addi	sp,sp,8
   4bcd0:	f800283a 	ret

0004bcd4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4bcd4:	defffa04 	addi	sp,sp,-24
   4bcd8:	df000515 	stw	fp,20(sp)
   4bcdc:	df000504 	addi	fp,sp,20
   4bce0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bce4:	0005303a 	rdctl	r2,status
   4bce8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bcec:	e0fffc17 	ldw	r3,-16(fp)
   4bcf0:	00bfff84 	movi	r2,-2
   4bcf4:	1884703a 	and	r2,r3,r2
   4bcf8:	1001703a 	wrctl	status,r2
  
  return context;
   4bcfc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4bd00:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4bd04:	e0bfff17 	ldw	r2,-4(fp)
   4bd08:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4bd0c:	e0bffd17 	ldw	r2,-12(fp)
   4bd10:	10800017 	ldw	r2,0(r2)
   4bd14:	e0fffd17 	ldw	r3,-12(fp)
   4bd18:	18c00117 	ldw	r3,4(r3)
   4bd1c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4bd20:	e0bffd17 	ldw	r2,-12(fp)
   4bd24:	10800117 	ldw	r2,4(r2)
   4bd28:	e0fffd17 	ldw	r3,-12(fp)
   4bd2c:	18c00017 	ldw	r3,0(r3)
   4bd30:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4bd34:	e0bffd17 	ldw	r2,-12(fp)
   4bd38:	e0fffd17 	ldw	r3,-12(fp)
   4bd3c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4bd40:	e0bffd17 	ldw	r2,-12(fp)
   4bd44:	e0fffd17 	ldw	r3,-12(fp)
   4bd48:	10c00015 	stw	r3,0(r2)
   4bd4c:	e0bffb17 	ldw	r2,-20(fp)
   4bd50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bd54:	e0bffe17 	ldw	r2,-8(fp)
   4bd58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4bd5c:	e037883a 	mov	sp,fp
   4bd60:	df000017 	ldw	fp,0(sp)
   4bd64:	dec00104 	addi	sp,sp,4
   4bd68:	f800283a 	ret

0004bd6c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4bd6c:	defffb04 	addi	sp,sp,-20
   4bd70:	dfc00415 	stw	ra,16(sp)
   4bd74:	df000315 	stw	fp,12(sp)
   4bd78:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4bd7c:	d0a00d17 	ldw	r2,-32716(gp)
   4bd80:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4bd84:	d0a6b117 	ldw	r2,-25916(gp)
   4bd88:	10800044 	addi	r2,r2,1
   4bd8c:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4bd90:	00002e06 	br	4be4c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4bd94:	e0bffd17 	ldw	r2,-12(fp)
   4bd98:	10800017 	ldw	r2,0(r2)
   4bd9c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4bda0:	e0bffd17 	ldw	r2,-12(fp)
   4bda4:	10800403 	ldbu	r2,16(r2)
   4bda8:	10803fcc 	andi	r2,r2,255
   4bdac:	10000426 	beq	r2,zero,4bdc0 <alt_tick+0x54>
   4bdb0:	d0a6b117 	ldw	r2,-25916(gp)
   4bdb4:	1000021e 	bne	r2,zero,4bdc0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4bdb8:	e0bffd17 	ldw	r2,-12(fp)
   4bdbc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4bdc0:	e0bffd17 	ldw	r2,-12(fp)
   4bdc4:	10800217 	ldw	r2,8(r2)
   4bdc8:	d0e6b117 	ldw	r3,-25916(gp)
   4bdcc:	18801d36 	bltu	r3,r2,4be44 <alt_tick+0xd8>
   4bdd0:	e0bffd17 	ldw	r2,-12(fp)
   4bdd4:	10800403 	ldbu	r2,16(r2)
   4bdd8:	10803fcc 	andi	r2,r2,255
   4bddc:	1000191e 	bne	r2,zero,4be44 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4bde0:	e0bffd17 	ldw	r2,-12(fp)
   4bde4:	10c00317 	ldw	r3,12(r2)
   4bde8:	e0bffd17 	ldw	r2,-12(fp)
   4bdec:	10800517 	ldw	r2,20(r2)
   4bdf0:	1009883a 	mov	r4,r2
   4bdf4:	183ee83a 	callr	r3
   4bdf8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4bdfc:	e0bfff17 	ldw	r2,-4(fp)
   4be00:	1000031e 	bne	r2,zero,4be10 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4be04:	e13ffd17 	ldw	r4,-12(fp)
   4be08:	004bcd40 	call	4bcd4 <alt_alarm_stop>
   4be0c:	00000d06 	br	4be44 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4be10:	e0bffd17 	ldw	r2,-12(fp)
   4be14:	10c00217 	ldw	r3,8(r2)
   4be18:	e0bfff17 	ldw	r2,-4(fp)
   4be1c:	1887883a 	add	r3,r3,r2
   4be20:	e0bffd17 	ldw	r2,-12(fp)
   4be24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4be28:	e0bffd17 	ldw	r2,-12(fp)
   4be2c:	10c00217 	ldw	r3,8(r2)
   4be30:	d0a6b117 	ldw	r2,-25916(gp)
   4be34:	1880032e 	bgeu	r3,r2,4be44 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4be38:	e0bffd17 	ldw	r2,-12(fp)
   4be3c:	00c00044 	movi	r3,1
   4be40:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4be44:	e0bffe17 	ldw	r2,-8(fp)
   4be48:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4be4c:	e0fffd17 	ldw	r3,-12(fp)
   4be50:	d0a00d04 	addi	r2,gp,-32716
   4be54:	18bfcf1e 	bne	r3,r2,4bd94 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4be58:	0001883a 	nop
}
   4be5c:	e037883a 	mov	sp,fp
   4be60:	dfc00117 	ldw	ra,4(sp)
   4be64:	df000017 	ldw	fp,0(sp)
   4be68:	dec00204 	addi	sp,sp,8
   4be6c:	f800283a 	ret

0004be70 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4be70:	deffff04 	addi	sp,sp,-4
   4be74:	df000015 	stw	fp,0(sp)
   4be78:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4be7c:	000170fa 	wrctl	ienable,zero
}
   4be80:	e037883a 	mov	sp,fp
   4be84:	df000017 	ldw	fp,0(sp)
   4be88:	dec00104 	addi	sp,sp,4
   4be8c:	f800283a 	ret

0004be90 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4be90:	defffa04 	addi	sp,sp,-24
   4be94:	dfc00515 	stw	ra,20(sp)
   4be98:	df000415 	stw	fp,16(sp)
   4be9c:	df000404 	addi	fp,sp,16
   4bea0:	e13ffe15 	stw	r4,-8(fp)
   4bea4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4bea8:	e0bfff17 	ldw	r2,-4(fp)
   4beac:	10800017 	ldw	r2,0(r2)
   4beb0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4beb4:	e13ffe17 	ldw	r4,-8(fp)
   4beb8:	00474cc0 	call	474cc <strlen>
   4bebc:	10800044 	addi	r2,r2,1
   4bec0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4bec4:	00000d06 	br	4befc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4bec8:	e0bffc17 	ldw	r2,-16(fp)
   4becc:	10c00217 	ldw	r3,8(r2)
   4bed0:	e0bffd17 	ldw	r2,-12(fp)
   4bed4:	1809883a 	mov	r4,r3
   4bed8:	e17ffe17 	ldw	r5,-8(fp)
   4bedc:	100d883a 	mov	r6,r2
   4bee0:	004c1c00 	call	4c1c0 <memcmp>
   4bee4:	1000021e 	bne	r2,zero,4bef0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4bee8:	e0bffc17 	ldw	r2,-16(fp)
   4beec:	00000706 	br	4bf0c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4bef0:	e0bffc17 	ldw	r2,-16(fp)
   4bef4:	10800017 	ldw	r2,0(r2)
   4bef8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4befc:	e0fffc17 	ldw	r3,-16(fp)
   4bf00:	e0bfff17 	ldw	r2,-4(fp)
   4bf04:	18bff01e 	bne	r3,r2,4bec8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4bf08:	0005883a 	mov	r2,zero
}
   4bf0c:	e037883a 	mov	sp,fp
   4bf10:	dfc00117 	ldw	ra,4(sp)
   4bf14:	df000017 	ldw	fp,0(sp)
   4bf18:	dec00204 	addi	sp,sp,8
   4bf1c:	f800283a 	ret

0004bf20 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4bf20:	defffb04 	addi	sp,sp,-20
   4bf24:	dfc00415 	stw	ra,16(sp)
   4bf28:	df000315 	stw	fp,12(sp)
   4bf2c:	df000304 	addi	fp,sp,12
   4bf30:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4bf34:	00800174 	movhi	r2,5
   4bf38:	10b8a904 	addi	r2,r2,-7516
   4bf3c:	10800017 	ldw	r2,0(r2)
   4bf40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4bf44:	00003106 	br	4c00c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4bf48:	e0bffd17 	ldw	r2,-12(fp)
   4bf4c:	10800217 	ldw	r2,8(r2)
   4bf50:	1009883a 	mov	r4,r2
   4bf54:	00474cc0 	call	474cc <strlen>
   4bf58:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4bf5c:	e0bffd17 	ldw	r2,-12(fp)
   4bf60:	10c00217 	ldw	r3,8(r2)
   4bf64:	e0bffe17 	ldw	r2,-8(fp)
   4bf68:	10bfffc4 	addi	r2,r2,-1
   4bf6c:	1885883a 	add	r2,r3,r2
   4bf70:	10800003 	ldbu	r2,0(r2)
   4bf74:	10803fcc 	andi	r2,r2,255
   4bf78:	1080201c 	xori	r2,r2,128
   4bf7c:	10bfe004 	addi	r2,r2,-128
   4bf80:	10800bd8 	cmpnei	r2,r2,47
   4bf84:	1000031e 	bne	r2,zero,4bf94 <alt_find_file+0x74>
    {
      len -= 1;
   4bf88:	e0bffe17 	ldw	r2,-8(fp)
   4bf8c:	10bfffc4 	addi	r2,r2,-1
   4bf90:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4bf94:	e0bffe17 	ldw	r2,-8(fp)
   4bf98:	e0ffff17 	ldw	r3,-4(fp)
   4bf9c:	1885883a 	add	r2,r3,r2
   4bfa0:	10800003 	ldbu	r2,0(r2)
   4bfa4:	10803fcc 	andi	r2,r2,255
   4bfa8:	1080201c 	xori	r2,r2,128
   4bfac:	10bfe004 	addi	r2,r2,-128
   4bfb0:	10800be0 	cmpeqi	r2,r2,47
   4bfb4:	1000081e 	bne	r2,zero,4bfd8 <alt_find_file+0xb8>
   4bfb8:	e0bffe17 	ldw	r2,-8(fp)
   4bfbc:	e0ffff17 	ldw	r3,-4(fp)
   4bfc0:	1885883a 	add	r2,r3,r2
   4bfc4:	10800003 	ldbu	r2,0(r2)
   4bfc8:	10803fcc 	andi	r2,r2,255
   4bfcc:	1080201c 	xori	r2,r2,128
   4bfd0:	10bfe004 	addi	r2,r2,-128
   4bfd4:	10000a1e 	bne	r2,zero,4c000 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4bfd8:	e0bffd17 	ldw	r2,-12(fp)
   4bfdc:	10c00217 	ldw	r3,8(r2)
   4bfe0:	e0bffe17 	ldw	r2,-8(fp)
   4bfe4:	1809883a 	mov	r4,r3
   4bfe8:	e17fff17 	ldw	r5,-4(fp)
   4bfec:	100d883a 	mov	r6,r2
   4bff0:	004c1c00 	call	4c1c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4bff4:	1000021e 	bne	r2,zero,4c000 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4bff8:	e0bffd17 	ldw	r2,-12(fp)
   4bffc:	00000806 	br	4c020 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4c000:	e0bffd17 	ldw	r2,-12(fp)
   4c004:	10800017 	ldw	r2,0(r2)
   4c008:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c00c:	e0fffd17 	ldw	r3,-12(fp)
   4c010:	00800174 	movhi	r2,5
   4c014:	10b8a904 	addi	r2,r2,-7516
   4c018:	18bfcb1e 	bne	r3,r2,4bf48 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4c01c:	0005883a 	mov	r2,zero
}
   4c020:	e037883a 	mov	sp,fp
   4c024:	dfc00117 	ldw	ra,4(sp)
   4c028:	df000017 	ldw	fp,0(sp)
   4c02c:	dec00204 	addi	sp,sp,8
   4c030:	f800283a 	ret

0004c034 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4c034:	defffc04 	addi	sp,sp,-16
   4c038:	df000315 	stw	fp,12(sp)
   4c03c:	df000304 	addi	fp,sp,12
   4c040:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4c044:	00bffa04 	movi	r2,-24
   4c048:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c04c:	e03ffd15 	stw	zero,-12(fp)
   4c050:	00001d06 	br	4c0c8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   4c054:	00c00174 	movhi	r3,5
   4c058:	18f42c04 	addi	r3,r3,-12112
   4c05c:	e0bffd17 	ldw	r2,-12(fp)
   4c060:	10800324 	muli	r2,r2,12
   4c064:	1885883a 	add	r2,r3,r2
   4c068:	10800017 	ldw	r2,0(r2)
   4c06c:	1000131e 	bne	r2,zero,4c0bc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   4c070:	00c00174 	movhi	r3,5
   4c074:	18f42c04 	addi	r3,r3,-12112
   4c078:	e0bffd17 	ldw	r2,-12(fp)
   4c07c:	10800324 	muli	r2,r2,12
   4c080:	1885883a 	add	r2,r3,r2
   4c084:	e0ffff17 	ldw	r3,-4(fp)
   4c088:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4c08c:	00800174 	movhi	r2,5
   4c090:	10b8ad04 	addi	r2,r2,-7500
   4c094:	10c00017 	ldw	r3,0(r2)
   4c098:	e0bffd17 	ldw	r2,-12(fp)
   4c09c:	1880040e 	bge	r3,r2,4c0b0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   4c0a0:	00800174 	movhi	r2,5
   4c0a4:	10b8ad04 	addi	r2,r2,-7500
   4c0a8:	e0fffd17 	ldw	r3,-12(fp)
   4c0ac:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4c0b0:	e0bffd17 	ldw	r2,-12(fp)
   4c0b4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4c0b8:	00000606 	br	4c0d4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c0bc:	e0bffd17 	ldw	r2,-12(fp)
   4c0c0:	10800044 	addi	r2,r2,1
   4c0c4:	e0bffd15 	stw	r2,-12(fp)
   4c0c8:	e0bffd17 	ldw	r2,-12(fp)
   4c0cc:	10800810 	cmplti	r2,r2,32
   4c0d0:	103fe01e 	bne	r2,zero,4c054 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4c0d4:	e0bffe17 	ldw	r2,-8(fp)
}
   4c0d8:	e037883a 	mov	sp,fp
   4c0dc:	df000017 	ldw	fp,0(sp)
   4c0e0:	dec00104 	addi	sp,sp,4
   4c0e4:	f800283a 	ret

0004c0e8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4c0e8:	defffb04 	addi	sp,sp,-20
   4c0ec:	df000415 	stw	fp,16(sp)
   4c0f0:	df000404 	addi	fp,sp,16
   4c0f4:	e13ffe15 	stw	r4,-8(fp)
   4c0f8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4c0fc:	e0bfff17 	ldw	r2,-4(fp)
   4c100:	10840070 	cmpltui	r2,r2,4097
   4c104:	1000021e 	bne	r2,zero,4c110 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4c108:	00840004 	movi	r2,4096
   4c10c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4c110:	e0fffe17 	ldw	r3,-8(fp)
   4c114:	e0bfff17 	ldw	r2,-4(fp)
   4c118:	1885883a 	add	r2,r3,r2
   4c11c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c120:	e0bffe17 	ldw	r2,-8(fp)
   4c124:	e0bffc15 	stw	r2,-16(fp)
   4c128:	00000506 	br	4c140 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4c12c:	e0bffc17 	ldw	r2,-16(fp)
   4c130:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c134:	e0bffc17 	ldw	r2,-16(fp)
   4c138:	10800804 	addi	r2,r2,32
   4c13c:	e0bffc15 	stw	r2,-16(fp)
   4c140:	e0fffc17 	ldw	r3,-16(fp)
   4c144:	e0bffd17 	ldw	r2,-12(fp)
   4c148:	18bff836 	bltu	r3,r2,4c12c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4c14c:	e0bffe17 	ldw	r2,-8(fp)
   4c150:	108007cc 	andi	r2,r2,31
   4c154:	10000226 	beq	r2,zero,4c160 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4c158:	e0bffc17 	ldw	r2,-16(fp)
   4c15c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4c160:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4c164:	e037883a 	mov	sp,fp
   4c168:	df000017 	ldw	fp,0(sp)
   4c16c:	dec00104 	addi	sp,sp,4
   4c170:	f800283a 	ret

0004c174 <atexit>:
   4c174:	200b883a 	mov	r5,r4
   4c178:	000d883a 	mov	r6,zero
   4c17c:	0009883a 	mov	r4,zero
   4c180:	000f883a 	mov	r7,zero
   4c184:	004c23c1 	jmpi	4c23c <__register_exitproc>

0004c188 <exit>:
   4c188:	defffe04 	addi	sp,sp,-8
   4c18c:	000b883a 	mov	r5,zero
   4c190:	dc000015 	stw	r16,0(sp)
   4c194:	dfc00115 	stw	ra,4(sp)
   4c198:	2021883a 	mov	r16,r4
   4c19c:	004c36c0 	call	4c36c <__call_exitprocs>
   4c1a0:	00800174 	movhi	r2,5
   4c1a4:	10b8a404 	addi	r2,r2,-7536
   4c1a8:	11000017 	ldw	r4,0(r2)
   4c1ac:	20800f17 	ldw	r2,60(r4)
   4c1b0:	10000126 	beq	r2,zero,4c1b8 <exit+0x30>
   4c1b4:	103ee83a 	callr	r2
   4c1b8:	8009883a 	mov	r4,r16
   4c1bc:	004c50c0 	call	4c50c <_exit>

0004c1c0 <memcmp>:
   4c1c0:	01c000c4 	movi	r7,3
   4c1c4:	3980192e 	bgeu	r7,r6,4c22c <memcmp+0x6c>
   4c1c8:	2904b03a 	or	r2,r5,r4
   4c1cc:	11c4703a 	and	r2,r2,r7
   4c1d0:	10000f26 	beq	r2,zero,4c210 <memcmp+0x50>
   4c1d4:	20c00003 	ldbu	r3,0(r4)
   4c1d8:	28800003 	ldbu	r2,0(r5)
   4c1dc:	1880151e 	bne	r3,r2,4c234 <memcmp+0x74>
   4c1e0:	31bfff84 	addi	r6,r6,-2
   4c1e4:	01ffffc4 	movi	r7,-1
   4c1e8:	00000406 	br	4c1fc <memcmp+0x3c>
   4c1ec:	20c00003 	ldbu	r3,0(r4)
   4c1f0:	28800003 	ldbu	r2,0(r5)
   4c1f4:	31bfffc4 	addi	r6,r6,-1
   4c1f8:	18800e1e 	bne	r3,r2,4c234 <memcmp+0x74>
   4c1fc:	21000044 	addi	r4,r4,1
   4c200:	29400044 	addi	r5,r5,1
   4c204:	31fff91e 	bne	r6,r7,4c1ec <memcmp+0x2c>
   4c208:	0005883a 	mov	r2,zero
   4c20c:	f800283a 	ret
   4c210:	20c00017 	ldw	r3,0(r4)
   4c214:	28800017 	ldw	r2,0(r5)
   4c218:	1880041e 	bne	r3,r2,4c22c <memcmp+0x6c>
   4c21c:	31bfff04 	addi	r6,r6,-4
   4c220:	21000104 	addi	r4,r4,4
   4c224:	29400104 	addi	r5,r5,4
   4c228:	39bff936 	bltu	r7,r6,4c210 <memcmp+0x50>
   4c22c:	303fe91e 	bne	r6,zero,4c1d4 <memcmp+0x14>
   4c230:	003ff506 	br	4c208 <memcmp+0x48>
   4c234:	1885c83a 	sub	r2,r3,r2
   4c238:	f800283a 	ret

0004c23c <__register_exitproc>:
   4c23c:	defffa04 	addi	sp,sp,-24
   4c240:	00800174 	movhi	r2,5
   4c244:	10b8a404 	addi	r2,r2,-7536
   4c248:	dc000315 	stw	r16,12(sp)
   4c24c:	14000017 	ldw	r16,0(r2)
   4c250:	dc400415 	stw	r17,16(sp)
   4c254:	dfc00515 	stw	ra,20(sp)
   4c258:	80805217 	ldw	r2,328(r16)
   4c25c:	2023883a 	mov	r17,r4
   4c260:	10003e26 	beq	r2,zero,4c35c <__register_exitproc+0x120>
   4c264:	10c00117 	ldw	r3,4(r2)
   4c268:	020007c4 	movi	r8,31
   4c26c:	40c0180e 	bge	r8,r3,4c2d0 <__register_exitproc+0x94>
   4c270:	00800034 	movhi	r2,0
   4c274:	10800004 	addi	r2,r2,0
   4c278:	1000061e 	bne	r2,zero,4c294 <__register_exitproc+0x58>
   4c27c:	00bfffc4 	movi	r2,-1
   4c280:	dfc00517 	ldw	ra,20(sp)
   4c284:	dc400417 	ldw	r17,16(sp)
   4c288:	dc000317 	ldw	r16,12(sp)
   4c28c:	dec00604 	addi	sp,sp,24
   4c290:	f800283a 	ret
   4c294:	01006404 	movi	r4,400
   4c298:	d9400015 	stw	r5,0(sp)
   4c29c:	d9800115 	stw	r6,4(sp)
   4c2a0:	d9c00215 	stw	r7,8(sp)
   4c2a4:	00000000 	call	0 <__alt_mem_nios2_instr_data_ram-0x40000>
   4c2a8:	d9400017 	ldw	r5,0(sp)
   4c2ac:	d9800117 	ldw	r6,4(sp)
   4c2b0:	d9c00217 	ldw	r7,8(sp)
   4c2b4:	103ff126 	beq	r2,zero,4c27c <__register_exitproc+0x40>
   4c2b8:	80c05217 	ldw	r3,328(r16)
   4c2bc:	10000115 	stw	zero,4(r2)
   4c2c0:	10c00015 	stw	r3,0(r2)
   4c2c4:	80805215 	stw	r2,328(r16)
   4c2c8:	10006215 	stw	zero,392(r2)
   4c2cc:	10006315 	stw	zero,396(r2)
   4c2d0:	10c00117 	ldw	r3,4(r2)
   4c2d4:	88000d1e 	bne	r17,zero,4c30c <__register_exitproc+0xd0>
   4c2d8:	19000084 	addi	r4,r3,2
   4c2dc:	2109883a 	add	r4,r4,r4
   4c2e0:	18c00044 	addi	r3,r3,1
   4c2e4:	2109883a 	add	r4,r4,r4
   4c2e8:	1109883a 	add	r4,r2,r4
   4c2ec:	10c00115 	stw	r3,4(r2)
   4c2f0:	0005883a 	mov	r2,zero
   4c2f4:	21400015 	stw	r5,0(r4)
   4c2f8:	dfc00517 	ldw	ra,20(sp)
   4c2fc:	dc400417 	ldw	r17,16(sp)
   4c300:	dc000317 	ldw	r16,12(sp)
   4c304:	dec00604 	addi	sp,sp,24
   4c308:	f800283a 	ret
   4c30c:	02400044 	movi	r9,1
   4c310:	12806217 	ldw	r10,392(r2)
   4c314:	48d2983a 	sll	r9,r9,r3
   4c318:	19000804 	addi	r4,r3,32
   4c31c:	18d1883a 	add	r8,r3,r3
   4c320:	2109883a 	add	r4,r4,r4
   4c324:	4211883a 	add	r8,r8,r8
   4c328:	2109883a 	add	r4,r4,r4
   4c32c:	1109883a 	add	r4,r2,r4
   4c330:	1211883a 	add	r8,r2,r8
   4c334:	5254b03a 	or	r10,r10,r9
   4c338:	21c02215 	stw	r7,136(r4)
   4c33c:	41802215 	stw	r6,136(r8)
   4c340:	12806215 	stw	r10,392(r2)
   4c344:	01000084 	movi	r4,2
   4c348:	893fe31e 	bne	r17,r4,4c2d8 <__register_exitproc+0x9c>
   4c34c:	11006317 	ldw	r4,396(r2)
   4c350:	2252b03a 	or	r9,r4,r9
   4c354:	12406315 	stw	r9,396(r2)
   4c358:	003fdf06 	br	4c2d8 <__register_exitproc+0x9c>
   4c35c:	00800174 	movhi	r2,5
   4c360:	10bfa004 	addi	r2,r2,-384
   4c364:	80805215 	stw	r2,328(r16)
   4c368:	003fbe06 	br	4c264 <__register_exitproc+0x28>

0004c36c <__call_exitprocs>:
   4c36c:	00800174 	movhi	r2,5
   4c370:	10b8a404 	addi	r2,r2,-7536
   4c374:	10800017 	ldw	r2,0(r2)
   4c378:	defff304 	addi	sp,sp,-52
   4c37c:	df000b15 	stw	fp,44(sp)
   4c380:	d8800015 	stw	r2,0(sp)
   4c384:	10805204 	addi	r2,r2,328
   4c388:	dd400815 	stw	r21,32(sp)
   4c38c:	dfc00c15 	stw	ra,48(sp)
   4c390:	ddc00a15 	stw	r23,40(sp)
   4c394:	dd800915 	stw	r22,36(sp)
   4c398:	dd000715 	stw	r20,28(sp)
   4c39c:	dcc00615 	stw	r19,24(sp)
   4c3a0:	dc800515 	stw	r18,20(sp)
   4c3a4:	dc400415 	stw	r17,16(sp)
   4c3a8:	dc000315 	stw	r16,12(sp)
   4c3ac:	d9000115 	stw	r4,4(sp)
   4c3b0:	2839883a 	mov	fp,r5
   4c3b4:	d8800215 	stw	r2,8(sp)
   4c3b8:	057fffc4 	movi	r21,-1
   4c3bc:	d8800017 	ldw	r2,0(sp)
   4c3c0:	ddc00217 	ldw	r23,8(sp)
   4c3c4:	14805217 	ldw	r18,328(r2)
   4c3c8:	90001726 	beq	r18,zero,4c428 <__call_exitprocs+0xbc>
   4c3cc:	94400117 	ldw	r17,4(r18)
   4c3d0:	8c3fffc4 	addi	r16,r17,-1
   4c3d4:	80001116 	blt	r16,zero,4c41c <__call_exitprocs+0xb0>
   4c3d8:	8c400044 	addi	r17,r17,1
   4c3dc:	8427883a 	add	r19,r16,r16
   4c3e0:	8c63883a 	add	r17,r17,r17
   4c3e4:	95802204 	addi	r22,r18,136
   4c3e8:	9ce7883a 	add	r19,r19,r19
   4c3ec:	8c63883a 	add	r17,r17,r17
   4c3f0:	b4e7883a 	add	r19,r22,r19
   4c3f4:	9463883a 	add	r17,r18,r17
   4c3f8:	e0001726 	beq	fp,zero,4c458 <__call_exitprocs+0xec>
   4c3fc:	8c87c83a 	sub	r3,r17,r18
   4c400:	b0c7883a 	add	r3,r22,r3
   4c404:	18c01e17 	ldw	r3,120(r3)
   4c408:	1f001326 	beq	r3,fp,4c458 <__call_exitprocs+0xec>
   4c40c:	843fffc4 	addi	r16,r16,-1
   4c410:	9cffff04 	addi	r19,r19,-4
   4c414:	8c7fff04 	addi	r17,r17,-4
   4c418:	857ff71e 	bne	r16,r21,4c3f8 <__call_exitprocs+0x8c>
   4c41c:	00800034 	movhi	r2,0
   4c420:	10800004 	addi	r2,r2,0
   4c424:	10002a1e 	bne	r2,zero,4c4d0 <__call_exitprocs+0x164>
   4c428:	dfc00c17 	ldw	ra,48(sp)
   4c42c:	df000b17 	ldw	fp,44(sp)
   4c430:	ddc00a17 	ldw	r23,40(sp)
   4c434:	dd800917 	ldw	r22,36(sp)
   4c438:	dd400817 	ldw	r21,32(sp)
   4c43c:	dd000717 	ldw	r20,28(sp)
   4c440:	dcc00617 	ldw	r19,24(sp)
   4c444:	dc800517 	ldw	r18,20(sp)
   4c448:	dc400417 	ldw	r17,16(sp)
   4c44c:	dc000317 	ldw	r16,12(sp)
   4c450:	dec00d04 	addi	sp,sp,52
   4c454:	f800283a 	ret
   4c458:	91000117 	ldw	r4,4(r18)
   4c45c:	88c00017 	ldw	r3,0(r17)
   4c460:	213fffc4 	addi	r4,r4,-1
   4c464:	24001526 	beq	r4,r16,4c4bc <__call_exitprocs+0x150>
   4c468:	88000015 	stw	zero,0(r17)
   4c46c:	183fe726 	beq	r3,zero,4c40c <__call_exitprocs+0xa0>
   4c470:	00800044 	movi	r2,1
   4c474:	1408983a 	sll	r4,r2,r16
   4c478:	91406217 	ldw	r5,392(r18)
   4c47c:	95000117 	ldw	r20,4(r18)
   4c480:	214a703a 	and	r5,r4,r5
   4c484:	28000b26 	beq	r5,zero,4c4b4 <__call_exitprocs+0x148>
   4c488:	91406317 	ldw	r5,396(r18)
   4c48c:	2148703a 	and	r4,r4,r5
   4c490:	20000c1e 	bne	r4,zero,4c4c4 <__call_exitprocs+0x158>
   4c494:	99400017 	ldw	r5,0(r19)
   4c498:	d9000117 	ldw	r4,4(sp)
   4c49c:	183ee83a 	callr	r3
   4c4a0:	90c00117 	ldw	r3,4(r18)
   4c4a4:	1d3fc51e 	bne	r3,r20,4c3bc <__call_exitprocs+0x50>
   4c4a8:	b8c00017 	ldw	r3,0(r23)
   4c4ac:	1cbfd726 	beq	r3,r18,4c40c <__call_exitprocs+0xa0>
   4c4b0:	003fc206 	br	4c3bc <__call_exitprocs+0x50>
   4c4b4:	183ee83a 	callr	r3
   4c4b8:	003ff906 	br	4c4a0 <__call_exitprocs+0x134>
   4c4bc:	94000115 	stw	r16,4(r18)
   4c4c0:	003fea06 	br	4c46c <__call_exitprocs+0x100>
   4c4c4:	99000017 	ldw	r4,0(r19)
   4c4c8:	183ee83a 	callr	r3
   4c4cc:	003ff406 	br	4c4a0 <__call_exitprocs+0x134>
   4c4d0:	90c00117 	ldw	r3,4(r18)
   4c4d4:	1800071e 	bne	r3,zero,4c4f4 <__call_exitprocs+0x188>
   4c4d8:	90c00017 	ldw	r3,0(r18)
   4c4dc:	18000926 	beq	r3,zero,4c504 <__call_exitprocs+0x198>
   4c4e0:	9009883a 	mov	r4,r18
   4c4e4:	b8c00015 	stw	r3,0(r23)
   4c4e8:	00000000 	call	0 <__alt_mem_nios2_instr_data_ram-0x40000>
   4c4ec:	bc800017 	ldw	r18,0(r23)
   4c4f0:	003fb506 	br	4c3c8 <__call_exitprocs+0x5c>
   4c4f4:	90c00017 	ldw	r3,0(r18)
   4c4f8:	902f883a 	mov	r23,r18
   4c4fc:	1825883a 	mov	r18,r3
   4c500:	003fb106 	br	4c3c8 <__call_exitprocs+0x5c>
   4c504:	0007883a 	mov	r3,zero
   4c508:	003ffb06 	br	4c4f8 <__call_exitprocs+0x18c>

0004c50c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4c50c:	defffc04 	addi	sp,sp,-16
   4c510:	df000315 	stw	fp,12(sp)
   4c514:	df000304 	addi	fp,sp,12
   4c518:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4c51c:	0001883a 	nop
   4c520:	e0bfff17 	ldw	r2,-4(fp)
   4c524:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   4c528:	e0bffd17 	ldw	r2,-12(fp)
   4c52c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4c530:	e0bffe17 	ldw	r2,-8(fp)
   4c534:	10000226 	beq	r2,zero,4c540 <_exit+0x34>
    ALT_SIM_FAIL();
   4c538:	002af070 	cmpltui	zero,zero,43969
   4c53c:	00000106 	br	4c544 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   4c540:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4c544:	003fff06 	br	4c544 <_exit+0x38>
